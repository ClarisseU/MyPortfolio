(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{811:function(e,t,r){function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var i={check_CRM:function(e){return"[object String]"!=Object.prototype.toString.call(e)||"CRMProcessingSuccess"==e},create:function(e){function t(){var e={name:"toneCurve"};return e.create=function(e){var t={_process:{}};return t.m_context=e,t.m_chrome=0,t.m_curve=new Array(256),t.m_data=new Array(1024),t.tex_num=0,t.m_curve_tex=0,t.m_formula_list=0,t.m_shader=0,t.init_shader=0,t.chrome_shader=0,t.shader_uniform={},t.shader_procession={},t.shader_setup=function(e){if(!this.m_curve_tex&&(this.m_curve_tex=function(e,t,r,o,i,a,s,n,c,u){u=u||e.CLAMP_TO_EDGE,s=s?4:s,null==n&&(n=0);c=c?e.LINEAR:c,u=u?e.CLAMP_TO_EDGE:u;var l,m=e;m.LUMINANCE,m.LUMINANCE_ALPHA,m.RGB,m.RGBA;if(s<=0||s>4)return 0;var h=[1,2,1,4][s-1];return m.activeTexture(m.TEXTURE1+n),l=m.createTexture(),t=null!=t?new Uint8Array(t):null,m.bindTexture(m.TEXTURE_2D,l),m.pixelStorei(m.UNPACK_ALIGNMENT,h),m.texImage2D(m.TEXTURE_2D,0,m.RGBA,r,o,0,m.RGBA,m.UNSIGNED_BYTE,t),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,c),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,c),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,u),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,u),l}(this.m_context.m_context,null,256,1,this.m_context.m_context.RGBA,this.m_context.m_context.UNSIGNED_BYTE,4,0,this.m_context.m_context.LINEAR),!this.m_curve_tex))throw"out of memmory in toneMapParcer";e.shader_texture("curve",this.m_curve_tex);for(var t=0;t<256;++t)this.m_data[4*t]=Math.min(256*this.m_curve[t],256),this.m_data[4*t+1]=Math.min(256*this.m_curve[t],256),this.m_data[4*t+2]=Math.min(256*this.m_curve[t],256),this.m_data[4*t+3]=255;this.m_context.m_context.texSubImage2D(this.m_context.m_context.TEXTURE_2D,0,0,0,256,1,this.m_context.m_context.RGBA,this.m_context.m_context.UNSIGNED_BYTE,new Uint8Array(this.m_data)),e.shader_texture("chrome",this.m_chrome[this.tex_num])},t.init={},t.initChromeTemplate="\t    \tvarying vec2 textureCoordinate;            void main()    {    gl_FragColor = vec4(textureCoordinate.x,0.0,textureCoordinate.y,1.0);    }",t.fshToneCurveTemplate="\t    \tvarying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;        \t\t\t\tuniform sampler2D curve;    uniform sampler2D chrome;    vec3 color_limite(vec3 src,float lum)    {        vec3 vl = vec3(lum);        vec3 vc = src - vl;        vec3 fac = min((vec3(1.0) - vl) / max(vc,vec3(0.00001)),vec3(1.0));        vc = vc * vec3(min(fac.r,min(fac.g,fac.b)));        return vl + vc;    }        void main()    {\t\tvec4 src = texture2D(inputImageTexture, textureCoordinate);    vec4 dst;    \t\t\t{    vec3 lsrc = max(src.rgb * vec3(1.0 / 12.82),pow((src.rgb + vec3(0.055)) * vec3(1.0 / 1.055),vec3(2.4)));    vec3 csrc = lsrc * vec3(0.299,0.587,0.114);    float lum = csrc.r + csrc.g + csrc.b;    csrc /= vec3(lum+0.00001);    {        float lv  = min(lum * 12.82,pow(lum,(1.0 / 2.4)) * 1.055 - 0.055);        float lvn = texture2D(curve, vec2(lv,0.5)).g;        lum = max(lvn * (1.0 / 12.82),pow((lvn + 0.055) * (1.0 / 1.055),2.4));    }    {        csrc.rb = texture2D(chrome, vec2(csrc.r,csrc.b)).rb;        csrc.g = 1.0 - csrc.r - csrc.b;    }    csrc *= vec3(lum +0.00001);    lsrc = csrc * vec3(1.0/0.299,1.0/0.587,1.0/0.114);    lsrc = color_limite(lsrc,lum);    src.rgb = min(lsrc * 12.82,pow(lsrc,vec3(1.0 / 2.4)) * vec3(1.055) - vec3(0.055));    dst = src;}        gl_FragColor = dst;    }",t.init=function(e,t){for(var r=0;r<256;++r)this.m_curve[r]=(r+.5)*(1/256);this.m_chrome||(this.m_chrome=new Array(2),this.m_chrome[0]=pe(256,256),this.m_chrome[1]=pe(256,256)),this.init_shader||(this.init_shader=new N(null,this.initChromeTemplate,this.m_context.m_context));var o=fe(this.m_context.m_context,null,this.init_shader,256,256,t);o.draw_to(this.m_chrome[0]),o=null,this.tex_num=0;do{var i=e.fetch_symbol();this.m_formula_list||(this.m_formula_list=C());var a=this.m_formula_list.get_formula_Item_with_symbol(i);a&&a!={}&&a.color!={}||parcer.error("invalid curve process name",i),null!=a.luminance&&a.luminance(e,this.m_curve),null!=a.shader_process&&(a.shader_process(e,this.m_context.m_context,this.m_chrome[this.tex_num],this.m_chrome[0==this.tex_num?1:0],t),this.tex_num=0==this.tex_num?1:0)}while(e.pre_test_symbol("toneCurve"))},t.gpu_process=function(e,t,r){try{var o=he(t);this.init(e,r.m_frame_buffer),this.m_shader||(this.m_shader=new N(null,this.fshToneCurveTemplate,this.m_context.m_context));var i=fe(this.m_context.m_context,r,this.m_shader);if(i.shader_texture("inputImageTexture",t.current()),this.shader_setup(i),i.draw_to(t.new_temporary()),this.m_context.m_context.getError())throw"CGEPTPTemplate::gpu_process";t.push_to_current(),o.destroy()}catch(e){throw"CGEPTPTemplete::gpu_process"}finally{o.destroy()}},t.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=0),this.init_shader&&(this.init_shader.destroy(),this.init_shader=0),this.m_chrome&&(this.m_context.m_context.deleteTexture(this.m_chrome[0]),this.m_context.m_context.deleteTexture(this.m_chrome[1]),this.m_chrome[0]=0,this.m_chrome[1]=0),this.m_curve_tex&&this.m_context.m_context.deleteTexture(this.m_curve_tex),this.m_formula_list.destroy()},t},e}var r=function(){function e(e,t,r){return Math.min(Math.max(e*(1-r)+t*r,0),255)}return{createCGEBlendOpacity:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, src2, alpha);                }"},run_float:function(t,r,o){return e(t,r,o)}};return t},createCGEBlendDarken:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)            {                return mix(src1, min(src1,src2), alpha);            }"},run_float:function(t,r,o){return e(t,t<r?t:r,o)}};return t},createCGEBlendLighten:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, max(src1,src2), alpha);                }"},run_float:function(t,r,o){return e(t,t<r?r:t,o)}};return t},createCGEBlendMultiply:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, src1 * src2, alpha);                }"},run_float:function(t,r,o){return e(t,t*r,o)}};return t},createCGEBlendScreen:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, src1 + src2 - src1 * src2, alpha);                }"},run_float:function(t,r,o){return e(t,t+r-t*r,o)}};return t},createCGEBlendColorDodge:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, min(src1 + (src1 * src2) / (1.0 - src2), 1.0), alpha);                }"},run_float:function(t,r,o){return e(t,Math.min(1,t+t*r/(1-r)),o)}};return t},createCGEBlendColorBurn:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, 1.0 - min((1.0 - src1) / (src2 + 0.00003), 1.0), alpha);                }"},run_float:function(t,r,o){return e(t,1-Math.min((1-t)/(r+3e-5),1),o)}};return t},createCGEBlendLinearDodge:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, min(src1 + src2, 1.0), alpha);                }"},run_float:function(t,r,o){return e(t,Math.min(t+r,1),o)}};return t},createCGEBlendLinearBurn:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, max(src1 + src2 - 1.0, 0.0), alpha);                }"},run_float:function(t,r,o){return e(t,Math.max(t+r-1,0),o)}};return t},createCGEBlendOverlay:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    if(src1.r < 0.5)                        src2.r = (src1.r * src2.r) * 2.0;                    else src2.r = (src1.r + src2.r) * 2.0 - (src1.r * src2.r) * 2.0 - 1.0;                    if(src1.g < 0.5)                        src2.g = (src1.g * src2.g) * 2.0;                    else src2.g = (src1.g + src2.g) * 2.0 - (src1.g * src2.g) * 2.0 - 1.0;                    if(src1.b < 0.5)                        src2.b = (src1.b * src2.b) * 2.0;                    else src2.b = (src1.b + src2.b) * 2.0 - (src1.b * src2.b) * 2.0 - 1.0;                    return mix(src1, src2, alpha);                }"},run_float:function(t,r,o){return e(t,t<.5?t*r*2:2*(t+r-t*r)-1,o)}};return t},createCGEBlendHardLight:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    if(src2.r < 0.5)                        src2.r = (src1.r * src2.r) * 2.0;                    else src2.r = (src1.r + src2.r) * 2.0 - (src1.r * src2.r) * 2.0 - 1.0;                    if(src2.g < 0.5)                        src2.g = (src1.g * src2.g) * 2.0;                    else src2.g = (src1.g + src2.g) * 2.0 - (src1.g * src2.g) * 2.0 - 1.0;                    if(src2.b < 0.5)                        src2.b = (src1.b * src2.b) * 2.0;                    else src2.b = (src1.b + src2.b) * 2.0 - (src1.b * src2.b) * 2.0 - 1.0;                    return mix(src1, src2, alpha);                }"},run_float:function(t,r,o){return e(t,r<.5?t*r*2:2*(t+r-t*r)-1,o)}};return t},createCGEBlendSoftLight:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    if(src2.r < 0.5)                        src2.r = (src2.r * 2.0 - 1.0) * (src1.r - (src1.r * src1.r)) + src1.r;                    else src2.r = ((src2.r * 2.0 - 1.0) * (sqrt(src1.r) - src1.r)) + src1.r;                    if(src2.g < 0.5)                        src2.g = (src2.g * 2.0 - 1.0) * (src1.g - (src1.g * src1.g)) + src1.g;                    else src2.g = ((src2.g * 2.0 - 1.0) * (sqrt(src1.g) - src1.g)) + src1.g;                    if(src2.b < 0.5)                        src2.b = (src2.b * 2.0 - 1.0) * (src1.b - (src1.b * src1.b)) + src1.b;                    else src2.b = ((src2.b * 2.0 - 1.0) * (sqrt(src1.b) - src1.b)) + src1.b;                    return mix(src1, src2, alpha);                }"},run_float:function(t,r,o){return e(t,r<.5?(2*r-1)*(t-t*t)+t:(2*r-1)*(Math.sqrt(t)-t)+t,o)}};return t},createCGEBlendVividLight:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    src2.r = src2.r < 0.5 ? 1.0 - (1.0 - src1.r) / (src2.r * 2.0) : src1.r / (1.0 - src2.r) * 0.5;                    src2.g = src2.g < 0.5 ? 1.0 - (1.0 - src1.g) / (src2.g * 2.0) : src1.g / (1.0 - src2.g) * 0.5;                    src2.b = src2.b < 0.5 ? 1.0 - (1.0 - src1.b) / (src2.b * 2.0) : src1.b / (1.0 - src2.b) * 0.5;                    return mix(src1, clamp(src2, 0.0, 1.0) , alpha);                }"},run_float:function(t,r,o){return e(t,r<.5?1-(1-t)/(2*r):t/(1-r)*.5,o)}};return t},createCGEBlendLinearLight:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, clamp(src1 + src2 * 2.0 - 1.0, 0.0, 1.0), alpha);                }"},run_float:function(t,r,o){return e(t,t+2*r-1,o)}};return t},createCGEBlendPinLight:function(){var t={};return t.shader_string=function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    src2 *= 2.0;                    if(src2.r > src1.r)                    {                        src2.r = src2.r - 1.0;                        if(src2.r < src1.r)                            src2.r = src1.r;                    }                    if(src2.g > src1.g)                    {                        src2.g = src2.g - 1.0;                        if(src2.g < src1.g)                            src2.g = src1.g;                    }                    if(src2.b > src1.b)                    {                        src2.b = src2.b - 1.0;                        if(src2.b < src1.b)                            src2.b = src1.b;                    }                    return mix(src1, src2, alpha);                }"},t.run_float=function(t,r,o){return e(t,(a=r,(a*=2)>(i=t)&&(a-=1)<i&&(a=i),a),o);var i,a},t},createCGEBlendHardMix:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, step(1.0 - src1, src2), alpha);                }"},run_float:function(t,r,o){return e(t,r<1-t?0:1,o)}};return t},createCGEBlendDifference:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, abs(src1 - src2), alpha);                }"},run_float:function(t,r,o){return e(t,Math.abs(t-r),o)}};return t},createCGEBlendExclude:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return mix(src1, src1 + src2 - src1 * src2 * 2.0, alpha);                }"},run_float:function(t,r,o){return e(t,t+r-2*t*r,o)}};return t},createCGEBlendAdd:function(){var t={shader_string:function(){return"vec3 blend(vec3 src1, vec3 src2, float alpha)                {                    return src1 + src2 * alpha;                }"},run_float:function(t,r,o){return e(t,t+r,o)}};return t}}}();function o(e){var t={runself:function(t,r,o,i){for(var a=i*=.01,s=0;s<256;++s){var n=t[s],c=r[s],u=o[s];n=e.run_float(n,n,a),c=e.run_float(c,c,a),u=e.run_float(u,u,a),t[s]=n,r[s]=c,o[s]=u}},run:function(t,r,o,i,a,s,n,c,u){i=(i+.5)*(1/256),a=(a+.5)*(1/256),s=(s+.5)*(1/256),n*=1/255,n*=c*=.01;for(var l=0;l<256;++l){var m=t[l],h=r[l],_=o[l];u?(m=e.run_float(i,m,n),h=e.run_float(a,h,n),_=e.run_float(s,_,n)):(m=e.run_float(m,i,n),h=e.run_float(h,a,n),_=e.run_float(_,s,n)),t[l]=m,r[l]=h,o[l]=_}}};return t}function i(e){var t={};return t.opacity=o(r.createCGEBlendOpacity()),t.darken=o(r.createCGEBlendDarken()),t.lighten=o(r.createCGEBlendLighten()),t.multiply=o(r.createCGEBlendMultiply()),t.screen=o(r.createCGEBlendScreen()),t.colorDodge=o(r.createCGEBlendColorDodge()),t.colorBurn=o(r.createCGEBlendColorBurn()),t.linearDodge=o(r.createCGEBlendLinearDodge()),t.linearBurn=o(r.createCGEBlendLinearBurn()),t.hardLight=o(r.createCGEBlendHardLight()),t.softLight=o(r.createCGEBlendSoftLight()),t.vividLight=o(r.createCGEBlendVividLight()),t.linearLight=o(r.createCGEBlendLinearLight()),t.pinLight=o(r.createCGEBlendPinLight()),t.hardMix=o(r.createCGEBlendHardMix()),t.difference=o(r.createCGEBlendDifference()),t.exclude=o(r.createCGEBlendExclude()),t.add=o(r.createCGEBlendAdd()),t.overlay=o(r.createCGEBlendOverlay()),t[e]}function a(e){var t={};return t.name=e.name,t.create=function(){var t={luminance:function(t,r){e.init(t),e.run(r)},color:function(t,r,o,i){e.init(t),e.run(r),e.run(o),e.run(i)}};return t},t}function s(){var e={name:"graph"};return e.create=function(){var e={},t=new Array,r=new Array;function o(e){var o=t.length,i=new Array(o-1),a=new Array(o);a[0]=i[0]=0;for(var s=1;s!=o-1;++s){var n=(t[s]-t[s-1])/(t[s+1]-t[s-1]),c=n*a[s-1]+2;a[s]=(n-1)/c,i[s]=(r[s+1]-r[s])/(t[s+1]-t[s])-(r[s]-r[s-1])/(t[s]-t[s-1]),i[s]=(6*i[s]/(t[s+1]-t[s-1])-n*i[s-1])/c}a[o-1]=0;for(s=o-2;s>=0;--s)a[s]=a[s]*a[s+1]+i[s];var u=-1,l=0;for(s=0;s<256;++s){for(var m=e[s];l<o&&m>t[l];)u=l,++l;if(l!=o)if(-1!=u){var h=t[l]-t[u],_=(t[l]-m)/h,f=(m-t[u])/h,d=_*r[u]+f*r[l]+((_*_*_-_)*a[u]+(f*f*f-f)*a[l])*(h*h)/6;e[s]=Math.max(0,Math.min(d,1))}else e[s]=Math.max(0,Math.min(r[0],1));else e[s]=Math.max(0,Math.min(r[o-1],1))}}function i(e){for(t=[],r=[];e.test_symbol("point");){var o=e.fetch_float()*(1/255);t.push(o);var i=e.fetch_float()*(1/255);r.push(i)}!function(){for(var e=0;e<t.length;++e)for(var o=e+1;o<t.length;++o){var i;if(t[e]>t[o])i=t[e],t[e]=t[o],t[o]=i,i=r[e],r[e]=r[o],r[o]=i}}(),t.length<2&&e.error("more than 2 points needed")}return e.luminance=function(e,t){i(e),o(t)},e.color=function(e,a,s,n){for(var c=["red","green","blue","rgb"],u=-1;-1!=(u=e.lookup_symbol(c));)switch(t=[],r=[],i(e),u){case 0:o(a);break;case 1:o(s);break;case 2:o(n);break;case 3:o(a),o(s),o(n)}},e},e}function n(){var e={name:"mixSelf"};return e.create=function(){var e={},t=0,r="";return e.luminance=function(e,t){e.error("invalid curve operation","mixSelf")},e.color=function(e,o,a,s){t=0,r="",function(e){r=e.fetch_symbol(),t=e.fetch_float()}(e);var n=i(r);n||e.error("invalid blend mode",c.mode),n.runself(o,a,s,t)},e},e}function u(){var e={name:"whiteBalance"};return e.create=function(){var e=0,t=0,r=new Array(3),o={};return o.luminance=function(e,t){e.error("invalid curve operation","mixSelf")},o.color=function(o,i,a,s){e=0,t=0,r=new Array(3),function(o){var i;e=5400*o.fetch_float()+6500,t=o.fetch_float(),e<1200?e=1200:e>12e3&&(e=12e3),t<.02?t=.02:t>5&&(t=5);var a=-3*(i=(e/=1e3)<4?.27475/(e*e*e)-.98598/(e*e)+1.17444/e+.145986:e<7?-4.607/(e*e*e)+2.9678/(e*e)+.09911/e+.244063:-2.0064/(e*e*e)+1.9018/(e*e)+.24748/e+.23704)*i+2.87*i-.275,s=i/a,n=(1-i-a)/a;r[0]=3.24074*s-1.53726-.498571*n,r[1]=.969258*-s+1.87599+.0415557*n,r[2]=.0556352*s-.203996+1.05707*n,r[1]/=t;for(var c=Math.max(Math.max(r[0],r[1]),r[2]),u=0;u<3;++u)r[u]/=c,r[u]=1/r[u];for(var l=.299*r[0]+.587*r[1]+.114*r[2],m=0;m<3;++m)r[m]/=l}(o),function(e,t,o){for(var i=0;i<256;++i)e[i]=e[i]*r[0],t[i]=t[i]*r[1],o[i]=o[i]*r[2]}(i,a,s)},o},e}function l(){var e={name:"mixColor"};return e.create=function(){var e,t,r,o,a,s,n={},u="";return n.luminance=function(e,t){e.error("invalid curve operation","mixSelf")},n.color=function(n,l,m,h){0,u="",function(i){e=!1,u=i.fetch_symbol(),t=i.fetch_float(),r=i.fetch_float(),o=i.fetch_float(),a=i.fetch_float(),s=i.fetch_float(),i.test_symbol("swap")&&(e=!0)}(n);var _=i(u);_||n.error("invalid blend mode",c.mode),_.run(l,m,h,t,r,o,a,s,e)},n},e}function m(e){var t={};return t.name=e.name,t.create=function(){var t={shader_process:function(t,r,o,i,a){this.m_shader||(this.m_shader=new N(null,e.shader_step(),r));var s=fe(r,null,this.m_shader,256,256,a);if(s.shader_texture("inputChromeMap",o),e.sendUniform(s,t),s.draw_to(i),r.getError())throw"curveFormula"},destroy:function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=0)},m_shader:0};return t},t}function h(){this.name="saturate",this.amount=0,this.shader_step=function(){return"varying vec2 textureCoordinate;    uniform sampler2D inputChromeMap;     uniform float is;        float get_sat(float red,float blue)    {    float sr = red/(-0.299);    float sb = blue/(-0.114);    float sg = (red+blue)/(0.587);    return max(sr,max(sb,sg));  return sr;      }        void main()    {\t\t    vec4 src = texture2D(inputChromeMap, textureCoordinate);    float red = src.r-0.299;    float blue = src.b-0.114;    float sat = get_sat(red,blue);    float mul = is;    if(mul>2.0)        {        float p1 = (sat-3.0)*sat+3.0;        mul = p1*(mul-2.0) + (2.0-sat)*(3.0-mul);        }        else if(mul>1.0)        {        mul = (2.0-sat)*(mul-1.0) + (2.0-mul);        }    vec4 dst = vec4(red*mul+0.299,0.0,blue*mul+0.114,1.0);        gl_FragColor = dst;    }"},this.sendUniform=function(e,t){var r=t.fetch_float(),o={};o.is=r,e.shader.uniforms(o)}}function _(){this.name="hue",this.amount=0,this.shader_step=function(){return"varying vec2 textureCoordinate;    uniform sampler2D inputChromeMap;     uniform vec4 m;     uniform float psv;        float get_sat(float red,float blue)    {    float sr = red/(-0.299);    float sb = blue/(-0.114);    float sg = (red+blue)/(0.587);    return max(sr,max(sb,sg));  return sr;      }        void main()    {\t\t    vec4 src = texture2D(inputChromeMap, textureCoordinate);    float red = src.r-0.299;    float blue = src.b-0.114;    float sat = get_sat(red,blue);    sat = min(sat,1.0);    float tr = red*m.x+blue*m.y;    float tb = red*m.z+blue*m.w;    red = tr;    blue = tb;    blue = max(min(0.91137,blue),-0.91137);    float nsat = get_sat(red,blue);    sat = nsat*psv + sat*(1.0 -psv);    if(nsat/2.0 >sat){        sat = nsat/2.0;    }    sat = min(sat,1.0);    float mul = sat/nsat;    mul = min(mul,2.0);    vec4 dst = vec4(red*mul+0.299,0.0,blue*mul+0.114,1.0);    gl_FragColor = dst;}"},this.sendUniform=function(e,t){var r=t.fetch_float()/180*3.1415926535,o=[];o[0]=Math.cos(r),o[1]=Math.sin(r),o[2]=-Math.sin(r),o[3]=Math.cos(r);var i=.25;t.check_symbol("factor")&&(i=t.fetch_float());t.fetch_float(),t.fetch_float();var a={};a.m=o,a.psv=i,e.shader.uniforms(a)}}function f(){var e,t;function r(e){var t=(e+.5)*(1/256);return 256*(t=t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4))+.5}this.name="singleColor",this.amount=0,this.shader_step=function(){return"varying vec2 textureCoordinate;    uniform sampler2D inputChromeMap;     uniform float r;     uniform float b;     uniform float w;        float get_sat(float red,float blue)    {    float sr = red/(-0.299);    float sb = blue/(-0.114);    float sg = (red+blue)/(0.587);    return max(sr,max(sb,sg));  return sr;      }        void main()    {\t\t    vec4 src = texture2D(inputChromeMap, textureCoordinate);    float red = src.r-0.299;    float blue = src.b-0.114;    float cr = red;    float cb = blue;    float n = 1.0/sqrt(cr*cr+cb*cb);    cr *=n;    cb *=n; \tfloat vp = cr * r + cb * b;    float fac;    if(vp>0.0)        {            float vs = (cr * b - cb * r) * w;            fac = vp / (vp * vp + vs * vs);        }        else        {            fac = 0.0;        }    vec4 dst = vec4(red*fac+0.299,0.0,blue*fac+0.114,1.0);    gl_FragColor = dst;}"},this.sendUniform=function(o,i){var a=i.fetch_float(0,1);a=Math.pow(20,1-a);if(0==i.lookup_symbol(["hue","color",0],!0)){var s=i.fetch_float();s=s/180*3.1415,e=Math.sin(s),t=Math.cos(s)}else{var n=.299*i.fetch_float(0,256);n=r(n),n*=.299;var c=.587*i.fetch_float(0,256);c=r(c),c*=.587;var u=.114*i.fetch_float(0,256);u=r(u);var l=1/(n+c+(u*=.114)+.00256);c*=l,e=(n*=l)-.299,t=(u*=l)-.114,l=1/Math.sqrt(e*e+t*t),e*=l,t*=l}var m={};m.w=a,m.r=e,m.b=t,o.shader.uniforms(m)}}function d(){this.name="RGB",this.amount=0,this.shader_step=function(){return"varying vec2 textureCoordinate;    uniform sampler2D inputChromeMap;     uniform float rr;     uniform float bb;        float get_sat(float red,float blue)    {    float sr = red/(-0.299);    float sb = blue/(-0.114);    float sg = (red+blue)/(0.587);    return max(sr,max(sb,sg));  return sr;      }        void main()    {\t\t    vec4 src = texture2D(inputChromeMap, textureCoordinate);    float red = src.r-0.299;    float blue = src.b-0.114;    red = red +rr;    blue = blue +bb;    blue = max(min(0.91137695,blue),-0.91137695);    float sat = get_sat(red,blue);    if(sat >1.0)    {         red = red/sat;         blue = blue/sat;    }    vec4 dst = vec4(red+0.299,0.0,blue+0.114,1.0);        gl_FragColor = dst;    }"},this.sendUniform=function(e,t){var r=3*t.fetch_float()/1e3,o=3*t.fetch_float()/1e3,i={};i.rr=r,i.bb=o,e.shader.uniforms(i)}}function g(){this.name="brightness",this.amount=0,this.init=function(e){this.amount=e.fetch_float()},this.run=function(e){for(var t=0;t<256;++t){var r,o=e[t];if(0!=this.amount)r=1.41421/this.amount,o=this.amount>0?1-o-r/1.41421+Math.sqrt(1-1.4121*r+2.82842*o*r+.5*r*r):1-o-r/1.41421-Math.sqrt(1-1.41421*r+2.82842*o*r+.5*r*r);e[t]=Math.min(o,1)}}}function v(){this.name="contrast",this.amount=0,this.init=function(e){this.amount=e.fetch_float()},this.run=function(e){for(var t=0;t<256;++t){var r=e[t];r=(r-.5)*this.amount+.5,e[t]=r,e[t]=Math.max(0,Math.min(r,1))}}}function x(){this.name="exposure",this.amount=0,this.init=function(e){this.amount=e.fetch_float()},this.run=function(e){for(var t=0;t<256;++t){var r=e[t];r*=Math.pow(2,this.amount),e[t]=r,e[t]=Math.max(0,Math.min(r,1))}}}function p(){this.name="brightnessPS",this.amount=0,this.init=function(e){this.amount=e.fetch_float(),this.amount=50*this.amount+50},this.run=function(e){var t,r,o,i,a;o=.6,i=.96,this.amount<25?(t=.24*(a=this.amount/25)+.39,r=(.52-.235)*a+.235):this.amount<50?(t=.37*(a=(this.amount-25)/25)+.63,r=.48*a+.52):this.amount<75?(t=(1.6-1)*(a=(this.amount-50)/25)+1,r=1*a+1,o=-.25*a+.6,i=(.85-.96)*a+.96):(t=1*(a=(this.amount-75)/25)+1.6,r=2.3*a+2,o=(.2-.35)*a+.35,i=(.65-.85)*a+.85);for(var s=(1-t*o)/Math.pow(1-o,r),n=1-Math.pow(1-i,r)*(1-t*o)/Math.pow(1-o,r),c=0;c<256;++c){var u=e[c],l=t*u,m=1-Math.pow(1-u,r)*s,h=(u-i)/(.997-i),_=n*(1-h)+h;u=t>1?Math.min(Math.min(l,m),_):Math.max(Math.max(l,m),_),e[c]=u,e[c]=Math.min(Math.max(u,0),1)}}}function b(){this.name="contrastPS",this.amount=0,this.init=function(e){this.amount=e.fetch_float()},this.run=function(e){for(var t,r,o=16*(t=.4+.012*this.amount)+8*(r=1.6-.012*this.amount)-24,i=10-2*r-8*t,a=0;a<256;++a){var s=e[a];s=((o*(s-=.5)*s+i)*s*s+t)*s+.5,e[a]=Math.max(0,Math.min(s,1))}}}function y(){this.name="exposurePS",this.amount=0,this.init=function(e){this.amount=e.fetch_float(),this.amount=25*(this.amount+2)},this.run=function(e){var t,r;t=Math.pow(1.775415,(this.amount-50)/10),r=Math.pow(1.643751,(this.amount-50)/10);for(var o=0;o<256;++o){var i=e[o],a=1-Math.pow(1.01-i,t),s=1-.55*Math.pow(1.01-i,r);i=Math.min(a,s),e[o]=i,e[o]=Math.max(0,Math.min(i,1))}}}function w(){this.name="level",this.dark=0,this.light=0,this.gamma=0,this.init=function(e){this.dark=e.fetch_float(),this.light=e.fetch_float(),this.gamma=e.fetch_float()},this.run=function(e){for(var t=1/(this.light-this.dark+1e-4),r=0;r<256;++r){var o=e[r];o=(o-this.dark)*t,o=Math.max(0,o),o=Math.pow(o,this.gamma),o=Math.min(1,o),e[r]=o,e[r]=Math.max(0,Math.min(o,1))}}}function T(){this.name="shadowHighlight",this.shadow=0,this.highlight=0,this.l=0,this.d=0,this.init=function(e){this.shadow=e.fetch_float(),this.highlight=e.fetch_float(),this.shadow>0&&(this.shadow*=.68),this.shadow=Math.tan(.007853975*(this.shadow+100)),this.highlight=-this.highlight,this.highlight>0&&(this.highlight*=.68),this.highlight=Math.tan(.007853975*(this.highlight+100)),this.l=this.highlight,this.d=this.shadow},this.run=function(e){for(var t=0;t<256;t++){var r=e[t];r=r<.5?4*(this.d-1)*r*r*r+4*(1-this.d)*r*r+this.d*r:4*(this.l-1)*r*r*r+8*(1-this.l)*r*r+(5*this.l-4)*r+1-this.l,e[t]=r,e[t]=Math.max(0,Math.min(r,1))}}}function C(){for(var e={},t=[a(new g),a(new v),a(new x),a(new p),a(new b),a(new y),a(new w),a(new T),u(),s(),n(),l(),m(new h),m(new d),m(new _),m(new f)],r=0;r<t.length;++r)e[t[r].name]={},e[t[r].name]={parcer:null,create:t[r].create};return e.get_formula_Item_with_symbol=function(e){var t=this[e];if(t=={})throw"create_dispatch_parcer";return t.parcer||(t.parcer=t.create(this.m_context)),t.parcer},e.destroy=function(){this.saturate.parcer&&this.saturate.parcer.destroy(),this.RGB.parcer&&this.RGB.parcer.destroy(),this.hue.parcer&&this.hue.parcer.destroy(),this.singleColor.parcer&&this.singleColor.parcer.destroy()},e}function S(){return self={filter:function(e,t,r,o,i,a){e.gpu_process(t,r,o,i,a)},copy:function(t,r,o,i,a){!function(t,r,o,i,a){if(e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,t),e.copyTexSubImage2D(e.TEXTURE_2D,0,0,0,0,0,o,i),e.getError())throw"error in copy_texture"}(t,r,o,i,a)}},self}function E(){var e={m_shader:0,s_fshFragFilterProcTemplate:"varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate + sft * cd);    }    void main()    {        vec4 dst = vec4(0.0);    %s        gl_FragColor = dst;    }",destroy:function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=0)},gpu_process:function(e,t,r,o,i){if(!this.m_shader){var a=this.s_fshFragFilterProcTemplate.replace(/%s/g,this.shader_procession());this.m_shader=new N(null,a,this.m_context.m_context)}var s=fe(this.m_context.m_context,null,this.m_shader,r,o,i);s.shader_texture("inputImageTexture",t);var n={};if(n.sft=[1/r,1/o],s.shader.uniforms(n),s.draw_to(e),this.m_context.m_context.getError())throw"cgeFragDownProcTemplate"}};return e}function z(){return self={src_width:0,src_height:0,dst_width:0,dst_height:0,x_start:0,y_start:0,emb_width:0,emb_height:0,get_trans:function(e){e[0]=this.dst_width/this.emb_width,e[1]=this.dst_height/this.emb_height,e[2]=-this.x_start/this.emb_width,e[3]=-this.y_start/this.emb_height},get_rev_trans:function(e){e[0]=this.emb_width/this.dst_width,e[1]=this.emb_height/this.dst_height,e[2]=this.x_start/this.dst_width,e[3]=this.y_start/this.dst_height}},self}function R(e){return{x_ofs:0,y_ofs:0,m_shader:0,m_context:e,gpu_process:function(e,t,r,o,i,a,s){this.m_shader=we(this.m_shader,"varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec4 m;    void main()    {        gl_FragColor = texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw);    }");var n,c,u=fe(this.m_context,null,this.m_shader,r,o,s);u.shader_texture("inputImageTexture",t),n=this.m_context.getTexParameter(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MIN_FILTER),c=this.m_context.getTexParameter(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MAG_FILTER),this.m_context.NEAREST==n&&this.m_context.NEAREST==c||(this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MIN_FILTER,this.m_context.NEAREST),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MAG_FILTER,this.m_context.NEAREST));var l=[];l[0]=r/i,l[1]=o/a,l[2]=-this.x_ofs/i,l[3]=-this.y_ofs/a;var m={};if(m.m=l,u.shader.uniforms(m),u.draw_to(e),this.m_context.NEAREST==n&&this.m_context.NEAREST==c||(this.m_context.bindTexture(this.m_context.TEXTURE_2D,t),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MIN_FILTER,n),this.m_context.texParameteri(this.m_context.TEXTURE_2D,this.m_context.TEXTURE_MAG_FILTER,c)),this.m_context.getError())throw"CGEEmbedFilter::gpu_process"},destroy:function(){this.m_shader&&this.m_shader.destroy()}}}function M(e,t,r,o,i,a){function s(e,t,r,o,i,a,s,n,c,u){e.x_ofs=n,e.y_ofs=c,e.gpu_process(t,r,o,i,a,s,u)}o=null==o?0:o,i=null!=i&&i,a=null==a?0:a;var n=S();if(n.r_start=0,n.r_end=0,n.m_context=e,n.m_size=[],n.m_images=[],n.m_base_images=[],n.m_factor=t,n.m_progressive=i,n.m_ctn=a,n.m_base_level=-1,n.m_base_size=-1,n.m_embed_filter=0,n.m_param=o,n._create_=function(e,t,r){var o=!1;return null!=r&&(o=r),pe(e,t,o)},n.map_create=function(e,t){if("top"!=t){if("back"!=t){if(isNaN(t)){for(var r=this.r_start;r<this.r_end;++r)if(this.m_images[r].length==e)this.m_images[r].push(this._create_(this.m_size[r].width,this.m_size[r].height,this.m_param));else if(this.m_images[r].length<e)throw"CGEPyramid::map_create";if(this.m_ctn&&this.r_start<=this.m_base_level&&this.m_base_level<this.r_end)if(this.m_base_images.length==e)this.m_base_images.push(this._create_(this.m_base_size,this.m_base_size,this.m_param));else if(this.m_base_images.length<e)throw"CGEPyramid::map_create"}else if(this.m_images[t].length==e)this.m_images[t].push(this._create_(this.m_size[t].width,this.m_size[t].height,this.m_param));else if(this.m_images[t].length<e)throw"CGEPyramid::map_create"}else if(this.m_images[this.r_end-1].length==e)this.m_images[this.r_end-1].push(this._create_(this.m_size[this.r_end-1].width,this.m_size[this.r_end-1].height,this.m_param));else if(this.m_images[this.r_end-1].length<e)throw"CGEPyramid::map_create"}else if(this.m_images[0].length==e)this.m_images[0].push(this._create_(this.m_size[0].width,this.m_size[0].height,this.m_param));else if(this.m_images[0].length<e)throw"CGEPyramid::map_create"},a){for(var c=Math.max(t.dst_width,t.dst_height),u=a;u<c;)i&&(n.m_size[n.m_size.length]={width:u/2,height:u}),n.m_size[n.m_size.length]={width:u,height:u},u*=2;!n.m_size.length||u==t.dst_width&&u==t.dst_height?n.m_ctn=!1:(n.m_base_level=n.m_size.length,n.m_base_size=u,n.m_base_xo=(t.dst_width-u)/2,n.m_base_xo=n.m_base_xo<0?Math.ceil(n.m_base_xo):Math.floor(n.m_base_xo),n.m_base_yo=(t.dst_height-u)/2,n.m_base_yo=n.m_base_yo<0?Math.ceil(n.m_base_yo):Math.floor(n.m_base_yo))}var l=n.m_factor.dst_width,m=n.m_factor.dst_height;do{n.m_progressive&&n.m_size.length&&(n.m_size[n.m_size.length]={width:l/2,height:m}),n.m_size[n.m_size.length]={width:l,height:m},l*=2,m*=2}while(l<n.m_factor.src_width&&m<n.m_factor.src_height&&l<r&&m<r);n.m_images=new Array(n.m_size.length);for(var h=0;h<n.m_images.length;++h)n.m_images[h]=[];return n.r_start=0,n.r_end=n.m_images.length,n.map_create(0),n.destroy=function(){this.m_embed_filter&&this.m_embed_filter.destroy();for(var e=[];this.m_images.length;){for(;this.m_images[this.m_images.length-1].length;)this.m_images[this.m_images.length-1][this.m_images[this.m_images.length-1].length-1]&&e.push(this.m_images[this.m_images.length-1][this.m_images[this.m_images.length-1].length-1]),this.m_images[this.m_images.length-1][this.m_images[this.m_images.length-1].length-1]=null,this.m_images[this.m_images.length-1].pop();this.m_images[this.m_images.length-1]=null,this.m_images.pop()}for(;this.m_base_images.length;)e.push(this.m_base_images[this.m_base_images.length-1]),this.m_base_images[this.m_base_images.length-1]=null,this.m_base_images.pop();if(e.length){for(var t=0;t<e.length;++t)this.m_context.m_context?this.m_context.context().deleteTexture(e[t]):this.m_context.deleteTexture(e[t]);e=null}this.m_size=[]},n.load_from=function(e,t,r){this.m_factor.get_trans(e.m_m),this.filter(e,this.m_images[this.m_images.length-1][0],t,this.m_size[this.m_size.length-1].width,this.m_size[this.m_size.length-1].height,r)},n.base_move_up=function(e,t){if(this.m_ctn){this.m_embed_filter||(this.m_embed_filter=R(this.m_context));var r=this.m_size[this.m_base_level].width,o=this.m_size[this.m_base_level].height;s(this.m_embed_filter,this.m_images[this.m_base_level][e],this.m_base_images[e],r,o,this.m_base_size,this.m_base_size,this.m_base_xo,this.m_base_yo,t)}},n.base_move_down=function(e,t){if(this.m_ctn){this.m_embed_filter||(this.m_embed_filter=R(this.m_context));var r=this.m_size[this.m_base_level].width,o=this.m_size[this.m_base_level].height;s(this.m_embed_filter,this.m_base_images[e],this.m_images[this.m_base_level][e],this.m_base_size,this.m_base_size,r,o,-this.m_base_xo,-this.m_base_yo,t)}},n.draw_downward=function(e,t,r,o){for(var i=null==r?0:r,a=null==o?0:o,s=this.m_images.length-2;s>=i;--s)this.m_ctn&&s+1==this.m_base_level?(this.base_move_down(a,t),this.filter(e,this.m_images[s][a],this.m_base_images[a],this.m_size[s].width,this.m_size[s].height,t)):this.filter(e,this.m_images[s][a],this.m_images[s+1][a],this.m_size[s].width,this.m_size[s].height,t)},n.map1=function(e,t,r,o){this.map_create(t);for(var i=this.r_start;i<this.r_end;++i)this.filter(e,this.m_images[i][t],this.m_images[i][r],this.m_size[i].width,this.m_size[i].height,o)},n.mapN=function(e,t,r,o,i){this.map_create(t);for(var a=this.r_start;a<this.r_end;++a){for(var s=new Array(10),n=0;n<o;++n)s[n]=this.m_images[a][r[n]];this.filter(e,this.m_images[a][t],s,this.m_size[a].width,this.m_size[a].height,i)}},n}function A(e){var t=e,r=0,o={s_fshFragMixLogDebugResizeProc:"varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);        float dlum = 256.0*src.y - 0.5 + src.x;        float rlum = 256.0*src.w - 0.5 + src.z;        float lum = rlum;        src.x = 77.5 / 256.0;        src.y = 29.5 / 256.0;        float flum = floor(lum);        src.z = lum - flum;        src.w = (flum + 0.5) * (1.0/256.0);        gl_FragColor = src;    }",gpu_process:function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragMixLogDebugResizeProc,t.m_context));var n=fe(t.m_context,null,r,i,a,s);if(n.shader_texture("inputImageTexture",o),ye(o,!1),n.draw_to(e),ye(o,!0),t.m_context.getError())throw"createFragMixLogDebugResizeFilter::gpu_process"},destroy:function(){r&&r.destroy()}};return o}function D(e){var t=e,r=0,o=X();return o.s_fshFragStructureSharpenDownResizeProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec4 m;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);    }    void main()    {        vec4 src = get_sample(vec2(-3.0/8.0,-3.0/8.0));        src += get_sample(vec2( 3.0/8.0,-3.0/8.0));        src += get_sample(vec2(-3.0/8.0, 3.0/8.0));        src += get_sample(vec2( 3.0/8.0, 3.0/8.0));        float dlum = (255.0*src.w + src.z)*0.25;        float fdlum = floor(dlum);        src.z = dlum - fdlum;        src.w = fdlum * (1.0/255.0);        src.xy = src.zw;        gl_FragColor = src;    }",o.gpu_process=function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragStructureSharpenDownResizeProc,t.m_context));var n=fe(t.m_context,null,r,i,a,s);n.shader_texture("inputImageTexture",o);var c={};if(c.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],c.sft=[1/i,1/a],n.shader.uniforms(c),n.draw_to(e),t.m_context.getError())throw"createFragStructureSharpenDownResizeProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}function k(e){var t=q();return t.m_context=e,t.shader_procession=function(){return"\t\t\t\tvec4 src = get_sample(vec2(-3.0/8.0,-3.0/8.0));        src += get_sample(vec2( 3.0/8.0,-3.0/8.0));        src += get_sample(vec2(-3.0/8.0, 3.0/8.0));        src += get_sample(vec2( 3.0/8.0, 3.0/8.0));        float dlum = (255.0*src.w + src.z)*0.25;        float fdlum = floor(dlum);        dst.z = dlum - fdlum;        dst.w = fdlum * (1.0/255.0);        dst.xy = dst.zw;            "},t}function F(){var e={name:"newStructureSharpen",create:function(e){var t,r,o,i,a,s,n,c,u,l,m,h,_,f,d,g,v,x,p,b;function y(){f&&(f.destroy(),f=0)}function w(e,t,r,o,i,a){e.gpu_process(t,r,o,i,a)}function T(e,r){var o=S();e.draw_downward(p,r),e.map_create(1);for(var i=new Array(e.m_images.length),a=0;a<i.length;++a){var s=Math.max(e.m_size[a].width,e.m_size[a].height)/16*t;i[a]=Math.exp(-s*s)}for(a=1;a<e.m_images.length;++a)if(v.m_factor=i[a],e.m_base_level==a){var n=[e.m_base_images[0],e.m_images[a-1][0],e.m_images[a-1][1]];w(v,e.m_base_images[1],n,e.m_base_size,e.m_base_size,r),e.base_move_up(1,r)}else n=[e.m_images[a][0],e.m_images[a-1][0],e.m_images[a-1][1]],1==a&&o.copy(e.m_images[a-1][1],e.m_images[a-1][0],e.m_size[a-1].width,e.m_size[a-1].height,r),o.filter(v,e.m_images[a][1],n,e.m_size[a].width,e.m_size[a].height,r)}function C(e,m,h,f,d,v,p){var y;(function(e){e.assume_symbol("radius"),t=e.fetch_float(1e-4,16),e.assume_symbol("esp"),r=.01*e.fetch_float(.001,100),e.get_log()!=l?(c=!0,u=e.get_log()):c=!1,e.test_symbol("contrastDarkLight")?(o=e.fetch_float(-1,1),i=e.fetch_float(-1,1)):(o=0,i=0),e.assume_symbol("details"),a=e.fetch_float(0,5),e.test_symbol("preserveDarkLight")?(s=e.fetch_float(0,.5),n=e.fetch_float(.5,1)):(s=0,n=1)})(e),c&&(l="",m.load_from(g,f,p),T(m,p),b.m_esp=r,w(b,m.m_images[m.m_images.length-1][0],m.m_images[m.m_images.length-1][1],m.m_size[m.m_size.length-1].width,m.m_size[m.m_size.length-1].height,p),T(m,p),y=l,l=u,u=y),_.get_rev_trans(x.m_m),x.init(o,i,a,s,n);var C=[];C[0]=f,C[1]=m.m_images[m.m_images.length-1][1],w(x,h,C,d,v,p)}f=0,m=0,h=0,d=e,l="",_=z(),g=function(e){var t=e,r=0,o=X();return o.s_fshFragNewStructureSharpenDownsizeProc="    varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec4 m;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);    }    void main()    {        vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));        vec2 dlum;        dlum.x = (255.0*src.w + src.z * (255.0 / 256.0))*0.25;        dlum.y = dlum.x * dlum.x * (1.0 / 256.0);        vec2 fdlum = floor(dlum);        src.xz = dlum - fdlum;        src.yw = fdlum;        src *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);        gl_FragColor = src;    }",o.gpu_process=function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragNewStructureSharpenDownsizeProc,t.m_context));var n=fe(t.m_context,null,r,i,a,s);n.shader_texture("inputImageTexture",o);var c={};if(c.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],c.sft=[1/i,1/a],n.shader.uniforms(c),n.draw_to(e),t.m_context.getError())throw"createFragStructureSharpenDownResizeProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(d),p=function(e){var t=q();return t.m_context=e,t.shader_procession=function(){return"\t\t\t\tvec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));        src *= vec4(0.25);        vec2 dlum;        dlum.x = src.w*255.0 + src.z*(255.0 / 256.0);        dlum.y = src.y*256.0 + src.x*(255.0 / 256.0);        vec2 fdlum = floor(dlum);        src.z = (dlum.x - fdlum.x)*(256.0 / 255.0);        src.w = fdlum.x / 255.0;        src.x = (dlum.y - fdlum.y)*(256.0 / 255.0);        src.y = fdlum.y / 255.0;        dst = src; "},t}(d),v=function(e){var t=e,r=0,o={m_factor:0,s_fshFragNewStructureSharpenUpProc:"   varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D subImageTextureR;    uniform sampler2D subImageTextureD;    uniform float fac;    void main()    {        vec4 dst = texture2D(inputImageTexture, textureCoordinate);        vec2 slum;        slum.x = dst.y*255.0 + dst.x*(255.0 / 256.0);        slum.y = dst.w*255.0 + dst.z*(255.0 / 256.0);        vec4 sub_r = texture2D(subImageTextureR, textureCoordinate);        vec2 rlum;        rlum.x = sub_r.y*255.0 + sub_r.x*(255.0 / 256.0);        rlum.y = sub_r.w*255.0 + sub_r.z*(255.0 / 256.0);        vec4 sub_d = texture2D(subImageTextureD, textureCoordinate);        vec2 dlum;        dlum.x = sub_d.y*255.0 + sub_d.x*(255.0 / 256.0);        dlum.y = sub_d.w*255.0 + sub_d.z*(255.0 / 256.0);        dlum = (slum - rlum)*fac + dlum;        vec2 fdlum = floor(dlum);        dst.x = (dlum.x - fdlum.x)*(256.0 / 255.0);        dst.y = fdlum.x / 255.0;        dst.z = (dlum.y - fdlum.y)*(256.0 / 255.0);        dst.w = fdlum.y / 255.0;        gl_FragColor = dst;    }",gpu_process:function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragNewStructureSharpenUpProc,t.m_context));var n=fe(t.m_context,null,r,i,a,s);n.shader_texture("inputImageTexture",o[0]),n.shader_texture("subImageTextureR",o[1]),n.shader_texture("subImageTextureD",o[2]);var c={};if(c.fac=this.m_factor,n.shader.uniforms(c),n.draw_to(e),t.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},destroy:function(){r&&r.destroy(),r=0}};return o}(d),x=function(e){var t=e,r=0;function o(){var e=(i.m_contrast_dark>0?-2.9167*Math.abs(i.m_contrast_dark):1.0667*Math.abs(i.m_contrast_dark))+(i.m_contrast_light>0?2.9167*Math.abs(i.m_contrast_light):-1.0667*Math.abs(i.m_contrast_light));e/=16777216;var t=(i.m_contrast_dark>0?7.4167*Math.abs(i.m_contrast_dark):-3.2*Math.abs(i.m_contrast_dark))+(i.m_contrast_light>0?-4.25*Math.abs(i.m_contrast_light):1.0667*Math.abs(i.m_contrast_light));t/=65536;var r=(i.m_contrast_dark>0?-6.2208*Math.abs(i.m_contrast_dark):3.1333*Math.abs(i.m_contrast_dark))+(i.m_contrast_light>0?1.4708*Math.abs(i.m_contrast_light):.0667*Math.abs(i.m_contrast_light));r/=256;var o=(i.m_contrast_dark>0?1.7208*Math.abs(i.m_contrast_dark):-1*Math.abs(i.m_contrast_dark))+(i.m_contrast_light>0?Math.abs(i.m_contrast_light)*(.8625-1):Math.abs(i.m_contrast_light)*(.9333-1));return[e,t,r,o+=1]}var i={m_contrast_dark:0,m_contrast_light:0};return i.m_m=new Array,i.m_details=0,i.m_dark=0,i.m_light=0,i.init=function(e,t,r,o,i){this.m_contrast_dark=e,this.m_contrast_light=t,this.m_details=r,this.m_dark=o,this.m_light=i},i.s_fshFragNewStructureSharpenUpsizeProc="   varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D subImageTexture;    uniform vec4 m;    uniform vec4 contrast;    uniform float details;    uniform vec2 darklight;    uniform vec2 darklight_inv;    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);        float slum = 255.0*src.w + src.z * (255.0 / 256.0);        vec4 sub = texture2D(subImageTexture, textureCoordinate * m.xy + m.zw);        float a = (255.0 / 256.0)*sub.y + sub.x * (255.0 / 65536.0);        float b = 255.0*sub.w + sub.z * (255.0 / 256.0);        float sl1 = slum * (1.0 / 256.0);        vec2 dh;        dh.x = darklight.x - sl1;        dh.y = sl1 - darklight.y;        dh *= darklight_inv;        dh = max(dh, 0.0);        dh *= dh;        dh = max(1.0 - dh, 0.0);        float lo = a *  slum + b;        float hi = slum - lo;        lo = (((contrast.x * lo + contrast.y) * lo + contrast.z) * lo+contrast.w)*lo;        float lt = slum - lo - hi * details;        lt *= mix(dh.x, dh.y, step(0.0, lt));        slum -= lt;        slum = clamp(slum, 0.0, 255.996);        float fslum = floor(slum);        src.z = (slum - fslum) * (256.0 / 255.0);        src.w = fslum * (1.0 / 255.0);        gl_FragColor = src;    }",i.gpu_process=function(e,i,a,s,n){r||(r=new N(null,this.s_fshFragNewStructureSharpenUpsizeProc,t.m_context));var c=fe(t.m_context,null,r,a,s,n);c.shader_texture("inputImageTexture",i[0]),c.shader_texture("subImageTexture",i[1]);var u=o(),l={};if(l.m=this.m_m,l.contrast=u,l.details=this.m_details,l.darklight=[this.m_dark,this.m_light],l.darklight_inv=[1/this.m_dark,1/this.m_light],c.shader.uniforms(l),c.draw_to(e),t.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},i.destroy=function(){r&&r.destroy(),r=0},i}(d),b=function(e){var t=e,r=0,o={m_esp:0,s_fshFragNewStructureSharpenFator:"  \tvarying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform float esp;    void main()    {        vec4 dst = texture2D(inputImageTexture, textureCoordinate);        vec2 lum;        lum.x = dst.y*255.0 + dst.x*(255.0 / 256.0);        lum.y = dst.w*255.0 + dst.z*(255.0 / 256.0);        float var = lum.y * 256.0 - lum.x * lum.x;        var = max(var, 0.0);        float a = var /(var + esp * (65536.0 * 4.0));        float b = (1.0 - a) * lum.x;        vec2 dlum = vec2(a * 256.0, b);        vec2 fdlum = floor(dlum);        dst.x = (dlum.x - fdlum.x)*(256.0 / 255.0);        dst.y = fdlum.x / 255.0;        dst.z = (dlum.y - fdlum.y)*(256.0 / 255.0);        dst.w = fdlum.y / 255.0;        gl_FragColor = dst;    }",gpu_process:function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragNewStructureSharpenFator,t.m_context));var n=fe(t.m_context,null,r,i,a,s);n.shader_texture("inputImageTexture",o);var c={};if(c.esp=this.m_esp,n.shader.uniforms(c),n.draw_to(e),t.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},destroy:function(){r&&r.destroy(),r=0}};return o}(d);var E={destroy:function(){y(),g&&g.destroy(),p&&p.destroy(),v&&v.destroy(),x&&x.destroy(),b&&b.destroy()}};return E.size_change=function(e,t){var r,o,i,a,s,n,c;m==e&&h==t||(l="",r=_,o=m=e,(i=h=t)<=0||o<=0||(o>i?(a=32,s=32*i/o,32*i%o&&++s,++s,n=32,c=32*i/o):0!=i&&(a=32*o/i,s=32,32*o%i&&++a,++a,n=32*o/i,c=32),r.src_width=o,r.src_height=i,r.dst_width=Math.floor(a),r.dst_height=Math.floor(s),r.x_start=0,r.y_start=0,r.emb_width=Math.floor(n),r.emb_height=Math.floor(c)),y())},E.gpu_process=function(e,t,r){try{he(t),this.size_change(r.m_width,r.m_height),f||(f=M(d.context(),_,4099,!0,!1,2),l=0),C(e,f,t.new_temporary(),t.current(),r.m_width,r.m_height,r.m_frame_buffer),t.push_to_current()}catch(e){throw"CGEPTPTemplete::gpu_process"}},E}};return e}function I(){var e={name:"structureSharpen",create:function(e){var t,r,o,i,a,s,n,c,u,l,m,h,_,f,d,g,v,x,p,b,y,w,T;function C(){d&&(d.destroy(),d=0)}function S(e,t,r,o,i,a){e.gpu_process(t,r,o,i,a)}function R(e,h,_,d,g,T,C){e.get_log()!=m&&(function(e,t,r){e.load_from(b,t,r),e.draw_downward(y,r)}(h,d,C),m=e.get_log()),function(e){e.assume_symbol("iterateTimes"),l=Math.floor(e.fetch_float(1,20)+.5),e.assume_symbol("factor"),t=e.fetch_float(0,1),r=e.fetch_float(.1,10),e.assume_symbol("relaxation"),o=e.fetch_float(0,2),i=e.fetch_float(0,2),a=e.fetch_float(.1,5),e.assume_symbol("strength"),n=e.fetch_float(0,100),e.assume_symbol("contrast"),s=e.fetch_float(0,5),e.assume_symbol("darkLight"),c=e.fetch_float(0,.5),u=e.fetch_float(.5,1)}(e);var E={},z=function(e,s,n){e.map_create(1);for(var c=new Array(e.m_images.length),u=new Array(e.m_images.length),m=0;m<c.length;++m){var h=m/r,_=Math.exp(-h*h);c[m]=1-_+t*_}for(h=(Math.log(Math.max(e.m_factor.src_width,e.m_factor.src_height))/Math.log(2)-1)/r,_=Math.exp(-h*h),n.end_fac=1-_+t*_,m=0;m<u.length;++m)h=m/a,_=Math.exp(-h*h),u[m]=i*(1-_)+o*_;e.r_start=0,e.r_end=1,e.map1(w,1,0,s);var f=1;for(ye(e.m_images[0][0],!1),ye(e.m_images[0][1],!1),m=0;m<e.m_images.length;++m){x.m_fac=c[m],x.m_relax=u[m];for(var d=0;d<l;++d)e.map1(x,1-f,f,s),f=1-f;if(ye(e.m_images[m][0],!0),ye(e.m_images[m][1],!0),m<e.m_images.length-1){var g=m+1;if(e.r_start=g,e.r_end=g+1,e.m_base_level==g){var v=[e.m_base_images[0],e.m_images[g-1][f]];S(p,e.m_base_images[1],v,e.m_base_size,e.m_base_size,s),e.base_move_up(1,s)}else v=[e.m_images[g][0],e.m_images[g-1][f]],S(p,e.m_images[g][1],v,e.m_size[g].width,e.m_size[g].height,s);f=1,ye(e.m_images[g][0],!1),ye(e.m_images[g][1],!1)}}return f}(h,C,E),R=E.end_fac;f.get_rev_trans(v.m_m),v.init(s,.01*n,c,u,R);var M=new Array(3);M[0]=d,M[1]=h.m_images[h.m_images.length-1][z],S(v,_,M,g,T,C)}d=0,h=0,_=0,g=e,m="",f=z(),v=function(e){var t=e,r=0,o={};return o.m_m=new Array(4),o.m_contrast=0,o.m_strength=0,o.m_dark=0,o.m_light=0,o.m_end_fac=0,o.s_fshFragStructureSharpenUpProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D subImageTexture;    uniform vec4 m;    uniform float contrast;    uniform float strength;    uniform float end_fac;    uniform vec2 darklight;    uniform vec2 darklight_inv;    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);        float slum = 255.0*src.w + src.z;        vec4 sub = texture2D(subImageTexture,textureCoordinate * m.xy + m.zw);        float dlum = 255.0*sub.y + sub.x;        float rlum = 255.0*sub.w + sub.z;        float sl1 = (slum - 0.5) * (1.0 / 255.0);        vec2 dh;        dh.x = darklight.x - sl1;        dh.y = sl1 - darklight.y;        dh *= darklight_inv;        dh = max(dh,0.0);        dh *= dh;        dh = max(1.0 - dh,0.0);        float lt= (slum - ((slum - 128.0) * end_fac + dlum - rlum) * contrast - 128.0) * strength;        lt *= mix(dh.x, dh.y, step(0.0, lt));        slum -= lt;        slum = clamp(slum,0.5,255.5);        float fslum = floor(slum);        src.z = slum - fslum;        src.w = fslum * (1.0/255.0);        gl_FragColor = src;    }",o.init=function(e,t,r,o,i){this.m_contrast=e,this.m_strength=t,this.m_dark=r,this.m_light=o,this.m_end_fac=i},o.gpu_process=function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragStructureSharpenUpProc,t.m_context));var n=fe(t.m_context,null,r,i,a,s);n.shader_texture("inputImageTexture",o[0]),n.shader_texture("subImageTexture",o[1]);var c={};if(c.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],c.contrast=this.m_contrast,c.strength=this.m_strength,c.darklight=[this.m_dark,this.m_light],c.darklight_inv=[1/this.m_dark,1/(1-this.m_light)],c.end_fac=this.m_end_fac,n.shader.uniforms(c),n.draw_to(e),t.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(g),x=function(e){var t=e,r=0,o={m_fac:0,m_relax:0,s_fshFragStructureSharpenIterate:"varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform float fac;    uniform float relax;    uniform vec2 sft;    uniform vec4 w_th;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate + sft * cd);    }    void main()    {        vec4 dst = vec4(0.0);        vec4 wt = step(w_th,vec4(textureCoordinate.xy,-textureCoordinate.xy));        vec4 src = get_sample(vec2( 0.0,-1.0)) * wt.y;        src += get_sample(vec2(-1.0, 0.0)) * wt.x;        src += get_sample(vec2( 1.0, 0.0)) * wt.z;        src += get_sample(vec2( 0.0, 1.0)) * wt.w;        float wf = wt.x + wt.y + wt.z + wt.w;        wf = 1.0 / wf;        vec4 srcn = get_sample(vec2( 0.0, 0.0));        vec4 v1 = vec4(src.wy,srcn.wy);        vec4 v2 = vec4(src.zx,srcn.zx);        v1 = v1 * 255.0 + v2;        v1 *= vec4(wf,wf,1.0,1.0);        float lum = dot(v1,vec4(-fac * relax,relax,fac * relax,1.0 - relax));        float flum = floor(lum);        dst.x = lum - flum;        dst.y = flum * (1.0/255.0);        float frefn = floor(v1.z);        dst.z = v1.z - frefn;        dst.w = frefn * (1.0/255.0);        gl_FragColor = dst;    }",gpu_process:function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragStructureSharpenIterate,t.m_context));var n=fe(t.m_context,null,r,i,a,s);n.shader_texture("inputImageTexture",o);var c=1/i,u=1/a,l={};if(l.sft=[c,u],l.fac=this.m_fac,l.relax=this.m_relax,l.w_th=[c,u,c-1,u-1],n.shader.uniforms(l),n.draw_to(e),t.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},destroy:function(){r&&(r.destroy(),r=0)}};return o}(g),p=function(e){var t=e,r=0,o={s_fshFragStructureSharpenUpProc:"varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D subImageTexture;    void main()    {        vec4 dst;        vec4 src = texture2D(inputImageTexture, textureCoordinate);        float slum = 255.0*src.w + src.z;        float fslum = floor(slum);        dst.z = slum - fslum;        dst.w = fslum * (1.0/255.0);        vec4 sub = texture2D(subImageTexture,textureCoordinate);        float dlum = 255.0*sub.y + sub.x;        dlum = clamp(dlum,0.5,255.5);        float fdlum = floor(dlum);        dst.x = dlum - fdlum;        dst.y = fdlum * (1.0/255.0);        gl_FragColor = dst;    }",gpu_process:function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragStructureSharpenUpProc,t.m_context));var n=fe(t.m_context,null,r,i,a,s);if(n.shader_texture("inputImageTexture",o[0]),n.shader_texture("subImageTexture",o[1]),n.draw_to(e),t.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},destroy:function(){r&&r.destroy(),r=0}};return o}(g),b=D(g),y=k(g),w=function(e){var t=E();return t.m_context=e,t.m_shader=0,t.shader_procession=function(){return"vec4 src;        src = get_sample(vec2( 0.0, 0.0));        float ref = 255.0*src.w + src.z;        float fref = floor(ref);        dst.z = ref - fref;        dst.w = fref * (1.0/255.0);        dst.x = 0.5;        dst.y = 0.5;        "},t}(g),T=A(g);var F={destroy:function(){C(),v&&v.destroy(),x&&x.destroy(),p&&p.destroy(),b&&b.destroy(),y&&y.destroy(),w&&w.destroy(),T&&T.destroy()}};return F.size_change=function(e,t){var r,o,i,a,s,n,c;h==e&&_==t||(m="",r=f,o=h=e,(i=_=t)<=0||o<=0||(o>i?(a=32,s=32*i/o,32*i%o&&++s,++s,n=32,c=32*i/o):0!=i&&(a=32*o/i,s=32,32*o%i&&++a,++a,n=32*o/i,c=32),r.src_width=o,r.src_height=i,r.dst_width=Math.floor(a),r.dst_height=Math.floor(s),r.x_start=0,r.y_start=0,r.emb_width=Math.floor(n),r.emb_height=Math.floor(c)),C())},F.gpu_process=function(e,t,r){try{he(t),this.size_change(r.m_width,r.m_height),d||(d=M(g.context(),f,1025,!0,!1,2),m=0),R(e,d,t.new_temporary(),t.current(),r.m_width,r.m_height,r.m_frame_buffer),t.push_to_current()}catch(e){throw"CGEPTPTemplete::gpu_process"}},F}};return e}function P(e){var t=0,r=e,o={m_factor:0};return o.m_m=new Array(4),o.s_fshFragBlurSharpenDownResizeProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec4 m;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);    }    void main()    {        vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));        gl_FragColor = src * 0.25;    }",o.gpu_process=function(e,o,i,a,s){t||(t=new N(null,this.s_fshFragBlurSharpenDownResizeProc,r.m_context));var n=fe(r.m_context,null,t,i,a,s);n.shader_texture("inputImageTexture",o);var c={};if(c.m=this.m_m,c.sft=[1/i,1/a],n.shader.uniforms(c),n.draw_to(e),r.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},o.destroy=function(){t&&(t.destroy(),t=0)},o}function B(e){var t=q();return t.m_context=e,t.shader_procession=function(){return"vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));        dst = src * 0.25;"},t}function U(e){var t=0,r=e,o={m_factor:0,s_fshFragBlurSharpenUpProc:"varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D subImageTextureR;    uniform sampler2D subImageTextureD;    uniform float fac;    void main()    {        vec4 dst = texture2D(inputImageTexture, textureCoordinate);        vec4 sub_r = texture2D(subImageTextureR, textureCoordinate);        vec4 sub_d = texture2D(subImageTextureD, textureCoordinate);        gl_FragColor = (dst - sub_r)*fac + sub_d;    }",gpu_process:function(e,o,i,a,s){t||(t=new N(null,this.s_fshFragBlurSharpenUpProc,r.m_context));var n=fe(r.m_context,null,t,i,a,s);n.shader_texture("inputImageTexture",o[0]),n.shader_texture("subImageTextureR",o[1]),n.shader_texture("subImageTextureD",o[2]);var c={};if(c.fac=this.m_factor,n.shader.uniforms(c),n.draw_to(e),r.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},destroy:function(){t&&(t.destroy(),t=0)}};return o}function L(){var e={name:"blurSharpen",create:function(e){var t,r,o,i,a,s,n,c,u,l,m;s=0,n=e,a=z(),l=P(e),m=B(e),u=U(e),c=function(e){var t=0,r=e,o={m_amount:0,m_end_fac:0,init:function(e,t){this.m_amount=e,this.m_end_fac=t}};return o.m_m=new Array(4),o.s_fshFragBlurSharpenResizeProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D subImageTextureR;    uniform sampler2D subImageTextureD;    uniform vec4 m;    uniform float amount;    uniform float end_fac;    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);        vec4 sub_r = texture2D(subImageTextureR, textureCoordinate * m.xy + m.zw);        vec4 sub_d = texture2D(subImageTextureD, textureCoordinate * m.xy + m.zw);        gl_FragColor = ((src - sub_r) * end_fac + sub_d) *(1.0 - amount) +src * amount;    }",o.gpu_process=function(e,o,i,a,s){t||(t=new N(null,this.s_fshFragBlurSharpenResizeProc,r.m_context));var n=fe(r.m_context,null,t,i,a,s);n.shader_texture("inputImageTexture",o[0]),n.shader_texture("subImageTextureR",o[1]),n.shader_texture("subImageTextureD",o[2]);var c={};if(c.m=this.m_m,c.amount=this.m_amount,c.end_fac=this.m_end_fac,n.shader.uniforms(c),n.draw_to(e),r.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},o.destroy=function(){t&&(t.destroy(),t=0)},o}(e);var h={};return(h=S()).destroy=function(){this.clear(),l&&l.destroy(),m&&m.destroy()},h.clear=function(){s&&(s.destroy(),s=0)},h.size_change=function(e,t){var r,o,i,s,n,c,u;this.m_width==e&&this.m_height==t||(this.m_width=e,this.m_height=t,this.m_last_src="",r=a,o=this.m_width,(i=this.m_height)<=0||o<=0||(o>i?(s=32,n=32*i/o,32*i%o&&++n,++n,c=32,u=32*i/o):(s=32*o/i,n=32,32*o%i&&++s,++s,c=32*o/i,u=32),r.src_width=o,r.src_height=i,r.dst_width=s,r.dst_height=n,r.x_start=0,r.y_start=0,r.emb_width=c,r.emb_height=u),this.clear())},h.init=function(e){e.assume_symbol("amount"),r=e.fetch_float(-100,500),e.assume_symbol("radius"),o=e.fetch_float(0,4)},h.draw_up_textures=function(e,t,r){e.map_create(1);for(var i=new Array(e.m_images.length),a=0;a<i.length;++a){var s=Math.max(e.m_size[a].width,e.m_size[a].height)/16*o;i[a]=Math.exp(-s*s)}for(s=Math.max(e.m_factor.src_width,e.m_factor.src_height)/16*o,r=Math.exp(-s*s),a=1;a<e.m_images.length;++a)if(u.m_factor=i[a],e.m_base_level==a){var n=[e.m_base_images[0],e.m_images[a-1][0],e.m_images[a-1][1]];1==a&&this.copy(e.m_images[a-1][1],e.m_images[a-1][0],e.m_size[a-1].width,e.m_size[a-1].height,t),this.filter(u,e.m_base_images[1],n,e.m_base_size,e.m_base_size,t),e.base_move_up(1,t)}else n=[e.m_images[a][0],e.m_images[a-1][0],e.m_images[a-1][1]],1==a&&this.copy(e.m_images[a-1][1],e.m_images[a-1][0],e.m_size[a-1].width,e.m_size[a-1].height,t),this.filter(u,e.m_images[a][1],n,e.m_size[a].width,e.m_size[a].height,t);return r},h.draw_temp_textures=function(e,t,r){e.load_from(l,t,r),e.draw_downward(m,r)},h.process=function(e,t,o,s,n,u,l){e.get_log()!=i&&(this.draw_temp_textures(t,s,l),i=e.get_log()),this.init(e);var m=1;m=this.draw_up_textures(t,l,m),a.get_rev_trans(c.m_m),c.init(.01*r+1,m);var h=new Array(3);h[0]=s,h[1]=t.m_images[t.m_images.length-1][0],h[2]=t.m_images[t.m_images.length-1][1],this.filter(c,o,h,n,u,l)},h.gpu_process=function(e,r,o){try{t=he(r),this.size_change(o.m_width,o.m_height),s||(s=M(n.context(),a,4099,!0,!1,2),i=0),this.process(e,s,r.new_temporary(),r.current(),o.m_width,o.m_height,o.m_frame_buffer),r.push_to_current(),t.destroy()}catch(e){throw"CGEPTPTemplete::gpu_process"}finally{t.destroy()}},h}};return e}function G(){var e={name:"blurSharpen",create:function(e){var t,r,o,i,a,s,n,c,u,l,m,h;s=0,n=e,a=z(),c=function(e){var t=0,r=0,o=e,i=0,a={init:function(e,o){t=e,r=o}};return a.m_m=new Array(4),a.s_fshBlurSharpenResizeProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D subImageTexture;    uniform vec4 m;    uniform float amount;    uniform float end_fac;    uniform float highlight;    uniform float highlight_inv;    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);        float slum = 255.0*src.w + src.z;        vec4 sub = texture2D(subImageTexture,textureCoordinate * m.xy + m.zw);        float dlum = 255.0*sub.y + sub.x;        float rlum = 255.0*sub.w + sub.z;        slum = ((slum - rlum) * end_fac + dlum) * (1.0 - amount) + slum * amount;        slum = clamp(slum,0.5,255.5);        float fslum = floor(slum);        src.z = slum - fslum;        src.w = fslum * (1.0/255.0);        gl_FragColor = src;    }",a.gpu_process=function(e,a,s,n,c){i||(i=new N(null,this.s_fshBlurSharpenResizeProc,o.m_context));var u=fe(o.m_context,null,i,s,n,c);u.shader_texture("inputImageTexture",a[0]),u.shader_texture("subImageTexture",a[1]);var l={};if(l.m=this.m_m,l.amount=t,l.end_fac=r,u.shader.uniforms(l),u.draw_to(e),o.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},a.destroy=function(){i&&(i.destroy(),i=0)},a}(n),u=function(e){var t=0,r=e,o={m_factor:0};return o.m_m=new Array(4),o.s_fshFragBlurSharpenUpProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D subImageTexture;    uniform float fac;    void main()    {        vec4 dst = texture2D(inputImageTexture, textureCoordinate);        float slum = 255.0*dst.w + dst.z;        vec4 sub = texture2D(subImageTexture,textureCoordinate);        float rlum = 255.0*sub.w + sub.z;        float dlum = 255.0*sub.y + sub.x;        dlum = (slum - rlum)*fac + dlum;        dlum = clamp(dlum,0.5,255.5);        float fdlum = floor(dlum);        dst.x = dlum - fdlum;        dst.y = fdlum * (1.0/255.0);        gl_FragColor = dst;    }",o.gpu_process=function(e,o,i,a,s){t||(t=new N(null,this.s_fshFragBlurSharpenUpProc,r.m_context));var n=fe(r.m_context,null,t,i,a,s);n.shader_texture("inputImageTexture",o[0]),n.shader_texture("subImageTexture",o[1]);var c={};if(c.fac=this.m_factor,n.shader.uniforms(c),n.draw_to(e),r.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},o.destroy=function(){t&&(t.destroy(),t=0)},o}(n),l=D(n),m=k(n),h=A(n);var _={};return(_=S()).destroy=function(){this.clear(),c.destroy(),u.destroy(),l.destroy(),m.destroy(),h.destroy()},_.clear=function(){s&&(s.destroy(),s=0)},_.size_change=function(e,t){var r,o,i,s,n,c,u;this.m_width==e&&this.m_height==t||(this.m_width=e,this.m_height=t,this.m_last_src="",r=a,o=this.m_width,(i=this.m_height)<=0||o<=0||(o>i?(s=32,n=32*i/o,32*i%o&&++n,++n,c=32,u=32*i/o):(s=32*o/i,n=32,32*o%i&&++s,++s,c=32*o/i,u=32),r.src_width=o,r.src_height=i,r.dst_width=s,r.dst_height=n,r.x_start=0,r.y_start=0,r.emb_width=c,r.emb_height=u),this.clear())},_.init=function(e){e.assume_symbol("amount"),r=e.fetch_float(-100,500),e.assume_symbol("radius"),o=e.fetch_float(0,1)},_.draw_up_textures=function(e,t){var r;e.map_create(1);for(var i=new Array(e.m_images.length),a=0;a<i.length;++a){var s=Math.max(e.m_size[a].width,e.m_size[a].height)/16*o;i[a]=Math.exp(-s*s)}for(s=Math.max(e.m_factor.src_width,e.m_factor.src_height)/16*o,r=Math.exp(-s*s),a=1;a<e.m_images.length;++a)if(u.m_factor=i[a],e.m_base_level==a){var n=[e.m_base_images[0],e.m_images[a-1][1]];1==a&&(n[1]=e.m_images[0][0]),this.filter(u,e.m_base_images[1],n,e.m_base_size,e.m_base_size,t),e.base_move_up(1,t)}else n=[e.m_images[a][0],e.m_images[a-1][1]],1==a&&(n[1]=e.m_images[0][0]),this.filter(u,e.m_images[a][1],n,e.m_size[a].width,e.m_size[a].height,t);return r},_.draw_temp_textures=function(e,t,r){e.load_from(l,t,r),e.draw_downward(m,r)},_.process=function(e,t,o,s,n,u,l){e.get_log()!=i&&(this.draw_temp_textures(t,s,l),i=e.get_log()),this.init(e);var m=this.draw_up_textures(t,l);a.get_rev_trans(c.m_m),c.init(.01*r+1,m);var h=new Array(3);h[0]=s,h[1]=t.m_images[t.m_images.length-1][1],this.filter(c,o,h,n,u,l)},_.gpu_process=function(e,r,o){try{t=he(r),this.size_change(o.m_width,o.m_height),s||(s=M(n.context(),a,1025,!0,!1,2),i=0),this.process(e,s,r.new_temporary(),r.current(),o.m_width,o.m_height,o.m_frame_buffer),r.push_to_current(),t.destroy()}catch(e){throw"CGEPTPTemplete::gpu_process"}finally{t.destroy()}},_}};return e}var N=function(){function e(e){return"[object Array]"==Object.prototype.toString.call(e)}function t(e,t,r){var o=e.createShader(t);if(e.shaderSource(o,r),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw"compile error: "+e.getShaderInfoLog(o);return o}var r="    attribute vec2 vertex;    attribute vec2 _texCoord;    varying vec2 textureCoordinate;    void main(){        textureCoordinate=_texCoord;        gl_Position=vec4(vertex*2.0-1.0,0.0,1.0);    }";r="    attribute vec2 vPosition;    varying vec2 textureCoordinate;    void main(){        textureCoordinate= (vPosition.xy + 1.0) / 2.0;        gl_Position=vec4(vPosition, 0.0, 1.0);    }";function o(e,o,i){if(this.gl=i,this.vertexAttribute=null,this.texCoordAttribute=null,this.program=this.gl.createProgram(),e=e||r,o="precision highp float;"+(o=o||defaultFragmentSource),this.gl.attachShader(this.program,t(this.gl,this.gl.VERTEX_SHADER,e)),this.gl.attachShader(this.program,t(this.gl,this.gl.FRAGMENT_SHADER,o)),this.gl.linkProgram(this.program),!this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS))throw"link error: "+this.gl.getProgramInfoLog(this.program)}return o.prototype.destroy=function(){this.gl.deleteProgram(this.program),this.program=null},o.prototype.uniformMat4=function(t){for(var r in this.gl.useProgram(this.program),t)if(t.hasOwnProperty(r)){var o=this.gl.getUniformLocation(this.program,r);if(null!=o){var i=t[r];if(!e(i)||4!=i.length)throw r+" length valid";this.gl.uniformMatrix2fv(o,!1,new Float32Array(i))}}},o.prototype.uniforms=function(t){for(var r in this.gl.useProgram(this.program),t)if(t.hasOwnProperty(r)){var o=this.gl.getUniformLocation(this.program,r);if(null!==o){var i=t[r];if(e(i))switch(i.length){case 1:this.gl.uniform1fv(o,new Float32Array(i));break;case 2:this.gl.uniform2fv(o,new Float32Array(i));break;case 3:this.gl.uniform3fv(o,new Float32Array(i));break;case 4:this.gl.uniform4fv(o,new Float32Array(i));break;case 9:this.gl.uniformMatrix3fv(o,!1,new Float32Array(i));break;case 16:this.gl.uniformMatrix4fv(o,!1,new Float32Array(i));break;default:throw"dont't know how to load uniform \""+r+'" of length '+i.length}else{if(a=i,"[object Number]"!=Object.prototype.toString.call(a))throw'attempted to set uniform "'+r+'" to invalid value '+(i||"undefined").toString();this.gl.uniform1f(o,i)}}}var a;return this},o.prototype.textures=function(e){for(var t in this.gl.useProgram(this.program),e)e.hasOwnProperty(t)&&this.gl.uniform1i(this.gl.getUniformLocation(this.program,t),e[t]);return this},o.prototype.drawRect=function(e,t){null==this.vertexBuffer&&(this.vertexBuffer=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.vertexBuffer),this.gl.bufferData(this.gl.ARRAY_BUFFER,e,this.gl.STATIC_DRAW),null==this.texCoordBuffer&&(this.texCoordBuffer=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.texCoordBuffer),this.gl.bufferData(this.gl.ARRAY_BUFFER,t,this.gl.STATIC_DRAW),null==this.vertexAttribute&&(this.vertexAttribute=this.gl.getAttribLocation(this.program,"vertex"),this.gl.enableVertexAttribArray(this.vertexAttribute)),null==this.texCoordAttribute&&(this.texCoordAttribute=this.gl.getAttribLocation(this.program,"_texCoord"),this.gl.enableVertexAttribArray(this.texCoordAttribute)),this.gl.useProgram(this.program),this.vertexAttribute=this.gl.getAttribLocation(this.program,"vertex"),this.gl.enableVertexAttribArray(this.vertexAttribute),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.vertexBuffer),this.gl.vertexAttribPointer(this.vertexAttribute,2,this.gl.FLOAT,!1,0,0),this.texCoordAttribute=this.gl.getAttribLocation(this.program,"_texCoord"),this.gl.enableVertexAttribArray(this.texCoordAttribute),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.texCoordBuffer),this.gl.vertexAttribPointer(this.texCoordAttribute,2,this.gl.FLOAT,!1,0,0),this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4)},o.getDefaultShader=function(){return this.gl.defaultShader=this.gl.defaultShader||new o,this.gl.defaultShader},o}();function O(){var e={name:"toneMapStart",create:function(e){var t={};return(t=_e()).m_context=e,t.cal_fac=function(e){e.key=Math.pow(2,5-this.m_key/20),e.key_base=1/Math.log(e.key+1)},t.shader_uniform=function(){return"uniform float key;                uniform float key_base;"},t.shader_procession=function(){return"\t\t\t\tvec3 lsrc = max(src.rgb * vec3(1.0 / 12.82),pow((src.rgb + vec3(0.055)) * vec3(1.0 / 1.055),vec3(2.4)));                vec3 csrc = lsrc * vec3(0.299,0.587,0.114);                float lum = csrc.r + csrc.g + csrc.b;                csrc /= vec3(lum+0.00001);                lum = log(1.0 + key * lum) * key_base;                lum = lum * 255.0 + 0.5;                float flum = floor(lum);                dst.x = csrc.r;                dst.y = csrc.b;                dst.z = lum - flum;                dst.w = flum * (1.0/255.0);"},t.shader_setup=function(e){var t,r,o={};this.cal_fac(o),t=o.key,r=o.key_base;var i={};i.key=t,i.key_base=r,e.shader.uniforms(i)},t.m_formula_list=0,t.init=function(e){e.assume_symbol("key"),this.m_key=e.fetch_float(-100,100),e.m_key=this.m_key,e.m_mode="CPM_LUV_MIX_LOG"},t}};return e}function q(){var e={m_shader:0,s_fshFragDownProcTemplate:"varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate + sft * cd);    }    void main()    {        vec4 dst;%s        gl_FragColor = dst;    }",qunimaB:"varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate + sft * cd);    }    void main()    {        vec4 dst;        gl_FragColor = vec4(1.0);    }",gpu_process:function(e,t,r,o,i){var a=this.s_fshFragDownProcTemplate.replace(/%s/g,this.shader_procession());this.m_shader||(this.m_shader=new N(null,a,this.m_context.m_context));var s=fe(this.m_context.m_context,null,this.m_shader,r,o,i);s.shader_texture("inputImageTexture",t);var n={};if(n.sft=[1/r,1/o],s.shader.uniforms(n),s.draw_to(e),this.m_context.m_context.getError())throw"cgeFragDownProcTemplate"},destroy:function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=0)}};return e}function X(){var e={m_m:[1,1,0,0]};return e}function j(e,t){var r={};return(r=X()).m_context=t,r.m_shader=0,r.m_linear=e,r.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=0)},r.s_fshFragLinearResizeProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec4 m;    void main()    {        gl_FragColor = texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw);    }",r.gpu_process=function(e,t,r,o,i){this.m_shader||(this.m_shader=new N(null,this.s_fshFragLinearResizeProc,this.m_context.m_context));var a=fe(this.m_context.m_context,null,this.m_shader,r,o,i);a.shader_texture("inputImageTexture",t);var s={};if(s.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],a.shader.uniforms(s),a.draw_to(e),this.m_context.m_context.getError())throw"CGEPTPTemplate::gpu_process"},r}function Y(e){var t={m_shader:0,s_fshFragFilterProcTemplate:"varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate + sft * cd);    }    void main()    {        vec4 dst = vec4(0.0);    %s        gl_FragColor = dst;    }",destroy:function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=0)},gpu_process:function(t,r,o,i,a){if(!this.m_shader){for(var s="varying vec2 textureCoordinate;            uniform vec2 sft;",n=0;n<e;++n)s+="uniform sampler2D inputImageTexture"+(n+1).toString()+";                ";for(n=0;n<e;++n)s+="vec4 get_sample"+(n+1).toString()+"(vec2 cd){                ",s+="return texture2D(inputImageTexture"+(n+1).toString()+", textureCoordinate + sft * cd);}                ";s+="void main(){ vec4 dst = vec4(0.0);            ",s+=this.shader_procession(),s+="gl_FragColor = dst;}",this.m_shader=new N(null,s,this.m_context.m_context)}var c=fe(this.m_context.m_context,null,this.m_shader,o,i,a);for(n=0;n<e;++n)c.shader_texture("inputImageTexture"+(n+1).toString(),r[n]);var u={};if(u.sft=[1/o,1/i],c.shader.uniforms(u),c.draw_to(t),this.m_context.m_context.getError())throw"cgeFragDownProcTemplate"}};return t}function V(){var e={name:"tiltShift",create:function(e){var t,r,o,i,a,s,n,c,u,l,m,h,_,f,d,g,v,x,p,b,y,w,T,C,R,A=[];function D(e,t,r,o){var i,a,s,n;r<=0||t<=0||(t>r?(i=o,a=(o-1)*r/t,(o-1)*r%t&&++a,++a,s=o-1,n=(o-1)*r/t):(i=(o-1)*t/r,a=o,(o-1)*t%r&&++i,++i,s=(o-1)*t/r,n=o-1),e.src_width=t,e.src_height=r,e.dst_width=i,e.dst_height=a,e.x_start=0,e.y_start=0,e.emb_width=s,e.emb_height=n)}function k(e){e[0]=-i,e[1]=o,e[2]=o,e[3]=i;var t=Math.max(m,h),l=.5*t*r/1.4,_=[1*a/l,0,0,1/l],f=[m,0,0,h];e[0]*=_[0]*f[0],e[1]*=_[0]*f[3],e[2]*=_[3]*f[0],e[3]*=_[3]*f[3];var d=1,g=1,v=1;switch(u){case 0:break;case 1:d=g=v=m;break;case 2:d=g=v=h;break;case 3:d=g=v=t;break;case 4:d=m,g=h,v=t}var x={};return x.px=d*n/m,x.py=g*c/h,x.th=v*s/l,x}function F(e,t,r,o,i,a,s){var n=o.dst_width/o.emb_width,c=o.dst_height/o.emb_height;e[0]*=n,e[1]*=c,e[2]*=n,e[3]*=c;var u={};return u.fac=Math.pow(.5,.5*(i+1)),u.px=t/n+a,u.py=r/c+s,u}function I(e,t,r){for(var o=0;o<e.m_images.length;++o){var i,a,s=C.m_m,n=(C.m_px,C.m_py,e.m_size[o]),c=.5/n.width,u=.5/n.height,l=k(s);i=l.th,l=F(s,l.px,l.py,e.m_factor,2*o+r,c,u),C.m_px=l.px,C.m_py=l.py,C.m_m=s,a=l.fac,C.m_th[0]=(i+1*a)*(i+1*a),C.m_th[1]=(i+.5*a)*(i+.5*a),C.m_th[2]=(i+.25*a)*(i+.25*a);var m=new Array(4);m[0]=e.m_images[o][3],m[2]=e.m_images[o][2],m[3]=e.m_images[o][1],o?(m[1]=e.m_images[o-1][0],C.m_us_x=c,C.m_us_y=u):(m[1]=m[1]=e.m_images[o][5],C.m_us_x=0,C.m_us_y=0),o==e.m_images.length-1?C.m_top=!0:C.m_top=!1,U.filter(C,e.m_images[o][0],m,n.width,n.height,t)}}function P(e,t,r){e.load_from(d,t,r),e.draw_downward(v,r),e.map1(x,1,0,r),e.map1(p,2,1,r);var o=new Array(3);o[0]=0,o[1]=2,e.mapN(w,3,o,2,r),e.r_end=1,e.map1(b,4,2,r),o[2]=4,e.mapN(T,5,o,3,r),e.r_end=e.m_images.length,e.r_start=e.m_images.length-1,o[1]=1,e.mapN(y,2,o,2,r),e.r_start=0}function B(){A[0]&&(A[0].destroy(),A[0]=0),A[1]&&(A[1].destroy(),A[1]=0)}A[0]=0,A[1]=0,m=0,h=0,f=e,_=[z(),z()],C=function(e){var t=e,r=0,o=0,i={};return i.m_m=new Array(4),i.m_px=0,i.m_py=0,i.m_th=new Array(3),i.m_us_x=0,i.m_us_y=0,i.m_top=!1,i.s_fshFragTiltShiftUpProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D inputImageTextureUp;    uniform vec2 upsft;    uniform mat2 trans;    uniform vec2 pos;    uniform float th;    void main()    {        vec4 src;        vec2 ncodin = (textureCoordinate - pos) * trans;        if(dot(ncodin,ncodin) < th)        {            src = texture2D(inputImageTexture, textureCoordinate);        }        else        {            src = texture2D(inputImageTextureUp, textureCoordinate + upsft);        }        gl_FragColor = src;    }    ",i.s_fshFragTiltShiftUpTopProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D inputImageTexture1;    uniform sampler2D inputImageTexture2;    uniform sampler2D inputImageTextureUp;    uniform vec2 upsft;    uniform mat2 trans;    uniform vec2 pos;    uniform vec3 th;    void main()    {        vec4 src;        vec2 ncodin = (textureCoordinate - pos) * trans;        float dt = dot(ncodin,ncodin);        if(dt < th.z)        {            src = texture2D(inputImageTexture2, textureCoordinate);        }        else if(dt < th.y)        {            src = texture2D(inputImageTexture1, textureCoordinate);        }        else if(dt < th.x)        {            src = texture2D(inputImageTexture, textureCoordinate);        }        else        {            src = texture2D(inputImageTextureUp, textureCoordinate + upsft);        }        gl_FragColor = src;    }",i.gpu_process=function(e,i,a,s,n){var c={};this.m_top?(o||(o=new N(null,this.s_fshFragTiltShiftUpTopProc,t.context())),c=fe(t.context(),null,o,a,s,n)):(r||(r=new N(null,this.s_fshFragTiltShiftUpProc,t.context())),c=fe(t.context(),null,r,a,s,n)),c.shader_texture("inputImageTexture",i[0]),c.shader_texture("inputImageTextureUp",i[1]),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MIN_FILTER,t.context().LINEAR),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MAG_FILTER,t.context().LINEAR);var u={};this.m_top?(c.shader_texture("inputImageTexture1",i[2]),c.shader_texture("inputImageTexture2",i[3]),u.th=this.m_th):u.th=this.m_th[0],u.upsft=[this.m_us_x,this.m_us_y];var l={};if(l.trans=this.m_m,c.shader.uniformMat4(l),u.pos=[this.m_px,this.m_py],c.shader.uniforms(u),c.draw_to(e),t.context().bindTexture(t.context().TEXTURE_2D,i[1]),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MIN_FILTER,t.context().NEAREST),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MAG_FILTER,t.context().NEAREST),t.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},i.destroy=function(){r&&(r.destroy(),r=0),o&&(o.destroy(),o=0)},i}(f),R=function(e){var t=e,r=0,o={};return o.m_m1=new Array(4),o.m_m2=new Array(4),o.m_trans=new Array(4),o.m_center=new Array(2),o.m_th=0,o.m_bsth=0,o.s_fshTiltShiftResizeProc="\tvarying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D inputImageTextureS1;    uniform sampler2D inputImageTextureS2;    uniform vec4 m1;    uniform vec4 m2;    uniform mat2 trans;    uniform vec2 center;    uniform float th;    uniform float bsth;    void main()    {        vec4 src;        vec2 subtc = textureCoordinate;        vec2 ncodin = (subtc - center) * trans;        float p = sqrt(dot(ncodin,ncodin)) - th;        vec4 c1 = texture2D(inputImageTexture,textureCoordinate);        vec4 c2 = texture2D(inputImageTextureS1, subtc * m1.xy + m1.zw);        vec4 c3 = texture2D(inputImageTextureS2, subtc * m2.xy + m2.zw);        float fac = fract(max(log(max(p,bsth)) * -1.44269504,0.0));        fac = min((1.0 - fac),fac) * 2.0;        src = mix(c2,c3,vec4(clamp(fac * 2.0 - 0.5,0.0,1.0)));        src = mix(c1,src,clamp(p / bsth,0.0,1.0));        gl_FragColor = src;    }",o.s_fshFragTiltShiftUpTopProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D inputImageTexture1;    uniform sampler2D inputImageTexture2;    uniform sampler2D inputImageTextureUp;    uniform vec2 upsft;    uniform mat2 trans;    uniform vec2 pos;    uniform vec3 th;    void main()    {        vec4 src;        vec2 ncodin = (textureCoordinate - pos) * trans;        float dt = dot(ncodin,ncodin);        if(dt < th.z)        {            src = texture2D(inputImageTexture2, textureCoordinate);        }        else if(dt < th.y)        {            src = texture2D(inputImageTexture1, textureCoordinate);        }        else if(dt < th.x)        {            src = texture2D(inputImageTexture, textureCoordinate);        }        else        {            src = texture2D(inputImageTextureUp, textureCoordinate + upsft);        }        gl_FragColor = src;    }",o.gpu_process=function(e,o,i,a,s){var n={};r||(r=new N(null,this.s_fshTiltShiftResizeProc,t.context())),(n=fe(t.context(),null,r,i,a,s)).shader_texture("inputImageTexture",o[0]),n.shader_texture("inputImageTextureS1",o[1]),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MIN_FILTER,t.context().LINEAR),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MAG_FILTER,t.context().LINEAR),n.shader_texture("inputImageTextureS2",o[2]),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MIN_FILTER,t.context().LINEAR),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MAG_FILTER,t.context().LINEAR);var c={};c.m1=this.m_m1,c.m2=this.m_m2,c.center=[this.m_center[0],this.m_center[1]],c.th=this.m_th,c.bsth=this.m_bsth;var u={};if(u.trans=this.m_trans,n.shader.uniformMat4(u),n.shader.uniforms(c),n.draw_to(e),t.context().bindTexture(t.context().TEXTURE_2D,o[1]),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MIN_FILTER,t.context().LINEAR),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MAG_FILTER,t.context().LINEAR),t.context().bindTexture(t.context().TEXTURE_2D,o[2]),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MIN_FILTER,t.context().NEAREST),t.context().texParameteri(t.context().TEXTURE_2D,t.context().TEXTURE_MAG_FILTER,t.context().NEAREST),t.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},o.destroy=function(){r&&r.destroy()},o}(f),d=j(!0,f),g=j(!1,f),v=function(e){var t=q();return t.m_context=e,t.shader_procession=function(){return"vec4 src = get_sample(vec2(-0.25,-0.25));        dst =  src * src * src;        src = get_sample(vec2( 0.25,-0.25));        dst += src * src * src;        src = get_sample(vec2(-0.25, 0.25));        dst += src * src * src;        src = get_sample(vec2( 0.25, 0.25));        dst += src * src * src;        dst = pow(dst * vec4(0.25),vec4(1.0 / 3.0));"},t}(f),x=function(e){var t=E();return t.m_context=e,t.shader_procession=function(){return"vec4 src = get_sample(vec2(-1.0,-1.0));        dst =  src * src * src;        src = get_sample(vec2( 0.0,-1.0));        dst += src * src * src;        src = get_sample(vec2(-1.0, 0.0));        dst += src * src * src;        src = get_sample(vec2( 0.0, 0.0));        dst += src * src * src;        dst = pow(dst * vec4(0.25),vec4(1.0 / 3.0));        "},t}(f),p=function(e){var t=E();return t.m_context=e,t.shader_procession=function(){return"vec4 src = get_sample(vec2(-1.0, 0.0));        dst =  src * src * src;        src = get_sample(vec2( 1.0, 0.0));        dst += src * src * src;        dst = pow(dst * vec4(0.5),vec4(1.0 / 3.0));        "},t}(f),b=function(e){var t=E();return t.m_context=e,t.shader_procession=function(){return"vec4 src = get_sample(vec2(-2.0,-1.0));        dst =  src * src * src;        src = get_sample(vec2(-2.0, 1.0));        dst += src * src * src;        src = get_sample(vec2( 2.0,-1.0));        dst += src * src * src;        src = get_sample(vec2( 2.0, 1.0));        dst += src * src * src;        dst = pow(dst * vec4(0.25),vec4(1.0 / 3.0));        "},t}(f),y=function(e){var t=Y(2);return t.m_context=e,t.shader_procession=function(){return"vec4 src = get_sample1(vec2(-1.0,-2.0));        dst += src * src * src;        src = get_sample1(vec2( 0.0,-2.0));        dst += src * src * src;        src = get_sample1(vec2(-1.0, 1.0));        dst += src * src * src;        src = get_sample1(vec2( 0.0, 1.0));        dst += src * src * src;        dst *= vec4(0.25);        src = get_sample2(vec2(-1.0,0.0));        dst += src * src * src;        src = get_sample2(vec2( 1.0,0.0));        dst += src * src * src;        dst = pow(dst * vec4(1.0 / 3.0),vec4(1.0 / 3.0));        "},t}(f),w=function(e){var t=Y(2);return t.m_context=e,t.shader_procession=function(){return"vec4 src = get_sample1(vec2(-3.0,-3.0));        dst += src * src * src;        src = get_sample1(vec2( 2.0,-3.0));        dst += src * src * src;        src = get_sample1(vec2(-3.0, 2.0));        dst += src * src * src;        src = get_sample1(vec2( 2.0, 2.0));        dst += src * src * src;        dst *= vec4(0.125);        src = get_sample2(vec2( 0.0,-3.0));        dst += src * src * src;        src = get_sample2(vec2(-2.0,-1.0));        dst += src * src * src;        src = get_sample2(vec2( 2.0,-1.0));        dst += src * src * src;        src = get_sample2(vec2(-2.0, 1.0));        dst += src * src * src;        src = get_sample2(vec2( 2.0, 1.0));        dst += src * src * src;        src = get_sample2(vec2( 0.0, 3.0));        dst += src * src * src;        dst = pow(dst * vec4(1.0 / 6.5),vec4(1.0 / 3.0));        "},t}(f),T=function(e){var t=Y(3);return t.m_context=e,t.shader_procession=function(){return"vec4 src = get_sample1(vec2(-5.0,6.0));        dst = src * src * src;        src = get_sample1(vec2( 4.0,6.0));        dst += src * src * src;        src = get_sample1(vec2(-7.0,4.0));        dst += src * src * src;        src = get_sample1(vec2( 6.0,4.0));        dst += src * src * src;        src = get_sample1(vec2(-7.0,-5.0));        dst += src * src * src;        src = get_sample1(vec2( 6.0,-5.0));        dst += src * src * src;        src = get_sample1(vec2(-5.0,-7.0));        dst += src * src * src;        src = get_sample1(vec2( 4.0,-7.0));        dst += src * src * src;        dst *= vec4(0.125);        src = get_sample2(vec2( 2.0,7.0));        dst += src * src * src;        src = get_sample2(vec2(-2.0,7.0));        dst += src * src * src;        src = get_sample2(vec2( 4.0,5.0));        dst += src * src * src;        src = get_sample2(vec2( 0.0,5.0));        dst += src * src * src;        src = get_sample2(vec2(-4.0,5.0));        dst += src * src * src;        src = get_sample2(vec2( 4.0,-5.0));        dst += src * src * src;        src = get_sample2(vec2( 0.0,-5.0));        dst += src * src * src;        src = get_sample2(vec2(-4.0,-5.0));        dst += src * src * src;        src = get_sample2(vec2( 2.0,-7.0));        dst += src * src * src;        src = get_sample2(vec2(-2.0,-7.0));        dst += src * src * src;        dst *= vec4(0.25);        src = get_sample3(vec2(-4.0,2.0));        dst += src * src * src;        src = get_sample3(vec2( 4.0,2.0));        dst += src * src * src;        src = get_sample3(vec2(-4.0,-2.0));        dst += src * src * src;        src = get_sample3(vec2( 4.0,-2.0));        dst += src * src * src;        dst = pow(dst * vec4(1.0 / 6.75),vec4(1.0 / 3.0));        "},t}(f);var U={};return(U=S()).destroy=function(){B(),C.destroy(),R.destroy(),d.destroy(),g.destroy(),v.destroy(),x.destroy(),p.destroy(),b.destroy(),y.destroy(),w.destroy(),T.destroy()},U.size_change=function(e,t){m==e&&h==t||(l="",D(_[0],m=e,h=t,256),D(_[1],m,h,362),B())},U.process=function(e,t,m,h,d,g,v){this.size_change(d,g),t[0]||(t[0]=M(f,_[0],1500),t[1]=M(f,_[1],1500),l=""),e.get_log()!=l&&(P(t[0],h,v),P(t[1],h,v),l=e.get_log()),function(e){switch(e.assume_symbol("aperture"),r=e.fetch_float(),e.lookup_symbol(["angleAng","angleRad","angleVec",0],!0)){case 0:var t=3.14159265*e.fetch_float()/180;o=Math.cos(t),i=Math.sin(t);break;case 1:t=e.fetch_float(),o=Math.cos(t),i=Math.sin(t);break;case 2:o=e.fetch_float(),i=e.fetch_float();var l=1/Math.sqrt(o*o+i*i);o*=l,i*=l;break;default:throw"CGETiltshiftParser::init"}if(e.assume_symbol("measuringScale"),u=e.lookup_symbol(["pixel","width","height","longEdge","relative",0],!0),e.assume_symbol("center"),n=e.fetch_float(),c=e.fetch_float(),0==e.lookup_symbol(["vector","ellipse",0],!0))s=e.fetch_float(),a=0;else{var m,h=e.fetch_float(),_=e.fetch_float();h<_?a=(s=h)/(_+1e-5):(a=(s=_)/(h+1e-5),m=o,o=i,i=m,o=-o)}}(e),I(t[0],v,0),I(t[1],v,1),R.m_m1[0]=_[0].emb_width/_[0].dst_width,R.m_m1[1]=_[0].emb_height/_[0].dst_height,R.m_m1[2]=.5/t[0].m_size[t[0].m_size.length-1].width,R.m_m1[3]=.5/t[0].m_size[t[0].m_size.length-1].height,R.m_m2[0]=_[1].emb_width/_[1].dst_width,R.m_m2[1]=_[1].emb_height/_[1].dst_height,R.m_m2[2]=.5/t[1].m_size[t[1].m_size.length-1].width,R.m_m2[3]=.5/t[1].m_size[t[1].m_size.length-1].height,new Array(4);var x=k(R.m_trans);R.m_center[0]=x.px,R.m_center[1]=x.py,R.m_th=x.th,R.m_bsth=Math.pow(.5,.5*(t[0].m_images.length+t[1].m_images.length+6-1));var p=new Array(3);p[0]=h,p[1]=t[0].m_images[t[0].m_images.length-1][0],p[2]=t[1].m_images[t[1].m_images.length-1][0],this.filter(R,m,p,d,g,v)},U.gpu_process=function(e,r,o){try{t=he(r),this.process(e,A,r.new_temporary(),r.current(),o.m_width,o.m_height,o.m_frame_buffer),r.push_to_current(),t.destroy()}catch(e){throw"CGEPTPTemplete::gpu_process"}finally{t.destroy()}},U}};return e}function H(){var e={name:"painter",create:function(e){var t,r,o,i,a,s,n,c=null,u=0,l=0,m=0,h=e,_=[],f=0,d=0,g="attribute vec4 vPosition;            attribute vec2 vPointNorm;            uniform mat4 uMat;            uniform float pointSize;            void main()            {                gl_PointSize = pointSize;                gl_Position = (uMat * vPosition);            }";function v(e){for(var t=[],r=0;r<e.length;++r)t[2*r]=e[r].x,t[2*r+1]=e[r].y;return t}var x={};return(x=S()).destroy=function(){f&&(f.destroy(),f=0),d&&(d.destroy(),d=0)},x.gpu_process=function(e,x,p){try{p.m_width==l&&p.m_height==m||(M=0,A=p.m_width,D=0,k=p.m_height,t=[2/(P=A-M),0,0,0,0,2/(B=k-D),0,0,0,0,-2/(U=(I=1)-(F=-1)),0,-(A+M)/P,-(k+D)/B,-(I+F)/U,1],l=p.m_width,m=p.m_height),function(e,t,l){if(c=null,o=1,i=.1,a=.05,s=.1,u=0,u=e.lookup_symbol(["lucency","eraser","hardEraser","texture",0],!0),e.assume_symbol("opacity"),s=e.fetch_float(0,1),e.assume_symbol("pointSize"),r=e.test_symbol("relToWidth")?e.fetch_float()*t:e.fetch_float(),e.assume_symbol("pointStride"),n=e.test_symbol("relToWidth")?e.fetch_float()*t:e.fetch_float(),e.lookup_symbol(["coordinate","realPixel",0],!0))for(;e.test_symbol("point");){var m=e.fetch_float()/t,h=e.fetch_float()/l;_.push({x:m,y:h})}else for(;e.test_symbol("point");)m=e.fetch_float(),h=e.fetch_float(),_.push({x:m,y:h});e.test_symbol("rectangle")&&((c={position:[],size:[]}).position[0]=e.fetch_float(),c.position[1]=e.fetch_float(),c.size[0]=e.fetch_float(),c.size[1]=e.fetch_float())}(e,p.m_width,p.m_height);var b=s,y=r;h.context().enable(h.context().BLEND),u?(h.context().blendEquation(h.context().FUNC_ADD),h.context().blendFuncSeparate(h.context().ONE,h.context().ONE,h.context().ONE,h.context().ONE_MINUS_SRC_ALPHA),b=2==u?10:1,y=r):(h.context().blendEquation(h.context().FUNC_ADD),h.context().blendFunc(h.context().ZERO,h.context().ONE_MINUS_SRC_COLOR),y=1.15*r);var w,T=he(x);f||(f=new N(g,"uniform vec4 vColor;            void main()            {               \t\tvec2 pos = gl_PointCoord*2.0 - 1.0;               \t\tfloat dis =  sqrt(pos.x*pos.x + pos.y*pos.y);               \t\tfloat a=0.0;                    if(dis<0.2){                        float fac = dis/0.2;                        a = 0.64*(1.0-fac)+0.41*fac;                    }                    else if(dis<0.4){                         float fac = (dis-0.2) / 0.2;                         a = 0.41*(1.0-fac)+0.24*fac;                    }                    else if(dis<0.7){                         float fac = (dis-0.4) / 0.3;                         a = 0.24*(1.0-fac)+0.08*fac;                    }                    else if(dis<0.83){                         float fac = (dis-0.7) / 0.13;                         a = 0.08*(1.0-fac)+0.06*fac;                    }                    else if(dis<0.89){                         float fac = (dis-0.83) / 0.03;                         a = 0.06*(1.0-fac)+0.008*fac;                    }                    else if(dis<1.0){                         float fac = (dis-0.89) / 0.11;                         a = 0.008*(1.0-fac);                    }                gl_FragColor =vColor*vec4(0.0, 0.0, 0.0, a);            }",h.m_context)),d||(d=new N(g,"uniform vec4 vColor;            void main()            {               \t\tvec2 pos = gl_PointCoord*2.0 - 1.0;               \t\tfloat dis =  sqrt(pos.x*pos.x + pos.y*pos.y);               \t\tfloat a=0.0;               \t\tif(dis<0.89){               \t\t    float fac = (dis) / 0.89;                       a = 0.9*(1.0-fac)+0.1*fac;               \t\t}               \t\telse if(dis<1.0){                        float fac = (dis - 0.89) / 0.11;                        a = 0.1*(1.0 - fac);                }                gl_FragColor =vColor*vec4(0.0, 0.0, 0.0, a);            }",h.m_context)),h.context().bindFramebuffer(h.context().FRAMEBUFFER,p.m_frame_buffer),h.context().framebufferTexture2D(h.context().FRAMEBUFFER,h.context().COLOR_ATTACHMENT0,h.context().TEXTURE_2D,x.current(),0),w=u?d:f,h.context().useProgram(w.program);var C=[],S=[];if(S[0]=p.m_width,S[1]=p.m_height,function(e,t,r,o,i){var a=e.length;if(a<1||i<1)throw"Invalid Parameters";if(1==a)return t.push({x:e[0].x*o[0],y:e[0].y*o[1]}),void r.push({x:0,y:0});for(var s=1;s<a;++s)for(var n={x:(e[s].x-e[s-1].x)*o[0],y:(e[s].y-e[s-1].y)*o[1]},c=Math.floor(Math.max(Math.ceil(Math.sqrt(n.x*n.x+n.y*n.y))/i,1)),u={x:n.x/c,y:n.y/c},l={x:e[s-1].x*o[0],y:e[s-1].y*o[1]},m=0;m<c;++m)t.push({x:l.x+u.x*m,y:l.y+u.y*m})}(_,C,[],S,n),0==C.length)return;_=[];var E=C.length;null==h.context().engineVertexBuffer&&(h.context().engineVertexBuffer=h.context().createBuffer()),h.context().bindBuffer(h.context().ARRAY_BUFFER,h.context().engineVertexBuffer),h.context().bufferData(h.context().ARRAY_BUFFER,new Float32Array(v(C)),h.context().STATIC_DRAW);var z=h.context().getAttribLocation(w.program,"vPosition");h.context().vertexAttribPointer(z,2,h.context().FLOAT,!1,0,new Float32Array(v(C))),h.context().enableVertexAttribArray(z);var R={};R.uMat=t,R.pointSize=y,R.vColor=[o,i,a,b],c?(R.trans=[p.m_width/c.size[0],p.m_height/c.size[1],-c.position[0]*(p.m_width/c.size[0]),-c.position[1]*(p.m_height/c.size[1])],h.context().viewport(c.position[0],c.position[1],c.size[0],c.size[1])):h.context().viewport(0,0,p.m_width,p.m_height),w.uniforms(R),h.context().drawArrays(h.context().POINTS,0,E),h.context().disable(h.context().BLEND)}catch(e){throw"CGEPTPTemplete::gpu_process"}finally{T.destroy()}var M,A,D,k,F,I,P,B,U},x}};return e}function W(){var e={name:"colorPainter",create:function(e){var t,r,o,i,a,s,n=0,c=0,u=e,l=[],m=0,h=0;function _(e){for(var t=[],r=0;r<e.length;++r)t[2*r]=e[r].x,t[2*r+1]=e[r].y;return t}var f={};return(f=S()).destroy=function(){m&&(m.destroy(),m=0),h&&(h.destroy(),h=0)},f.gpu_process=function(e,h,f){try{f.m_width==n&&f.m_height==c||(w=0,T=f.m_width,C=0,S=f.m_height,t=[2/(R=T-w),0,0,0,0,2/(M=S-C),0,0,0,0,-2/(A=(z=1)-(E=-1)),0,-(T+w)/R,-(S+C)/M,-(z+E)/A,1],n=f.m_width,c=f.m_height),function(e,t,n){if(o=1,i=.1,a=.05,e.assume_symbol("pointSize"),r=e.test_symbol("relToWidth")?e.fetch_float()*t:e.fetch_float(),e.assume_symbol("pointStride"),s=e.test_symbol("relToWidth")?e.fetch_float()*t:e.fetch_float(),o=e.fetch_float(0,255),i=e.fetch_float(0,255),a=e.fetch_float(0,255),e.lookup_symbol(["coordinate","realPixel",0],!0))for(;e.test_symbol("point");){var c=e.fetch_float()/t,u=e.fetch_float()/n;l.push({x:c,y:u})}else for(;e.test_symbol("point");)c=e.fetch_float(),u=e.fetch_float(),l.push({x:c,y:u})}(e,f.m_width,f.m_height);var d=r;u.context().enable(u.context().BLEND),u.context().blendEquation(u.context().FUNC_ADD),u.context().blendFunc(u.context().ONE,u.context().ONE_MINUS_SRC_ALPHA);var g=he(h);m||(m=new N("attribute vec4 vPosition;            attribute vec2 vPointNorm;            uniform mat4 uMat;            uniform float pointSize;            void main()            {                gl_PointSize = pointSize;                gl_Position = (uMat * vPosition);            }","uniform sampler2D brushTexture;            uniform vec4 vColor;            void main()            {                 vec2 coord = gl_PointCoord - vec2(0.5);                 float radius = coord.x*coord.x + coord.y*coord.y;                 radius = sqrt(radius);                 if(radius<0.5)gl_FragColor = vColor;                 else gl_FragColor = vec4(0.0);            }",u.m_context)),u.context().bindFramebuffer(u.context().FRAMEBUFFER,f.m_frame_buffer),u.context().framebufferTexture2D(u.context().FRAMEBUFFER,u.context().COLOR_ATTACHMENT0,u.context().TEXTURE_2D,h.current(),0),u.context().useProgram(m.program);var v=[],x=[];if(x[0]=f.m_width,x[1]=f.m_height,function(e,t,r,o,i){var a=e.length;if(a<1||i<1)throw"Invalid Parameters";if(1==a)return t.push({x:e[0].x*o[0],y:e[0].y*o[1]}),void r.push({x:0,y:0});for(var s=1;s<a;++s)for(var n={x:(e[s].x-e[s-1].x)*o[0],y:(e[s].y-e[s-1].y)*o[1]},c=Math.floor(Math.max(Math.ceil(Math.sqrt(n.x*n.x+n.y*n.y))/i,1)),u={x:n.x/c,y:n.y/c},l={x:e[s-1].x*o[0],y:e[s-1].y*o[1]},m=0;m<c;++m)t.push({x:l.x+u.x*m,y:l.y+u.y*m})}(l,v,[],x,s),0==v.length)return;l=[];var p=v.length;null==u.context().engineVertexBuffer&&(u.context().engineVertexBuffer=u.context().createBuffer()),u.context().bindBuffer(u.context().ARRAY_BUFFER,u.context().engineVertexBuffer),u.context().bufferData(u.context().ARRAY_BUFFER,new Float32Array(_(v)),u.context().STATIC_DRAW);var b=u.context().getAttribLocation(m.program,"vPosition");u.context().vertexAttribPointer(b,2,u.context().FLOAT,!1,0,new Float32Array(_(v))),u.context().enableVertexAttribArray(b);var y={};y.uMat=t,y.pointSize=d,y.vColor=[o/255,i/255,a/255,1],u.context().viewport(0,0,f.m_width,f.m_height),m.uniforms(y),u.context().drawArrays(u.context().POINTS,0,p),u.context().disable(u.context().BLEND)}catch(e){throw"CGEPTPTemplete::gpu_process"}finally{g.destroy()}var w,T,C,S,E,z,R,M,A},f}};return e}function Z(){var e={name:"magicPainter",create:function(e){var t,r,o,i,a,s,n,c,u,l,m,h,_,f,d,g,v,x,p,b=0,y=0,w="noExist",T=0,C=0,E=e,z=[],R=0;function M(e,r){var o;if(Math.random()<=x){!function(e,t){var r=g,o=(Math.random()+Math.random()+Math.random()+Math.random()+Math.random()+Math.random()-3)*r*.5,i=2*Math.PI*Math.random();m[2*t]=e[0]+o*Math.cos(i),m[2*t+1]=e[1]+o*Math.sin(i)}(e,r);var a=(Math.random()+Math.random()+Math.random()+Math.random()+Math.random()+Math.random()-3)*i*.08333333+i;a=Math.min(Math.max(0,a),1),f[r]=a}else!function(e,t){var r=v*Math.random(),o=2*Math.PI*Math.random();m[2*t]=e[0]+r*Math.cos(o),m[2*t+1]=e[1]+r*Math.sin(o)}(e,r),a=(Math.random()+Math.random()+Math.random()+Math.random()+Math.random()+Math.random()-3)*i*.08333333+i,a=Math.min(Math.max(0,a),1),f[r]=a;o="noExist"==w?2*Math.PI*Math.random():w+(Math.random()+Math.random()+Math.random()+Math.random()+Math.random()+Math.random()-3)*Math.PI*.1666666+Math.PI,h[2*r]=Math.cos(o),h[2*r+1]=Math.sin(o),_[r]=t+t*(Math.random()-.5)*.6,d[r]=16*Math.random()}var A={};return(A=S()).destroy=function(){R&&(R.destroy(),R=0)},A.gpu_process=function(e,S,A){try{var D=he(S);A.m_width==T&&A.m_height==C||(q=0,X=A.m_width,j=0,Y=A.m_height,o=[2/(W=X-q),0,0,0,0,2/(Z=Y-j),0,0,0,0,-2/(J=(H=1)-(V=-1)),0,-(X+q)/W,-(Y+j)/Z,-(H+V)/J,1],T=A.m_width,C=A.m_height),function(e,r,o){if(w="noExist",z=[],m=0,h=0,_=0,f=0,d=0,b=0,i=.1,y=0,y=e.lookup_symbol(["add","opacity","texture",0],!0),e.assume_symbol("opacity"),i=e.fetch_float(0,1),e.assume_symbol("pointStride"),a=e.test_symbol("relToWidth")?e.fetch_float()*r:e.fetch_float(),e.assume_symbol("texSize"),t=e.fetch_float(),e.assume_symbol("outsideRadius"),g=e.fetch_float(),e.assume_symbol("innerRadius"),v=e.fetch_float(),e.assume_symbol("numRatio"),x=e.fetch_float(),e.assume_symbol("file"),p=e.fetch_string(),e.test_symbol("angle")&&(w=e.fetch_float()),e.lookup_symbol(["coordinate","realPixel",0],!0))for(;e.test_symbol("point");){var s=e.fetch_float()/r,n=e.fetch_float()/o;z.push({x:s,y:n})}else for(;e.test_symbol("point");)s=e.fetch_float(),n=e.fetch_float(),z.push({x:s,y:n})}(e,A.m_width,A.m_height);var k=[];k[0]=A.m_width,k[1]=A.m_height;var F,I,P,B,U,L=E.context();if(function(e,t,r){var o=e.length;if(o<1||r<1)throw"Invalid Parameters";if(1==o)return m=new Float32Array(2),h=new Float32Array(2),_=new Float32Array(1),f=new Float32Array(1),d=new Float32Array(1),b=1,void M(e[0],0);for(var i=[],a=1;a<o;++a)for(var s={x:(e[a].x-e[a-1].x)*t[0],y:(e[a].y-e[a-1].y)*t[1]},n=Math.floor(Math.max(Math.ceil(Math.sqrt(s.x*s.x+s.y*s.y))/r,1)),c={x:s.x/n,y:s.y/n},u={x:e[a-1].x*t[0],y:e[a-1].y*t[1]},l=0;l<n;++l)i.push([u.x+c.x*l,u.y+c.y*l]);b=i.length,m=new Float32Array(2*b),h=new Float32Array(2*b),_=new Float32Array(b),f=new Float32Array(b),d=new Float32Array(b);for(var g=0;g<b;++g)M(i[g],g)}(z,k,a),L.enable(L.BLEND),y?L.blendFuncSeparate(L.ONE_MINUS_DST_ALPHA,L.ONE,L.ONE_MINUS_DST_ALPHA,L.ONE):L.blendFuncSeparate(L.SRC_ALPHA,L.ONE,L.ONE,L.ONE),R||(R=new N("attribute vec4 vPosition;            attribute float pointSize;            attribute float attrOpacity;            attribute float attrTexNum;            attribute vec2 attrDirection;            varying float opacity;            varying float texNum;            varying vec2 direction;            uniform mat4 uMat;            void main()            {                gl_PointSize = pointSize;                gl_Position = (uMat * vPosition);                opacity = attrOpacity;                texNum = attrTexNum;                direction = attrDirection;            }","varying float opacity;                    varying float texNum;                    varying vec2 direction;                    uniform sampler2D star1;                    uniform float reOpacity;            void main()            {               \t\tvec4 dst;               \t\tfloat vn = floor(texNum / 4.0);                    float hn = floor(texNum - vn*4.0);                    vec2 coord = (gl_PointCoord - vec2(0.5));                    coord = vec2(coord.x*direction.x - coord.y*direction.y,                            coord.x*direction.y + coord.y*direction.x);                             coord = coord + vec2(0.5, 0.5);                                                  coord = coord / 4.0;                    coord.x = coord.x + vn*0.25;                    coord.y = coord.y + hn*0.25;                                        dst = texture2D(star1,coord);                                        dst.a = dst.a*opacity;                    if(reOpacity>1.0)                        dst.xyz = dst.xyz*vec3(dst.a);                                    gl_FragColor =dst;            }",E.m_context)),E.context().bindFramebuffer(E.context().FRAMEBUFFER,A.m_frame_buffer),E.context().framebufferTexture2D(E.context().FRAMEBUFFER,E.context().COLOR_ATTACHMENT0,E.context().TEXTURE_2D,S.current(),0),E.context().useProgram(R.program),F=L.getAttribLocation(R.program,"vPosition"),L.enableVertexAttribArray(F),s||(s=L.createBuffer(L.ARRAY_BUFFER)),L.bindBuffer(L.ARRAY_BUFFER,s),L.vertexAttribPointer(F,2,L.FLOAT,!1,0,0),I=L.getAttribLocation(R.program,"pointSize"),L.enableVertexAttribArray(I),n||(n=L.createBuffer(L.ARRAY_BUFFER)),L.bindBuffer(L.ARRAY_BUFFER,n),L.vertexAttribPointer(I,1,L.FLOAT,!1,0,0),P=L.getAttribLocation(R.program,"attrOpacity"),L.enableVertexAttribArray(P),c||(c=L.createBuffer(L.ARRAY_BUFFER)),L.bindBuffer(L.ARRAY_BUFFER,c),L.vertexAttribPointer(P,1,L.FLOAT,!1,0,0),B=L.getAttribLocation(R.program,"attrTexNum"),L.enableVertexAttribArray(B),u||(u=L.createBuffer(L.ARRAY_BUFFER)),L.bindBuffer(L.ARRAY_BUFFER,u),L.vertexAttribPointer(B,1,L.FLOAT,!1,0,0),U=L.getAttribLocation(R.program,"attrDirection"),L.enableVertexAttribArray(U),l||(l=L.createBuffer(L.ARRAY_BUFFER)),L.bindBuffer(L.ARRAY_BUFFER,l),L.vertexAttribPointer(U,2,L.FLOAT,!1,0,0),L.bindBuffer(L.ARRAY_BUFFER,s),L.bufferData(L.ARRAY_BUFFER,m,L.STATIC_DRAW),L.bindBuffer(L.ARRAY_BUFFER,n),L.bufferData(L.ARRAY_BUFFER,_,L.STATIC_DRAW),L.bindBuffer(L.ARRAY_BUFFER,c),L.bufferData(L.ARRAY_BUFFER,f,L.STATIC_DRAW),L.bindBuffer(L.ARRAY_BUFFER,u),L.bufferData(L.ARRAY_BUFFER,d,L.STATIC_DRAW),L.bindBuffer(L.ARRAY_BUFFER,l),L.bufferData(L.ARRAY_BUFFER,h,L.STATIC_DRAW),!(r=E.get_resource_texture(p)))throw new error(p);var G={};G.star1=r.texture,R.textures(G);var O={};O.uMat=o,O.reOpacity=y?2:0,R.uniforms(O),E.context().viewport(0,0,A.m_width,A.m_height),E.context().drawArrays(E.context().POINTS,0,b),E.context().disable(E.context().BLEND)}catch(e){throw"CGEPTPTemplete::gpu_process"}finally{D.destroy(),E.release_resource_texture(r)}var q,X,j,Y,V,H,W,Z,J},A}};return e}function J(){var e={name:"magicDust",create:function(e){var t,r,o,i,a,s,n=0,c=0,u=0,l=2e3,m=e,h=0,_={};return(_=S()).destroy=function(){h&&(h.destroy(),h=0)},_.gpu_process=function(e,_,f){try{f.m_width==c&&f.m_height==u||(D=0,k=f.m_width,F=0,I=f.m_height,t=[2/(U=k-D),0,0,0,0,2/(L=I-F),0,0,0,0,-2/(G=(B=1)-(P=-1)),0,-(k+D)/U,-(I+F)/L,-(B+P)/G,1],c=f.m_width,u=f.m_height),function(e,t,r){l=e.fetch_float(),e.fetch_string(),n=e.fetch_string(),e.fetch_string()}(e,f.m_width,f.m_height);var d=new Float32Array(2*l),g=new Float32Array(2*l),v=new Float32Array(l),x=new Float32Array(l),p=new Float32Array(l),b=[];b[0]=f.m_width,b[1]=f.m_height;var y=m.context();!function(e,t,r,o,i,a,s,n,c){n.bindFramebuffer(n.FRAMEBUFFER,c),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);for(var u=0;u<l;++u){e[2*u]=Math.random()*a[0],e[2*u+1]=Math.random()*a[1];var m=2*Math.PI*Math.random();t[2*u]=Math.cos(m),t[2*u+1]=Math.sin(m);var h=new Uint8Array(4);n.readPixels(e[2*u],e[2*u+1],1,1,n.RGBA,n.UNSIGNED_BYTE,h);var _=.299*h[0]+.587*h[1]+.114*h[2];r[u]=60*Math.random(),o[u]=_<10?0:_<80?2*(Math.random()+Math.random()+Math.random()+Math.random()+Math.random()+Math.random()-4.5):Math.random()+Math.random()-1+_/256*.5,o[u]=Math.min(1,o[u]),i[u]=.5}}(d,g,v,x,p,b,_.current(),y,f.m_frame_buffer),m.context().enable(m.context().BLEND),m.context().blendFunc(m.context().ONE,m.context().ONE);var w,T,C,S,E,z=he(_);h||(h=new N("attribute vec4 vPosition;            attribute float pointSize;            attribute float attrOpacity;            attribute float attrTexNum;            attribute vec2 attrDirection;            varying float opacity;            varying float texNum;            varying vec2 direction;            uniform mat4 uMat;            void main()            {                gl_PointSize = pointSize;                gl_Position = (uMat * vPosition);                opacity = attrOpacity;                texNum = attrTexNum;                direction = attrDirection;            }","varying float opacity;                    varying float texNum;                    varying vec2 direction;                    uniform sampler2D star1;            void main()            {               \t\tvec4 dst;               \t\tvec2 coord = (gl_PointCoord - vec2(0.5));                    coord = vec2(coord.x*direction.x - coord.y*direction.y,                            coord.x*direction.y + coord.y*direction.x);                             coord = coord + vec2(0.5, 0.5);                    dst = texture2D(star1,coord);                    dst.xyz = dst.xyz*vec3(opacity);                                    gl_FragColor =dst;            }",m.m_context)),m.context().bindFramebuffer(m.context().FRAMEBUFFER,f.m_frame_buffer),m.context().framebufferTexture2D(m.context().FRAMEBUFFER,m.context().COLOR_ATTACHMENT0,m.context().TEXTURE_2D,_.new_temporary(),0),m.context().useProgram(h.program),w=y.getAttribLocation(h.program,"vPosition"),y.enableVertexAttribArray(w),r=y.createBuffer(y.ARRAY_BUFFER),y.bindBuffer(y.ARRAY_BUFFER,r),y.vertexAttribPointer(w,2,y.FLOAT,!1,0,0),T=y.getAttribLocation(h.program,"pointSize"),y.enableVertexAttribArray(T),o=y.createBuffer(y.ARRAY_BUFFER),y.bindBuffer(y.ARRAY_BUFFER,o),y.vertexAttribPointer(T,1,y.FLOAT,!1,0,0),C=y.getAttribLocation(h.program,"attrOpacity"),y.enableVertexAttribArray(C),i=y.createBuffer(y.ARRAY_BUFFER),y.bindBuffer(y.ARRAY_BUFFER,i),y.vertexAttribPointer(C,1,y.FLOAT,!1,0,0),S=y.getAttribLocation(h.program,"attrTexNum"),y.enableVertexAttribArray(S),a=y.createBuffer(y.ARRAY_BUFFER),y.bindBuffer(y.ARRAY_BUFFER,a),y.vertexAttribPointer(S,1,y.FLOAT,!1,0,0),E=y.getAttribLocation(h.program,"attrDirection"),y.enableVertexAttribArray(E),s=y.createBuffer(y.ARRAY_BUFFER),y.bindBuffer(y.ARRAY_BUFFER,s),y.vertexAttribPointer(E,2,y.FLOAT,!1,0,0),y.bindBuffer(y.ARRAY_BUFFER,r),y.bufferData(y.ARRAY_BUFFER,d,y.STATIC_DRAW),y.bindBuffer(y.ARRAY_BUFFER,o),y.bufferData(y.ARRAY_BUFFER,v,y.STATIC_DRAW),y.bindBuffer(y.ARRAY_BUFFER,i),y.bufferData(y.ARRAY_BUFFER,x,y.STATIC_DRAW),y.bindBuffer(y.ARRAY_BUFFER,a),y.bufferData(y.ARRAY_BUFFER,p,y.STATIC_DRAW),y.bindBuffer(y.ARRAY_BUFFER,s),y.bufferData(y.ARRAY_BUFFER,g,y.STATIC_DRAW);var R=m.get_resource_texture(n);if(!R)throw new error(n);var M={};M.star1=R.texture,h.textures(M);var A={};A.uMat=t,h.uniforms(A),m.context().viewport(0,0,f.m_width,f.m_height),m.context().drawArrays(m.context().POINTS,0,l),m.context().disable(m.context().BLEND),_.push_to_current()}catch(e){throw"CGEPTPTemplete::gpu_process"}finally{z.destroy()}var D,k,F,I,P,B,U,L,G},_}};return e}function K(){var e={name:"toneEnhance",create:function(e){var t=S();return t.m_context=e,t.m_pyramid_gpu=0,t.m_width=0,t.m_height=0,t.m_last_src="",t.m_factor=z(),t.m_up_resize_filter=function(e){var t=0,r={m_m:new Array(4),m_al:0,a_au:0,m_bl:0,m_bu:0,destroy:function(){t&&t.destroy(),t=0}};return r.m_context=e,r.s_fshToneEnhanceResizeProc="\t\tvarying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D hisImageTexture;    uniform vec4 m;    uniform float al;    uniform float au;    uniform float bl;    uniform float bu;    void main()    {        vec4 hst = texture2D(hisImageTexture,textureCoordinate * m.xy + m.zw);        vec3 h = vec3((hst.x + hst.y/2.0),(1.0 + hst.x + hst.y - hst.z - hst.w)/2.0,(1.0 - hst.z/2.0 - hst.w));        vec3 ha = h - vec3(0.25,0.5,0.75);        float a = dot(ha , vec3(288.0/77.0,256.0/77.0,96.0/77.0));        a = max (al,min(au,a));        vec3 hb = h - vec3(0.25,0.5,0.75) - vec3(a) * vec3(9.0/64.0,1.0/8.0,3.0/64.0);        float b = dot(hb , vec3(-96.0/77.0,-256.0/77.0,-288.0/77.0));        b = max(bl,min(bu,b));        vec3 f = vec3(1.0,-2.0,1.0) * vec3(a) + vec3(1.0,-1.0,0.0) * vec3(b);        vec4 src = texture2D(inputImageTexture,textureCoordinate);        float v = src.w + (- 0.5 + src.z)*(1.0 / 255.0);        v = ((f.x * v + f.y) * v + (f.z + 1.0)) * v;        v = clamp(v,0.0,1.0);        src.w = v;        gl_FragColor = src;    }",r.gpu_process=function(e,r,o,i,a){t||(t=new N(null,this.s_fshToneEnhanceResizeProc,this.m_context.m_context));var s=fe(this.m_context.m_context,null,t,o,i,a);s.shader_texture("inputImageTexture",r[0]),s.shader_texture("hisImageTexture",r[1]);var n={};if(n.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],n.al=this.m_al,n.au=this.m_au,n.bl=this.m_bl,n.bu=this.m_bu,s.shader.uniforms(n),s.draw_to(e),this.m_context.m_context.getError())throw"CGEPTPTemplate::gpu_process"},r}(e),t.m_up_filter=function(e){var t=0,r=0,o={m_fac:0,destroy:function(){r&&(r.destroy(),r=0),t&&(t.destroy(),t=0)}};return o.m_context=e,o.s_fshFragToneEnhanceUpProc="\tvarying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D subImageTexture;    uniform float fac;    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);        vec4 sub = texture2D(subImageTexture,textureCoordinate);        vec4 dst = src* vec4(fac) + vec4(1.0 - fac) * sub;        gl_FragColor = dst;    }",o.gpu_process=function(e,t,o,i,a){r||(r=new N(null,this.s_fshFragToneEnhanceUpProc,this.m_context.m_context));var s=fe(this.m_context.m_context,null,r,o,i,a);s.shader_texture("inputImageTexture",t[0]),s.shader_texture("subImageTexture",t[1]);var n={};if(n.fac=this.m_fac,s.shader.uniforms(n),s.draw_to(e),this.m_context.m_context.getError())throw"CGEPTPTemplate::gpu_process"},o}(e),t.m_hst_filter=function(e){var t=X();return t.m_context=e,t.m_shader=0,t.s_fshFragToneEnhanceHistProc="varying vec2 textureCoordinate;            uniform sampler2D inputImageTexture;            uniform vec4 m;            void main()            {                vec2 cod = textureCoordinate * m.xy + m.zw;                cod = max(cod,-cod);                cod = min(cod,vec2(2.0)-cod);                vec4 src = texture2D(inputImageTexture, cod);                vec4 hst = vec4(src.w);                hst = (hst - vec4(-0.25,0.0,0.5,0.75)) * vec4(8.0);                hst = min(max(hst,0.0),4.0);                hst = abs( hst - vec4(2.0));                hst = hst - vec4(1.0);                hst = hst * (hst * hst - vec4(3.0))* vec4(0.25) + vec4(0.5);                gl_FragColor = hst;            }",t.gpu_process=function(e,t,r,o,i){this.m_shader||(this.m_shader=new N(null,this.s_fshFragToneEnhanceHistProc,this.m_context.m_context));var a=fe(this.m_context.m_context,null,this.m_shader,r,o,i);a.shader_texture("inputImageTexture",t);var s={};if(s.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],a.shader.uniforms(s),a.draw_to(e),this.m_context.m_context.getError())throw"CGEPTPTemplate::gpu_process"},t.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=0)},t}(e),t.m_down_filter=function(e){var t=q();return t.m_context=e,t.shader_procession=function(){return"dst = get_sample(vec2(0.0,0.0));"},t}(e),t.m_resize_filter=j(!0,e),t.destroy=function(){this.clear(),this.m_up_resize_filter.destroy(),this.m_up_filter.destroy(),this.m_hst_filter.destroy(),this.m_down_filter.destroy(),this.m_resize_filter.destroy()},t.clear=function(){this.m_pyramid_gpu&&(this.m_pyramid_gpu.destroy(),this.m_pyramid_gpu=0)},t.size_change=function(e,t){var r,o,i;this.m_width==e&&this.m_height==t||(this.m_width=e,this.m_height=t,this.m_last_src="",r=this.m_factor,o=this.m_width,(i=this.m_height)<=0||o<=0||(r.src_width=o,r.src_height=i,r.dst_width=1,r.dst_height=1,o>i?(r.emb_width=1,r.x_start=0,r.emb_height=1/o*i,r.y_start=.5*(1-r.emb_height)):(r.emb_height=1,r.y_start=0,r.emb_width=1/i*o,r.x_start=.5*(1-r.emb_width))),this.clear())},t.init=function(e){if(e.assume_symbol("dark"),this.m_dark_low=e.fetch_float(-1,3),this.m_dark_up=e.fetch_float(-1,3),this.m_dark_low>this.m_dark_up)throw"dark1 must less than dark2";if(e.assume_symbol("light"),this.m_light_low=e.fetch_float(-1,3),this.m_light_up=e.fetch_float(-1,3),this.m_light_low>this.m_light_up)throw"light1 must less than light2";this.m_blur_level=1,this.m_blur_factor=3.5,e.test_symbol("blurFactor")&&(this.m_blur_level+=6*e.fetch_float(0,1),this.m_blur_factor*=Math.pow(1/16,e.fetch_float(0,1)))},t.draw_up_textures=function(e,t){e.map_create(1);for(var r=new Array(e.m_images.length),o=0,i=0;i<r.length;++i){var a=(i-this.m_blur_level)/this.m_blur_factor,s=Math.exp(-a*a);r[i]=s/(o+s),o+=s}for(i=1;i<e.m_images.length;++i){this.m_up_filter.m_fac=r[i];var n=1;1==i&&(n=0);var c=[e.m_images[i][0],e.m_images[i-1][n]];this.filter(this.m_up_filter,e.m_images[i][1],c,e.m_size[i].width,e.m_size[i].height,t)}},t.draw_temp_textures=function(e,t,r){e.load_from(this.m_hst_filter,t,r),e.draw_downward(this.m_down_filter,r)},t.process=function(e,t,r,o,i,a,s){e.get_log()!=this.m_last_src&&(this.draw_temp_textures(t,o,s),this.m_last_src=e.get_log()),this.init(e),this.draw_up_textures(t,s),this.m_factor.get_rev_trans(this.m_up_resize_filter.m_m),this.m_up_resize_filter.m_al=this.m_dark_low,this.m_up_resize_filter.m_au=this.m_dark_up,this.m_up_resize_filter.m_bl=this.m_light_low,this.m_up_resize_filter.m_bu=this.m_light_up;var n=new Array(3);n[0]=o,n[1]=t.m_images[t.m_images.length-1][1],this.filter(this.m_up_resize_filter,r,n,i,a,s)},t.gpu_process=function(e,t,r){try{he(t),this.size_change(r.m_width,r.m_height),this.m_pyramid_gpu||(this.m_pyramid_gpu=M(this.m_context.context(),this.m_factor,1025,!0),this.m_last_src=0),this.process(e,this.m_pyramid_gpu,t.new_temporary(),t.current(),r.m_width,r.m_height,r.m_frame_buffer),t.push_to_current()}catch(e){throw"CGEPTPTemplete::gpu_process"}},t}};return e}function Q(){var e={name:"imageMatting",create:function(e){var t,r,o,i,a,s,n,c,u,l,m,h=0,_=0,f=0,d=0,g=0,v=0,x=0,p=0;l=0,c=0,a=0,s=0,u=e,n=z();var b=function(e){var t=e,r=0,o={m_factor:0,s_fshFragImageMattingDownsize32Proc:"  varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate + sft * cd);    }    void main()    {        vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));        src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));        src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));        src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));        src *= vec4((255.0 / (256.0*65536.0)), (255.0 / (256.0*256.0)), (255.0 / 256.0), 255.0) * 0.25;        float dlum = (src.x + src.y + src.z + src.w)*65536.0;        float lum8 = dlum - floor(dlum);        dlum = dlum / 256.0;        float lum8_16 = dlum - floor(dlum);        dlum = dlum / 256.0;        float lum24_32 = floor(dlum);        float lum16_24 = dlum - lum24_32;        src.x = lum8*(256.0 / 255.0);        src.y = lum8_16*(256.0 / 255.0);        src.z = lum16_24*(256.0 / 255.0);        src.w = lum24_32 / 255.0;        gl_FragColor = src;    }    ",gpu_process:function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragImageMattingDownsize32Proc,t.m_context));var n=fe(t.m_context,null,r,i,a,s);t.m_context.bindTexture(t.m_context.TEXTURE_2D,o),t.m_context.texParameteri(t.m_context.TEXTURE_2D,t.m_context.TEXTURE_MIN_FILTER,t.m_context.NEAREST),t.m_context.texParameteri(t.m_context.TEXTURE_2D,t.m_context.TEXTURE_MAG_FILTER,t.m_context.NEAREST),n.shader_texture("inputImageTexture",o);var c={};if(c.sft=[1/i,1/a],n.shader.uniforms(c),n.draw_to(e),t.m_context.bindTexture(t.m_context.TEXTURE_2D,o),t.m_context.texParameteri(t.m_context.TEXTURE_2D,t.m_context.TEXTURE_MIN_FILTER,t.m_context.LINEAR),t.m_context.texParameteri(t.m_context.TEXTURE_2D,t.m_context.TEXTURE_MAG_FILTER,t.m_context.LINEAR),t.m_context.getError())throw"createFragNewStructureSharpenUpProc::gpu_process"},destroy:function(){r&&r.destroy(),r=0}};return o}(u),y=function(e){var t=e,r=0,o={m_m:[],s_fshFragImageMattingPaintingDownsizeProc:"  varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec4 m;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);    }    void main()    {        vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));        src *= vec4(0.25);        vec2 dlum = vec2(src.r, max(src.r, src.g))*256.0;        dlum = clamp(dlum, 0.0, 255.996);        vec2 fdlum = floor(dlum);        src.x = (dlum.x - fdlum.x)*(256.0 / 255.0);        src.y = fdlum.x / 255.0;        src.z = (dlum.y - fdlum.y)*(256.0 / 255.0);        src.w = fdlum.y / 255.0;        gl_FragColor = src;    }",gpu_process:function(e,o,i,a,s,n){r||(r=new N(null,this.s_fshFragImageMattingPaintingDownsizeProc,t.m_context));var c=fe(t.m_context,null,r,i,a,s);c.shader_texture("inputImageTexture",o[0]);var u={};if(u.m=this.m_m,u.sft=[1/i,1/a],c.shader.uniforms(u),c.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingPaintingDownSizeProc::gpu_process"},destroy:function(){r&&r.destroy(),r=0}};return o}(u),w=function(e){var t=e,r=0,o={m_m:[],s_fshFragNewStructureSharpenFator:"  \tvarying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec4 m;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);    }    void main()    {        vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));        src *= vec4(0.25);        float dlum = clamp(src.r*65536.0*256.0, 0.0, (65536.0 * 65536.0 - 1.0) / (256.0));        float lum8 = dlum - floor(dlum);        dlum = clamp(src.r*65536.0, 0.0, (65536.0*256.0 - 1.0) / (256.0));        float lum8_16 = dlum - floor(dlum);        dlum = clamp(src.r*256.0, 0.0, (65536.0 - 1.0) / (256.0));        float dlum24_32 = floor(dlum);        float dlum16_24 = dlum - dlum24_32;        src.x = lum8*(256.0 / 255.0);        src.y = lum8_16*(256.0 / 255.0);        src.z = dlum16_24*(256.0 / 255.0);        src.w = dlum24_32 / 255.0;        gl_FragColor = src;    }    ",gpu_process:function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragNewStructureSharpenFator,t.m_context));var n=fe(t.m_context,null,r,i,a,s);n.shader_texture("inputImageTexture",o[0]);var c={};if(c.m=this.m_m,c.sft=[1/i,1/a],n.shader.uniforms(c),n.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingPaintingDownSize1_0Proc::gpu_process"},destroy:function(){r&&r.destroy(),r=0}};return o}(u),T=function(e){var t=e,r=0,o=X();return o.s_fshFragImageMattingPainting1_1DownsizeProc="  varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec4 m;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);    }    void main()    {        vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));        src *= vec4(0.25);        float dlum = clamp(max(src.r,src.g)*65536.0*256.0, 0.0, (65536.0 * 65536.0 - 1.0) / (256.0));        float lum8 = dlum - floor(dlum);        dlum = clamp(max(src.r, src.g)*65536.0, 0.0, (65536.0*256.0 - 1.0) / (256.0));        float lum8_16 = dlum - floor(dlum);        dlum = clamp(max(src.r, src.g)*256.0, 0.0, (65536.0 - 1.0) / (256.0));        float dlum24_32 = floor(dlum);        float lum16_24 = dlum - dlum24_32;        src.x = lum8*(256.0 / 255.0);        src.y = lum8_16*(256.0 / 255.0);        src.z = lum16_24*(256.0 / 255.0);        src.w = dlum24_32 / 255.0;        gl_FragColor = src;    }",o.gpu_process=function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragImageMattingPainting1_1DownsizeProc,t.m_context));var n=fe(t.m_context,null,r,i,a,s);n.shader_texture("inputImageTexture",o[0]);var c={};if(c.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],c.sft=[1/i,1/a],n.shader.uniforms(c),n.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingPainting1_1DownSizeProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(u),C=function(e){var t=e,r=0,o=X();return o.m_m=[],o.s_fshFragImageMattingDownsizeProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec4 m;    uniform vec2 sft;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);    }    void main()    {        vec4 src = get_sample(vec2(-3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, -3.0 / 8.0));        src += get_sample(vec2(-3.0 / 8.0, 3.0 / 8.0));        src += get_sample(vec2(3.0 / 8.0, 3.0 / 8.0));        src = src*vec4(0.25);        gl_FragColor = src;    }",o.gpu_process=function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragImageMattingDownsizeProc,t.m_context));var n=fe(t.m_context,null,r,i,a,s);n.shader_texture("inputImageTexture",o[0]);var c={};if(c.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],c.sft=[1/i,1/a],n.shader.uniforms(c),n.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingDownSizeProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(u),E=B(u),R=function(e){var t=e,r=[0,0],o=X();o.m_filter_num=0,o.m_esp=0;var i=["    varying vec2 textureCoordinate;    uniform sampler2D painted1_0Texture;    uniform sampler2D painted1_1Texture;    uniform sampler2D srcTexture;    uniform vec2 sft;    uniform float esp;    vec4 get_sample(vec2 cd)    {        return texture2D(srcTexture, textureCoordinate + sft * cd);    }    float get_painted_sample(vec2 cd)    {        vec4 p1_0Src = texture2D(painted1_0Texture, textureCoordinate + sft * cd)*vec4((255.0 / (256.0*65536.0)), (255.0 / 65536.0), (255.0 / 256.0), 255.0);        vec4 p1_1Src = texture2D(painted1_1Texture, textureCoordinate + sft * cd)*vec4((255.0 / (256.0*65536.0)), (255.0 / 65536.0), (255.0 / 256.0), 255.0);        float p1_0 = (p1_0Src.x + p1_0Src.y + p1_0Src.z + p1_0Src.w);        float p1_1 = (p1_1Src.x + p1_1Src.y + p1_1Src.z + p1_1Src.w);        if (p1_1 <= 0.0) return 0.5;        return p1_0 / p1_1;    }    void main()    {        float res1 = get_painted_sample(vec2(-1.0, -1.0));        float res = res1;        float res2 = get_painted_sample(vec2(0.0, -1.0));        res += res2;        float res3 = get_painted_sample(vec2(1.0, -1.0));        res += res3;                float res4 = get_painted_sample(vec2(-1.0, 0.0));        res += res4;        float res5 = get_painted_sample(vec2(0.0, 0.0));        res += res5;        float res6 = get_painted_sample(vec2(1.0, 0.0));        res += res6;                float res7 = get_painted_sample(vec2(-1.0, 1.0));        res += res7;        float res8 = get_painted_sample(vec2(0.0, 1.0));        res += res8;        float res9 = get_painted_sample(vec2(1.0, 1.0));        res += res9;                res *=1.0 / 9.0;        float stp = res;                vec4 src1 = get_sample(vec2(-1.0, -1.0));        vec4 src2 = get_sample(vec2(0.0, -1.0));        vec4 src3 = get_sample(vec2(1.0, -1.0));                vec4 src4 = get_sample(vec2(-1.0, 0.0));        vec4 src5 = get_sample(vec2(0.0, 0.0));        vec4 src6 = get_sample(vec2(1.0, 0.0));                vec4 src7 = get_sample(vec2(-1.0, 1.0));        vec4 src8 = get_sample(vec2(0.0, 1.0));        vec4 src9 = get_sample(vec2(1.0, 1.0));                vec4 tsrc = src1 + src2 + src3 + src4 + src5 + src6 + src7 + src8 + src9;        tsrc *= vec4(1.0 / 9.0);        float tr = tsrc.r;        float tg = tsrc.g;        float tb = tsrc.b;        float trg = src1.r*src1.g + src2.r*src2.g + src3.r*src3.g + src4.r*src4.g + src5.r*src5.g + src6.r*src6.g + src7.r*src7.g + src8.r*src8.g + src9.r*src9.g;        trg *= (1.0 / 9.0);        float trb = src1.r*src1.b + src2.r*src2.b + src3.r*src3.b + src4.r*src4.b + src5.r*src5.b + src6.r*src6.b + src7.r*src7.b + src8.r*src8.b + src9.r*src9.b;        trb *= (1.0 / 9.0);        float tgb = src1.g*src1.b + src2.g*src2.b + src3.g*src3.b + src4.g*src4.b + src5.g*src5.b + src6.g*src6.b + src7.g*src7.b + src8.g*src8.b + src9.g*src9.b;        tgb *= (1.0 / 9.0);        vec4 tsrc2 = src1* src1 + src2* src2 + src3* src3 + src4* src4 + src5*src5 + src6*src6 + src7*src7 + src8*src8 + src9*src9;        tsrc2 *= vec4(1.0 / 9.0);        float tr2 = tsrc2.x;        float tg2 = tsrc2.y;        float tb2 = tsrc2.z;        vec4 tpsrc = src1*res1 + src2*res2 + src3*res3 + src4*res4+  src5*res5 + src6*res6 + src7*res7 + src8*res8 + src9*res9;        tpsrc *= vec4(1.0 / 9.0);        float tpr = tpsrc.x;        float tpg = tpsrc.y;        float tpb = tpsrc.z;        float brg = (trg  - tr * tg);        float brb = (trb  - tr * tb);        float bgb = (tgb  - tg * tb);        float br2 = tr2 - tr * tr + esp;        float bg2 = tg2 - tg * tg + esp;        float bb2 = tb2 - tb * tb + esp;        float ur = (tpr - stp * tr);        float ug = (tpg - stp * tg);        float ub = (tpb - stp * tb);        float bs = br2*bgb*bgb + bg2*brb*brb + bb2*brg*brg - 2.0 * bgb*brb*brg - bb2*bg2*br2;        float ar = (bgb*bgb - bb2*bg2)*ur + (bb2*brg - bgb*brb)*ug + (bg2*brb - bgb*brg)*ub;        float ag = (bb2*brg - bgb*brb)*ur + (brb*brb - bb2*br2)*ug + (bgb*br2 - brb*brg)*ub;        float ab = (bg2*brb - bgb*brg)*ur + (bgb*br2 - brb*brg)*ug + (brg*brg - bg2*br2)*ub;        bs = 1.0 / bs;        ar *= bs;        ag *= bs;        ab *= bs;        vec2 arag = vec2((ar + 64.0)*2.0, (ag + 64.0)*2.0);        arag = clamp(arag, 0.0, 255.996);        vec2 farag = floor(arag);        vec4 dst;        dst.xz = arag - farag;        dst.yw = farag;        dst *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);           if (dst.x > (513.0 / 512.0))            {                dst.x = 0.0;                dst.y += (1.0 / 255.0);            }            if (dst.z > (513.0 / 512.0))            {                dst.z = 0.0;                dst.w += (1.0 / 255.0);            }        gl_FragColor = dst;    }        ","    varying vec2 textureCoordinate;    uniform sampler2D painted1_0Texture;    uniform sampler2D painted1_1Texture;    uniform sampler2D srcTexture;    uniform vec2 sft;    uniform float esp;    vec4 get_sample(vec2 cd)    {        return texture2D(srcTexture, textureCoordinate + sft * cd);    }    float get_painted_sample(vec2 cd)    {        vec4 p1_0Src = texture2D(painted1_0Texture, textureCoordinate + sft * cd)*vec4((255.0 / (256.0*65536.0)), (255.0 / 65536.0), (255.0 / 256.0), 255.0);        vec4 p1_1Src = texture2D(painted1_1Texture, textureCoordinate + sft * cd)*vec4((255.0 / (256.0*65536.0)), (255.0 / 65536.0), (255.0 / 256.0), 255.0);        float p1_0 = (p1_0Src.x + p1_0Src.y + p1_0Src.z + p1_0Src.w);        float p1_1 = (p1_1Src.x + p1_1Src.y + p1_1Src.z + p1_1Src.w);        if (p1_1 <= 0.0) return 0.5;        if (p1_0 <= 0.0) return 0.0;        return p1_0 / p1_1;    }    void main()    {        float res1 = get_painted_sample(vec2(-1.0, -1.0));        float res = res1;        float res2 = get_painted_sample(vec2(0.0, -1.0));        res += res2;        float res3 = get_painted_sample(vec2(1.0, -1.0));        res += res3;                float res4 = get_painted_sample(vec2(-1.0, 0.0));        res += res4;        float res5 = get_painted_sample(vec2(0.0, 0.0));        res += res5;        float res6 = get_painted_sample(vec2(1.0, 0.0));        res += res6;                float res7 = get_painted_sample(vec2(-1.0, 1.0));        res += res7;        float res8 = get_painted_sample(vec2(0.0, 1.0));        res += res8;        float res9 = get_painted_sample(vec2(1.0, 1.0));        res += res9;             res *= 1.0 / 9.0;        float stp = res;            vec4 src1 = get_sample(vec2(-1.0, -1.0));        vec4 src2 = get_sample(vec2(0.0, -1.0));        vec4 src3 = get_sample(vec2(1.0, -1.0));                vec4 src4 = get_sample(vec2(-1.0, 0.0));        vec4 src5 = get_sample(vec2(0.0, 0.0));        vec4 src6 = get_sample(vec2(1.0, 0.0));        vec4 src7 = get_sample(vec2(-1.0, 1.0));        vec4 src8 = get_sample(vec2(0.0, 1.0));        vec4 src9 = get_sample(vec2(1.0, 1.0));        vec4 tsrc = src1 + src2 + src3 + src4 + src5 + src6 + src7 + src8 + src9;        tsrc *= vec4(1.0 / 9.0);        float tr = tsrc.r;        float tg = tsrc.g;        float tb = tsrc.b;        float trg = src1.r*src1.g + src2.r*src2.g + src3.r*src3.g + src4.r*src4.g + src5.r*src5.g + src6.r*src6.g + src7.r*src7.g + src8.r*src8.g + src9.r*src9.g;        trg *= 1.0 / 9.0;        float trb = src1.r*src1.b + src2.r*src2.b + src3.r*src3.b + src4.r*src4.b + src5.r*src5.b + src6.r*src6.b + src7.r*src7.b + src8.r*src8.b + src9.r*src9.b;        trb *= 1.0 / 9.0;        float tgb = src1.g*src1.b + src2.g*src2.b + src3.g*src3.b + src4.g*src4.b + src5.g*src5.b + src6.g*src6.b + src7.g*src7.b + src8.g*src8.b + src9.g*src9.b;        tgb *= 1.0 / 9.0;        vec4 tsrc2 = src1* src1 + src2* src2 + src3* src3 + src4* src4 + src5*src5 + src6*src6 + src7*src7 + src8*src8 + src9*src9;        tsrc2 *= vec4(1.0 / 9.0);        float tr2 = tsrc2.x;        float tg2 = tsrc2.y;        float tb2 = tsrc2.z;        vec4 tpsrc = src1*res1 + src2*res2 + src3*res3 + src4*res4 + src5*res5 + src6*res6 + src7*res7 + src8*res8 + src9*res9;        tpsrc *= vec4(1.0 / 9.0);        float tpr = tpsrc.x;        float tpg = tpsrc.y;        float tpb = tpsrc.z;        float brg = (trg - tr * tg);        float brb = (trb - tr * tb);        float bgb = (tgb - tg * tb);        float br2 = tr2 - tr * tr + esp;        float bg2 = tg2 - tg * tg + esp;        float bb2 = tb2 - tb * tb + esp;        float ur = (tpr - stp * tr);        float ug = (tpg - stp * tg);        float ub = (tpb - stp * tb);        float bs = br2*bgb*bgb + bg2*brb*brb + bb2*brg*brg - 2.0 * bgb*brb*brg - bb2*bg2*br2;        float ar = (bgb*bgb - bb2*bg2)*ur + (bb2*brg - bgb*brb)*ug + (bg2*brb - bgb*brg)*ub;        float ag = (bb2*brg - bgb*brb)*ur + (brb*brb - bb2*br2)*ug + (bgb*br2 - brb*brg)*ub;        float ab = (bg2*brb - bgb*brg)*ur + (bgb*br2 - brb*brg)*ug + (brg*brg - bg2*br2)*ub;        bs = 1.0 / bs;        ar *= bs;        ag *= bs;        ab *= bs;        float b = (stp - ar*tr - ag*tg - ab*tb);        vec2 arag = vec2((ab + 64.0)*2.0, (b + 64.0)*2.0); arag = clamp(arag, 0.0, 255.996);        vec2 farag = floor(arag);        vec4 dst;        dst.xz = arag - farag;        dst.yw = farag;        dst *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);if (dst.x > (513.0 / 512.0))            {                dst.x = 0.0;                dst.y += (1.0 / 255.0);            }            if (dst.z > (513.0 / 512.0))            {                dst.z = 0.0;                dst.w += (1.0 / 255.0);            }        gl_FragColor = dst;    }"];return o.gpu_process=function(e,o,a,s,n){r[this.m_filter_num]||(r[this.m_filter_num]=new N(null,i[this.m_filter_num],t.m_context));var c=fe(t.m_context,null,r[this.m_filter_num],a,s,n);c.shader_texture("painted1_0Texture",o[0]),c.shader_texture("painted1_1Texture",o[1]),c.shader_texture("srcTexture",o[2]);var u={};if(u.esp=this.m_esp,u.sft=[1/a,1/s],c.shader.uniforms(u),c.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingDownSizeProc::gpu_process"},o.destroy=function(){r[0]&&(r[0].destroy(),r[0]=0),r[1]&&(r[1].destroy(),r[1]=0)},o}(u),A=function(e){var t=e,r=0,o=X();return o.m_fac=0,o.s_fshFragImageMattingGuideMapProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D axayImageTexture;    uniform sampler2D azbImageTexture;    uniform float fac;    uniform vec2 sft;    uniform vec4 m;    vec2 get_axay_sample(vec2 cd)    {        vec4 axay = texture2D(axayImageTexture, textureCoordinate*m.xy+m.zw + sft * cd)*        vec4((255.0 / 256.0), 255.0, (255.0 / 256.0), 255.0);        return vec2((axay.x + axay.y)/2.0 - 64.0, (axay.z + axay.w)/2.0 - 64.0);    }    vec2 get_azb_sample(vec2 cd)    {        vec4 azb = texture2D(azbImageTexture, textureCoordinate*m.xy+m.zw + sft * cd)*        vec4((255.0 / 256.0), 255.0, (255.0 / 256.0), 255.0);        return vec2((azb.x + azb.y)/2.0 - 64.0, (azb.z + azb.w)/2.0 - 64.0);    }    void main()    {        float axSum=0.0, aySum=0.0, azSum=0.0, bSum=0.0;        for (float i = -1.0; i <= 1.0;++i)        for (float n = -1.0; n <= 1.0; ++n)        {            vec2 axay = get_axay_sample(vec2(i, n));            vec2 azb = get_azb_sample(vec2(i, n));            axSum += axay.x;            aySum += axay.y;            azSum += azb.x;            bSum += azb.y;        }        float ax = axSum / 9.0;        float ay = aySum / 9.0;        float az = azSum / 9.0;        float b = bSum / 9.0;        vec4 src = texture2D(inputImageTexture, textureCoordinate);        vec4 dst;        dst.x = (ax*src.x + ay*src.y + az*src.z + b);        gl_FragColor = dst;        if(fac<0.5)return;        dst.x = float(dst.x>0.5);        gl_FragColor = dst;    }",o.gpu_process=function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragImageMattingGuideMapProc,t.m_context));var n=fe(t.m_context,null,r,i,a,s);n.shader_texture("inputImageTexture",o[0]),n.shader_texture("axayImageTexture",o[1]),n.shader_texture("azbImageTexture",o[2]);var c={};if(c.fac=this.m_fac,c.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],c.sft=[1/i,1/a],n.shader.uniforms(c),n.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingDownSizeProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(u),D=function(e){var t=e,r=[0,0],o=X();o.m_filter_num=0,o.m_esp=0,o.m_blend_flag=0,o.m_fac=0;var i=["    varying vec2 textureCoordinate;    uniform sampler2D srcTexture;    uniform sampler2D subTexture;    uniform vec2 sft;    uniform float esp;    uniform float bf;uniform float fac;    vec4 get_sample(vec2 cd)    {        return texture2D(srcTexture, textureCoordinate + sft * cd);    }    float get_painted_sample(vec2 cd,float p)    { float res = texture2D(subTexture, textureCoordinate + sft * cd).x;    res =  clamp(res*(1.0 + fac) - 0.5*fac, 0.0, 1.0);p = p*255.0 - 1.0;    if(p>-0.5)res = p/254.0;    return res;    }    void main()    {        vec4 src1 = get_sample(vec2(-1.0, -1.0));        vec4 src2 = get_sample(vec2(0.0, -1.0));        vec4 src3 = get_sample(vec2(1.0, -1.0));                vec4 src4 = get_sample(vec2(-1.0, 0.0));        vec4 src5 = get_sample(vec2(0.0, 0.0));        vec4 src6 = get_sample(vec2(1.0, 0.0));                vec4 src7 = get_sample(vec2(-1.0, 1.0));        vec4 src8 = get_sample(vec2(0.0, 1.0));        vec4 src9 = get_sample(vec2(1.0, 1.0));        float res1 = get_painted_sample(vec2(-1.0, -1.0),src1.a);        float res = res1;        float res2 = get_painted_sample(vec2(0.0, -1.0),src2.a);        res += res2;        float res3 = get_painted_sample(vec2(1.0, -1.0),src3.a);        res += res3;                float res4 = get_painted_sample(vec2(-1.0, 0.0),src4.a);        res += res4;        float res5 = get_painted_sample(vec2(0.0, 0.0),src5.a);        res += res5;        float res6 = get_painted_sample(vec2(1.0, 0.0),src6.a);        res += res6;                float res7 = get_painted_sample(vec2(-1.0, 1.0),src7.a);        res += res7;        float res8 = get_painted_sample(vec2(0.0, 1.0),src8.a);        res += res8;        float res9 = get_painted_sample(vec2(1.0, 1.0),src9.a);        res += res9;                res *=1.0 / 9.0;        float stp = res;                        vec4 tsrc = src1 + src2 + src3 + src4 + src5 + src6 + src7 + src8 + src9;        tsrc *= vec4(1.0 / 9.0);        float tr = tsrc.r;        float tg = tsrc.g;        float tb = tsrc.b;        float trg = src1.r*src1.g + src2.r*src2.g + src3.r*src3.g + src4.r*src4.g + src5.r*src5.g + src6.r*src6.g + src7.r*src7.g + src8.r*src8.g + src9.r*src9.g;        trg *= (1.0 / 9.0);        float trb = src1.r*src1.b + src2.r*src2.b + src3.r*src3.b + src4.r*src4.b + src5.r*src5.b + src6.r*src6.b + src7.r*src7.b + src8.r*src8.b + src9.r*src9.b;        trb *= (1.0 / 9.0);        float tgb = src1.g*src1.b + src2.g*src2.b + src3.g*src3.b + src4.g*src4.b + src5.g*src5.b + src6.g*src6.b + src7.g*src7.b + src8.g*src8.b + src9.g*src9.b;        tgb *= (1.0 / 9.0);        vec4 tsrc2 = src1* src1 + src2* src2 + src3* src3 + src4* src4 + src5*src5 + src6*src6 + src7*src7 + src8*src8 + src9*src9;        tsrc2 *= vec4(1.0 / 9.0);        float tr2 = tsrc2.x;        float tg2 = tsrc2.y;        float tb2 = tsrc2.z;        vec4 tpsrc = src1*res1 + src2*res2 + src3*res3 + src4*res4+  src5*res5 + src6*res6 + src7*res7 + src8*res8 + src9*res9;        tpsrc *= vec4(1.0 / 9.0);        float tpr = tpsrc.x;        float tpg = tpsrc.y;        float tpb = tpsrc.z;        float brg = (trg  - tr * tg);        float brb = (trb  - tr * tb);        float bgb = (tgb  - tg * tb);        float br2 = tr2 - tr * tr + esp;        float bg2 = tg2 - tg * tg + esp;        float bb2 = tb2 - tb * tb + esp;        float ur = (tpr - stp * tr);        float ug = (tpg - stp * tg);        float ub = (tpb - stp * tb);        float bs = br2*bgb*bgb + bg2*brb*brb + bb2*brg*brg - 2.0 * bgb*brb*brg - bb2*bg2*br2;        float ar = (bgb*bgb - bb2*bg2)*ur + (bb2*brg - bgb*brb)*ug + (bg2*brb - bgb*brg)*ub;        float ag = (bb2*brg - bgb*brb)*ur + (brb*brb - bb2*br2)*ug + (bgb*br2 - brb*brg)*ub;        float ab = (bg2*brb - bgb*brg)*ur + (bgb*br2 - brb*brg)*ug + (brg*brg - bg2*br2)*ub;        bs = 1.0 / bs;        ar *= bs;        ag *= bs;        ab *= bs;       vec2 arag = vec2((ar + 64.0)*2.0, (ag + 64.0)*2.0);            arag = clamp(arag, 0.0, 255.996);        vec2 farag = floor(arag);        vec4 dst;        dst.xz = arag - farag;        dst.yw = farag;        dst *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);            if (dst.x > (513.0 / 512.0))            {                dst.x = 0.0;                dst.y += (1.0 / 255.0);            }            if (dst.z > (513.0 / 512.0))        {            dst.z = 0.0;            dst.w += (1.0 / 255.0);            }        gl_FragColor = dst;    }        ","    varying vec2 textureCoordinate;    uniform sampler2D srcTexture;    uniform sampler2D subTexture;    uniform vec2 sft;    uniform float esp;     uniform float bf;uniform float fac;    vec4 get_sample(vec2 cd)    {        return texture2D(srcTexture, textureCoordinate + sft * cd);    }    float get_painted_sample(vec2 cd,float p)    { float res = texture2D(subTexture, textureCoordinate + sft * cd).x;    res =  clamp(res*(1.0 + fac) - 0.5*fac, 0.0, 1.0);p = p*255.0 - 1.0;       if(p>-0.5)res = p/254.0;    return res;    }    void main()    {       vec4 src1 = get_sample(vec2(-1.0, -1.0));        vec4 src2 = get_sample(vec2(0.0, -1.0));        vec4 src3 = get_sample(vec2(1.0, -1.0));                vec4 src4 = get_sample(vec2(-1.0, 0.0));        vec4 src5 = get_sample(vec2(0.0, 0.0));        vec4 src6 = get_sample(vec2(1.0, 0.0));                vec4 src7 = get_sample(vec2(-1.0, 1.0));        vec4 src8 = get_sample(vec2(0.0, 1.0));        vec4 src9 = get_sample(vec2(1.0, 1.0));        float res1 = get_painted_sample(vec2(-1.0, -1.0),src1.a);        float res = res1;        float res2 = get_painted_sample(vec2(0.0, -1.0),src2.a);        res += res2;        float res3 = get_painted_sample(vec2(1.0, -1.0),src3.a);        res += res3;                float res4 = get_painted_sample(vec2(-1.0, 0.0),src4.a);        res += res4;        float res5 = get_painted_sample(vec2(0.0, 0.0),src5.a);        res += res5;        float res6 = get_painted_sample(vec2(1.0, 0.0),src6.a);        res += res6;                float res7 = get_painted_sample(vec2(-1.0, 1.0),src7.a);        res += res7;        float res8 = get_painted_sample(vec2(0.0, 1.0),src8.a);        res += res8;        float res9 = get_painted_sample(vec2(1.0, 1.0),src9.a);        res += res9;                res *=1.0 / 9.0;        float stp = res;        vec4 tsrc = src1 + src2 + src3 + src4 + src5 + src6 + src7 + src8 + src9;        tsrc *= vec4(1.0 / 9.0);        float tr = tsrc.r;        float tg = tsrc.g;        float tb = tsrc.b;        float trg = src1.r*src1.g + src2.r*src2.g + src3.r*src3.g + src4.r*src4.g + src5.r*src5.g + src6.r*src6.g + src7.r*src7.g + src8.r*src8.g + src9.r*src9.g;        trg *= 1.0 / 9.0;        float trb = src1.r*src1.b + src2.r*src2.b + src3.r*src3.b + src4.r*src4.b + src5.r*src5.b + src6.r*src6.b + src7.r*src7.b + src8.r*src8.b + src9.r*src9.b;        trb *= 1.0 / 9.0;        float tgb = src1.g*src1.b + src2.g*src2.b + src3.g*src3.b + src4.g*src4.b + src5.g*src5.b + src6.g*src6.b + src7.g*src7.b + src8.g*src8.b + src9.g*src9.b;        tgb *= 1.0 / 9.0;        vec4 tsrc2 = src1* src1 + src2* src2 + src3* src3 + src4* src4 + src5*src5 + src6*src6 + src7*src7 + src8*src8 + src9*src9;        tsrc2 *= vec4(1.0 / 9.0);        float tr2 = tsrc2.x;        float tg2 = tsrc2.y;        float tb2 = tsrc2.z;        vec4 tpsrc = src1*res1 + src2*res2 + src3*res3 + src4*res4 + src5*res5 + src6*res6 + src7*res7 + src8*res8 + src9*res9;        tpsrc *= vec4(1.0 / 9.0);        float tpr = tpsrc.x;        float tpg = tpsrc.y;        float tpb = tpsrc.z;        float brg = (trg - tr * tg);        float brb = (trb - tr * tb);        float bgb = (tgb - tg * tb);        float br2 = tr2 - tr * tr + esp;        float bg2 = tg2 - tg * tg + esp;        float bb2 = tb2 - tb * tb + esp;        float ur = (tpr - stp * tr);        float ug = (tpg - stp * tg);        float ub = (tpb - stp * tb);        float bs = br2*bgb*bgb + bg2*brb*brb + bb2*brg*brg - 2.0 * bgb*brb*brg - bb2*bg2*br2;        float ar = (bgb*bgb - bb2*bg2)*ur + (bb2*brg - bgb*brb)*ug + (bg2*brb - bgb*brg)*ub;        float ag = (bb2*brg - bgb*brb)*ur + (brb*brb - bb2*br2)*ug + (bgb*br2 - brb*brg)*ub;        float ab = (bg2*brb - bgb*brg)*ur + (bgb*br2 - brb*brg)*ug + (brg*brg - bg2*br2)*ub;        bs = 1.0 / bs;        ar *= bs;        ag *= bs;        ab *= bs;        float b = (stp - ar*tr - ag*tg - ab*tb);        vec2 arag = vec2((ab + 64.0)*2.0, (b + 64.0)*2.0);        arag = clamp(arag, 0.0, 255.996);        vec2 farag = floor(arag);        vec4 dst;        dst.xz = arag - farag;        dst.yw = farag;        dst *= vec4((256.0 / 255.0), 1.0 / 255.0, (256.0 / 255.0), 1.0 / 255.0);        if (dst.x > (513.0 / 512.0))            {                dst.x = 0.0;                dst.y += (1.0 / 255.0);            }            if (dst.z > (513.0 / 512.0))            {                dst.z = 0.0;                dst.w += (1.0 / 255.0);            }        gl_FragColor = dst;    }"];return o.gpu_process=function(e,o,a,s,n){r[this.m_filter_num]||(r[this.m_filter_num]=new N(null,i[this.m_filter_num],t.m_context));var c=fe(t.m_context,null,r[this.m_filter_num],a,s,n);c.shader_texture("subTexture",o[0]),c.shader_texture("srcTexture",o[1]);var u={};if(u.bf=this.m_blend_flag,u.esp=this.m_esp,u.sft=[1/a,1/s],u.fac=this.m_fac,c.shader.uniforms(u),c.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingDownSizeProc::gpu_process"},o.destroy=function(){r[0]&&(r[0].destroy(),r[0]=0),r[1]&&(r[1].destroy(),r[1]=0)},o}(u),k=function(e){var t=e,r=0,o=X();return o.s_fshFragImageMattingForeIterationProc="\tvarying vec2 textureCoordinate;    uniform sampler2D textureAfterFilter;    void main()    {        vec4 dst = texture2D(textureAfterFilter, textureCoordinate);                dst.x = clamp(dst.x*1.4 - 0.2,0.0,1.0);        gl_FragColor = dst;    }",o.gpu_process=function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragImageMattingForeIterationProc,t.m_context));var n=fe(t.m_context,null,r,i,a,s);if(n.shader_texture("textureAfterFilter",o[0]),n.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingForeIterationProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(u),F=function(e){var t=e,r=0,o=X();return o.m_m=[],o.m_filter_flag=0,o.s_fshFragImageMattingIterationProc="\tvarying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D textureAfterFilter;    uniform vec4 m;    uniform vec2 sft;    uniform float filter_flag;    vec4 get_sample(vec2 cd)    {        return texture2D(inputImageTexture, textureCoordinate * m.xy + m.zw + sft * cd);    }    vec4 get_dst_sample(vec2 cd)    {        return texture2D(textureAfterFilter, textureCoordinate * m.xy + m.zw + sft * cd);    }    void main()    {        vec4 src = get_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));        src += get_sample(vec2(1.0 / 4.0, -1.0 / 4.0));        src += get_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));        src += get_sample(vec2(1.0 / 4.0, 1.0 / 4.0));        src = src*vec4(0.25);        src.r = float(src.r > 0.0);        src.g = float(src.g > 0.0);        vec4 dst = get_dst_sample(vec2(-1.0 / 4.0, -1.0 / 4.0));        dst += get_dst_sample(vec2(1.0 / 4.0, -1.0 / 4.0));        dst += get_dst_sample(vec2(-1.0 / 4.0, 1.0 / 4.0));        dst += get_dst_sample(vec2(1.0 / 4.0, 1.0 / 4.0));        dst = dst*vec4(0.25);        if (filter_flag > 0.5){            dst.r = float(dst.r>0.5);        }        src.r = src.r + max(min(dst.r*1.3-0.15, 1.0), 0.0) - src.g;        gl_FragColor = src;    }",o.gpu_process=function(e,o,i,a,s,n){r||(r=new N(null,this.s_fshFragImageMattingIterationProc,t.m_context));var c=fe(t.m_context,null,r,i,a,s);c.shader_texture("inputImageTexture",n),c.shader_texture("textureAfterFilter",o[0]);var u={};if(u.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],u.sft=[1/i,1/a],u.filter_flag=this.m_filter_flag,c.shader.uniforms(u),c.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingForeIterationProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(u),I=function(e){var t=e,r=0,o=X();return o.m_crop,o.m_rectangle,o.m_m=[],o.alpha_flag=0,o.s_fshFragImageMattingUpsizeProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D paintResTexture;    uniform sampler2D tempTexture;    uniform vec4 m;    uniform vec2 samplerSize;    uniform float alpha_flag;        uniform vec4 rectangle;    uniform float crop;    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);               float res = texture2D(paintResTexture, textureCoordinate).x;        if (alpha_flag < 0.5){            float line = texture2D(tempTexture, textureCoordinate*m.xy + m.zw).x*1.2 - 0.1;            line = clamp(line,0.0,1.0);            vec2 coord = textureCoordinate/samplerSize;            if(res>0.6&&(coord.x<4.0||coord.x>1.0/samplerSize.x-4.0||coord.y<4.0||coord.y>1.0/samplerSize.y-4.0))                                line = 0.6;             vec3 color = vec3(0.0/255.0,255.0/255.0,132.0/255.0);            vec3 dst = mix(src.xyz, vec3(1.0,0.0,54.0/255.0), (1.0 - res)*0.4);            dst = mix(dst, color, line*0.7);            vec4 dst4 = vec4(dst, mix(src.a,1.0,line));            gl_FragColor = dst4;            if(crop<0.5)return;        vec2 rc = textureCoordinate/samplerSize;        rc = rc - rectangle.xy;        float mi = min(rc.x,rc.y);        float mir = min(rectangle.z - rc.x,rectangle.w - rc.y);        mi = min(mi,mir);        if(mi<0.0)return;        if(mi>1.0)return;        color = vec3(172.0/255.0,151.0/255.0,94.0/255.0);        rc = rc/4.0 - floor(rc/4.0)- vec2(0.5);        float a = 0.0;        if(rc.x*rc.y>0.0)a = 1.0;        gl_FragColor = vec4(mix(dst4.xyz,color,a),1.0);        }        else            gl_FragColor = vec4(src.rgb*(src.a*res), src.a*res);    }",o.gpu_process=function(e,o,i,a,s,n){r||(r=new N(null,this.s_fshFragImageMattingUpsizeProc,t.m_context));var c=fe(t.m_context,null,r,i,a,s);c.shader_texture("inputImageTexture",o[0]),c.shader_texture("paintResTexture",o[1]),c.shader_texture("tempTexture",o[2]);var u={};if(u.m=[this.m_m[0],this.m_m[1],this.m_m[2],this.m_m[3]],u.samplerSize=[1/i,1/a],u.alpha_flag=this.m_alpha_flag?1:0,u.crop=this.m_crop?1:0,u.rectangle=this.m_rectangle,c.shader.uniforms(u),c.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingForeIterationProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(u),L=function(e){var t=e,r=0,o=X();return o.m_m=[],o.alpha_flag=0,o.s_fshFragImageMattingUpsizeProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform vec2 samplerSize;    float large(float a){       return float(a>0.5);        }    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);            float res00 = texture2D(inputImageTexture, (textureCoordinate + vec2(-1.0, -1.0)*samplerSize)).x;            float res01 = texture2D(inputImageTexture, (textureCoordinate + vec2(-1.0, 0.0)*samplerSize)).x;            float res02 = texture2D(inputImageTexture, (textureCoordinate + vec2(-1.0, 1.0)*samplerSize)).x;            float res10 = texture2D(inputImageTexture, (textureCoordinate + vec2(0.0, -1.0)*samplerSize)).x;            float res12 = texture2D(inputImageTexture, (textureCoordinate + vec2(0.0, 1.0)*samplerSize)).x;            float res20 = texture2D(inputImageTexture, (textureCoordinate + vec2(1.0, -1.0)*samplerSize)).x;            float res21 = texture2D(inputImageTexture, (textureCoordinate + vec2(1.0, 0.0)*samplerSize)).x;            float res22 = texture2D(inputImageTexture, (textureCoordinate + vec2(1.0, 1.0)*samplerSize)).x;   float ux = large(res20) * (1.0) + large(res10) * (2.0) + large(res00) * (1.0)                + large(res02) * (-1.0) + large(res12) * (-2.0) + large(res22) *(-1.0);            float uy = large(res02) * (1.0) + large(res01) * (2.0) +large(res00) *(1.0)                + large(res20) * (-1.0) + large(res21) *(-2.0) + large(res22) *(-1.0);            float fac2 = clamp(pow(ux*ux + uy*uy, 0.5),0.0,1.0);            gl_FragColor = vec4(vec3(fac2,fac2,fac2), 1.0);    }",o.gpu_process=function(e,o,i,a,s,n){r||(r=new N(null,this.s_fshFragImageMattingUpsizeProc,t.m_context));var c=fe(t.m_context,null,r,i,a,s);c.shader_texture("inputImageTexture",o[0]);var u={};if(u.samplerSize=[1/i,1/a],c.shader.uniforms(u),c.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingForeIterationProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(u),G=function(e){var t=e,r=0,o=X();return o.m_m=[],o.alpha_flag=0,o.s_fshFragImageMattingTempUpProc="\tvarying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    void main()    {        vec4 dst = texture2D(inputImageTexture, textureCoordinate);        dst.x = dst.x*2.0 - 0.5;        gl_FragColor = dst;    }    ",o.gpu_process=function(e,o,i,a,s,n){r||(r=new N(null,this.s_fshFragImageMattingTempUpProc,t.m_context));var c=fe(t.m_context,null,r,i,a,s);if(c.shader_texture("inputImageTexture",o[0]),c.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingForeIterationProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(u),O=function(e){var t=e,r=0,o=X();return o.gpu_process=function(e,o,i,a,s){r||(r=new N(null,"    varying vec2 textureCoordinate;    uniform sampler2D painted1_0Texture;    uniform sampler2D painted1_1Texture;    uniform sampler2D srcTexture;    float get_painted_sample()    { float res;    vec4 p1_0Src = texture2D(painted1_0Texture, textureCoordinate)        *vec4((255.0 / (256.0 * 65536.0)), (255.0 / (65536.0)), (255.0 / 256.0), 255.0);    vec4 p1_1Src = texture2D(painted1_1Texture, textureCoordinate)        *vec4((255.0 / (256.0 * 65536.0)), (255.0 / (65536.0)), (255.0 / 256.0), 255.0);    float p1_0 = (p1_0Src.x + p1_0Src.y + p1_0Src.z + p1_0Src.w);    float p1_1 = (p1_1Src.x + p1_1Src.y + p1_1Src.z + p1_1Src.w);    if (p1_1 <= 0.0) return -1.0;    res =floor(p1_0 / p1_1*254.0 + 0.5);    return res;    }    void main()    {        float res = get_painted_sample();        res = (res+1.0)/255.0;        vec4 dst = vec4(texture2D(srcTexture,textureCoordinate).xyz,res);        gl_FragColor = dst;    }        ",t.m_context));var n=fe(t.m_context,null,r,i,a,s);if(n.shader_texture("painted1_0Texture",o[0]),n.shader_texture("painted1_1Texture",o[1]),n.shader_texture("srcTexture",o[2]),n.draw_to(e),t.m_context.getError())throw"createCGEFragImageMattingDownSizeProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(u),q=P(u),j=B(u),Y=U(u),V=function(e){var t=0,r=e,o={init:function(e,t){this.amount=e,this.end_fac=t},m_crop:!1,m_rectangle:0,m_amount:0,m_end_fac:0};return o.m_m=new Array(4),o.s_fshFragImageMattingBlurUpsizeProc="varying vec2 textureCoordinate;            uniform sampler2D inputImageTexture;    uniform sampler2D inputMaskTexture;    uniform sampler2D subMaskTextureR;    uniform sampler2D subMaskTextureD;    uniform vec4 m;    uniform float amount;    uniform float end_fac;    uniform vec2 samplerSize;        uniform vec4 rectangle;    uniform float crop;    void main()    {        vec4 src = texture2D(inputMaskTexture, textureCoordinate);        vec4 sub_r = texture2D(subMaskTextureR, textureCoordinate * m.xy + m.zw);        vec4 sub_d = texture2D(subMaskTextureD, textureCoordinate * m.xy + m.zw);        float res = (((src - sub_r) * end_fac + sub_d) *(1.0 - amount) +src * amount).x*src.x;        res = res*res*res;        vec4 src2 = texture2D(inputImageTexture, textureCoordinate);        vec4 dst4 = vec4(src2.rgb, src2.a*res);         gl_FragColor = dst4;                 if(crop<0.5)return;        vec2 rc = textureCoordinate/samplerSize;        rc = rc - rectangle.xy;        float mi = min(rc.x,rc.y);        float mir = min(rectangle.z - rc.x,rectangle.w - rc.y);        mi = min(mi,mir);        if(mi<0.0)return;        if(mi>3.0)return;        vec3 color = vec3(172.0/255.0,151.0/255.0,94.0/255.0);        rc = rc/20.0 - floor(rc/20.0)- vec2(0.5);        float a = 0.0;        if(rc.x*rc.y>0.0)a = 1.0;        gl_FragColor = vec4(mix(dst4.xyz,color,a),a);          }",o.gpu_process=function(e,o,i,a,s){r.m_context.disable(r.m_context.BLEND),t||(t=new N(null,this.s_fshFragImageMattingBlurUpsizeProc,r.m_context));var n=fe(r.m_context,null,t,i,a,s);n.shader_texture("inputImageTexture",o[0]),n.shader_texture("subMaskTextureR",o[1]),n.shader_texture("subMaskTextureD",o[2]),n.shader_texture("inputMaskTexture",o[3]);var c={};if(c.m=this.m_m,c.amount=this.m_amount,c.end_fac=this.m_end_fac,c.samplerSize=[1/i,1/a],c.crop=this.m_crop?1:0,c.rectangle=this.m_rectangle,n.shader.uniforms(c),n.draw_to(e),r.m_context.getError())throw"createFragStructureSharpenUpProc::gpu_process"},o.destroy=function(){t&&(t.destroy(),t=0)},o}(u),H=function(e){var t=e,r=0,o=X();return o.m_rectangle=[],o.alpha_flag=0,o.s_fshFragImageMattingDrawProc="varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    void main()    {            gl_FragColor = texture2D(inputImageTexture, textureCoordinate);    }",o.gpu_process=function(e,o,i,a,s){r||(r=new N(null,this.s_fshFragImageMattingDrawProc,t.m_context));var n=Math.floor(i/10+.5),c=Math.floor(a/10+.5),u=pe(n,c,!0),l=fe(t.m_context,null,r,n,c,s);l.shader_texture("inputImageTexture",o),l.draw_to(u),t.m_context.bindFramebuffer(t.m_context.FRAMEBUFFER,s),t.m_context.framebufferTexture2D(t.m_context.FRAMEBUFFER,t.m_context.COLOR_ATTACHMENT0,t.m_context.TEXTURE_2D,u,0);var m=new Uint8Array(n*c*4);t.m_context.readPixels(0,0,n,c,t.m_context.RGBA,t.m_context.UNSIGNED_BYTE,m);for(var h=[65536,65536],_=0,f=0,d=0;d<c;++d)for(var g=0;g<n;++g)m[4*(d*n+g)]>10&&(_<g&&(_=g),f<d&&(f=d),h[0]>g&&(h[0]=g),h[1]>d&&(h[1]=d));if(_=Math.min(10*(_+2),i),f=Math.min(10*(f+2),a),h[0]=Math.max(10*(h[0]-1),0),h[1]=Math.max(10*(h[1]-1),0),_-=h[0],f-=h[1],this.m_rectangle=[h[0],h[1],_,f],t.m_context.deleteTexture(u),t.m_context.getError())throw"createCGEFragImageMattingForeIterationProc::gpu_process"},o.destroy=function(){r&&(r.destroy(),r=0)},o}(u);function W(){c&&(c.destroy(),c=0),l&&(l.destroy(),l=0),h&&(u.m_context.deleteTexture(h),h=0)}function Z(e,t,r,o){o=null==o?0:o;for(var i=r+1;i<e.m_images.length;++i)if(e.m_base_level==i){var a=[e.m_images[i-1][o]];G.gpu_process(e.m_base_images[o],a,e.m_size[o].width,e.m_size[o].height,t),e.base_move_up(o,t)}else a=[e.m_images[i-1][o]],G.gpu_process(e.m_images[i][o],a,e.m_size[i].width,e.m_size[i].height,t)}function J(e,o,a,s,c,u,l,h){x!=_&&(function(e,t,r){e.load_from(q,t,r),e.draw_downward(j,r)}(o,h,l),H.gpu_process(a,h,c,u,l),i=H.m_rectangle,x=_);var f=1;f=function(e,t,o){var i=S();e.map_create(1);for(var a=new Array(e.m_images.length),s=0;s<a.length;++s){var n=Math.max(e.m_size[s].width,e.m_size[s].height)/16*r;a[s]=Math.exp(-n*n)}for(n=Math.max(e.m_factor.src_width,e.m_factor.src_height)/16*r,o=Math.exp(-n*n),s=1;s<e.m_images.length;++s)if(Y.m_factor=a[s],e.m_base_level==s){var c=[e.m_base_images[0],e.m_images[s-1][0],e.m_images[s-1][1]];1==s&&i.copy(e.m_images[s-1][1],e.m_images[s-1][0],e.m_size[s-1].width,e.m_size[s-1].height,t),Y.gpu_process(e.m_base_images[1],c,e.m_base_size,e.m_base_size,t),e.base_move_up(1,t)}else c=[e.m_images[s][0],e.m_images[s-1][0],e.m_images[s-1][1]],1==s&&i.copy(e.m_images[s-1][1],e.m_images[s-1][0],e.m_size[s-1].width,e.m_size[s-1].height,t),Y.gpu_process(e.m_images[s][1],c,e.m_size[s].width,e.m_size[s].height,t);return o}(o,l,f),n.get_rev_trans(V.m_m),V.init(.01*t+1,f);var d=new Array(3);d[0]=s,d[1]=o.m_images[o.m_images.length-1][0],d[2]=o.m_images[o.m_images.length-1][1],d[3]=h,V.m_crop=m,V.m_rectangle=m?i:[0,0,0,0],V.gpu_process(a,d,c,u,l)}function K(e,t,r,o,a,s,u,l,h){var x=new Array(7);if(S(),p!=_){A.m_fac=0;for(var z=0;z<4;++z)t.map_create(z);t.map_create(4,2),t.map_create(5,2),n.get_trans(y.m_m),x[0]=l,n.get_trans(w.m_m),w.gpu_process(t.m_images[t.m_images.length-1][1],x,t.m_size[t.m_size.length-1].width,t.m_size[t.m_size.length-1].height,u),t.draw_downward(b,u,2,1),n.get_trans(T.m_m),x[0]=l,T.gpu_process(t.m_images[t.m_images.length-1][2],x,t.m_size[t.m_size.length-1].width,t.m_size[t.m_size.length-1].height,u),t.draw_downward(b,u,2,2),n.get_trans(C.m_m),x[0]=o,C.gpu_process(t.m_images[t.m_images.length-1][0],x,t.m_size[t.m_size.length-1].width,t.m_size[t.m_size.length-1].height,u),t.draw_downward(E,u,2),x[0]=t.m_images[2][1],x[1]=t.m_images[2][2],x[2]=t.m_images[2][0],R.m_esp=g,R.m_filter_num=0,R.gpu_process(t.m_images[2][4],x,t.m_size[2].width,t.m_size[2].height,u),R.m_filter_num=1,R.gpu_process(t.m_images[2][5],x,t.m_size[2].width,t.m_size[2].height,u),function(e,t){for(var r=0;r<e.m_images.length;++r){var o=[];e.m_base_level==r?(o[0]=e.m_base_images[1],o[1]=e.m_base_images[2],o[2]=e.m_base_images[0],O.gpu_process(e.m_base_images[3],o,e.m_base_size,e.m_base_size,t),e.base_move_up(3,t)):(o[0]=e.m_images[r][1],o[1]=e.m_images[r][2],o[2]=e.m_images[r][0],O.gpu_process(e.m_images[r][3],o,e.m_size[r].width,e.m_size[r].height,t))}}(t,u),x[0]=t.m_images[2][3],x[1]=t.m_images[2][4],x[2]=t.m_images[2][5],A.m_m[0]=1,A.m_m[1]=1,A.m_m[2]=0,A.m_m[3]=0,A.gpu_process(t.m_images[2][0],x,t.m_size[2].width,t.m_size[2].height,u);for(var M=0;M<f*(t.m_images.length+1)+1;++M)D.m_fac=.06,D.m_blend_flag=1,x[0]=t.m_images[2][0],x[1]=t.m_images[2][3],D.m_esp=g,D.m_filter_num=0,D.gpu_process(t.m_images[2][1],x,t.m_size[2].width,t.m_size[2].height,u),D.m_filter_num=1,D.gpu_process(t.m_images[2][2],x,t.m_size[2].width,t.m_size[2].height,u),x[0]=t.m_images[2][3],x[1]=t.m_images[2][1],x[2]=t.m_images[2][2],A.gpu_process(t.m_images[2][0],x,t.m_size[2].width,t.m_size[2].height,u);for(z=3;z<t.m_images.length;++z){if(D.m_blend_flag=1,t.m_base_level==z){var P=[t.m_images[z-1][0],t.m_base_images[3]];D.m_esp=g,D.m_filter_num=0,D.gpu_process(t.m_base_images[1],P,t.m_base_size,t.m_base_size,u),D.m_filter_num=1,D.gpu_process(t.m_base_images[2],P,t.m_base_size,t.m_base_size,u),P[0]=t.m_base_images[3],P[1]=t.m_base_images[1],P[2]=t.m_base_images[2],A.gpu_process(t.m_base_images[0],P,t.m_base_size,t.m_base_size,u),t.base_move_up(0,u)}else x[0]=t.m_images[z-1][0],x[1]=t.m_images[z][3],D.m_esp=g,D.m_filter_num=0,D.gpu_process(t.m_images[z][1],x,t.m_size[z].width,t.m_size[z].height,u),D.m_filter_num=1,D.gpu_process(t.m_images[z][2],x,t.m_size[z].width,t.m_size[z].height,u),x[0]=t.m_images[z][3],x[1]=t.m_images[z][1],x[2]=t.m_images[z][2],A.gpu_process(t.m_images[z][0],x,t.m_size[z].width,t.m_size[z].height,u);var B=f*(t.m_images.length-z+1)+1;for(M=0;M<B;++M)D.m_blend_flag=1,x[0]=t.m_images[z][0],x[1]=t.m_images[z][3],D.m_esp=g,D.m_filter_num=0,D.gpu_process(t.m_images[z][1],x,t.m_size[z].width,t.m_size[z].height,u),D.m_filter_num=1,D.gpu_process(t.m_images[z][2],x,t.m_size[z].width,t.m_size[z].height,u),x[0]=t.m_images[z][3],x[1]=t.m_images[z][1],x[2]=t.m_images[z][2],A.gpu_process(t.m_images[z][0],x,t.m_size[z].width,t.m_size[z].height,u)}for(D.m_fac=.3,n.get_trans(k.m_m),x[0]=t.m_images[t.m_images.length-1][0],k.gpu_process(t.m_images[t.m_images.length-1][2],x,t.m_size[t.m_size.length-1].width,t.m_size[t.m_size.length-1].height,u,l),M=0;M<d;++M)F.m_filter_flag=0,M>0&&(n.get_trans(F.m_m),x[0]=h,F.gpu_process(t.m_images[t.m_images.length-1][2],x,t.m_size[t.m_size.length-1].width,t.m_size[t.m_size.length-1].height,u,l)),D.m_blend_flag=1,x[0]=t.m_images[t.m_images.length-1][2],x[1]=t.m_images[t.m_images.length-1][3],D.m_esp=8e-5,D.m_filter_num=0,D.gpu_process(t.m_images[t.m_images.length-1][0],x,t.m_size[t.m_size.length-1].width,t.m_size[t.m_size.length-1].height,u),D.m_filter_num=1,D.gpu_process(t.m_images[t.m_images.length-1][1],x,t.m_size[t.m_size.length-1].width,t.m_size[t.m_size.length-1].height,u),x[0]=o,x[1]=t.m_images[t.m_images.length-1][0],x[2]=t.m_images[t.m_images.length-1][1],n.get_rev_trans(A.m_m),M==d-1&&(A.m_fac=1),A.gpu_process(h,x,a,s,u);p=_}n.get_rev_trans(I.m_m),x[0]=o,x[1]=h,n.get_trans(C.m_m),x[0]=h,function(e,t,r,o,i,a){e.gpu_process(t,r,o,i,a)}(C,c.m_images[c.m_images.length-1][0],x,c.m_size[c.m_size.length-1].width,c.m_size[c.m_size.length-1].height,u),c.draw_downward(E,u,7),Z(c,u,7),x[0]=c.m_images[c.m_images.length-1][0],L.gpu_process(c.m_images[c.m_images.length-1][1],x,c.m_size[c.m_size.length-1].width,c.m_size[c.m_size.length-1].height,u),c.draw_downward(E,u,7,1),Z(c,u,7,1),x[0]=o,x[2]=c.m_images[c.m_images.length-1][1],x[1]=h,v&&(I.m_m[0]=1,I.m_m[1]=1,I.m_m[2]=0,I.m_m[3]=0),I.m_alpha_flag=v,m?(H.gpu_process(r,h,a,s,u),i=H.m_rectangle,I.m_rectangle=i):I.m_rectangle=[0,0,0,0],I.m_crop=m,I.gpu_process(r,x,a,s,u)}var Q={destroy:function(){W(),b&&b.destroy(),y&&y.destroy(),w&&w.destroy(),T&&T.destroy(),C&&C.destroy(),E&&E.destroy(),R&&R.destroy(),A&&A.destroy(),D&&D.destroy(),k&&k.destroy(),F&&F.destroy(),I&&I.destroy(),L&&L.destroy(),G&&G.destroy()}};return Q.size_change=function(e,t){var r,o,i,c,u,l,m;a==e&&s==t||(x=0,p=0,r=n,o=a=e,(i=s=t)<=0||o<=0||(o>i?(c=32,u=32*i/o,32*i%o&&++u,++u,l=32,m=32*i/o):0!=i&&(c=32*o/i,u=32,32*o%i&&++c,++c,l=32*o/i,m=32),r.src_width=o,r.src_height=i,r.dst_width=Math.floor(c),r.dst_height=Math.floor(u),r.x_start=0,r.y_start=0,r.emb_width=Math.floor(l),r.emb_height=Math.floor(m)),W())},Q.gpu_process=function(e,i,a){try{var s;if(he(i),this.size_change(a.m_width,a.m_height),c||(c=M(u.context(),n,513,!0,!1,2)),function(e){e.assume_symbol("used"),_=e.test_symbol("cache")?-1:e.fetch_float(),e.assume_symbol("sharpenTimes"),d=e.fetch_float(0,6),e.assume_symbol("esp"),g=.01*e.fetch_float(.001,100),f=e.test_symbol("iteration")?e.fetch_float(0,10):2,v=!!e.test_symbol("alpha"),o=!1,m=!1,(o=e.test_symbol("blurResult"))&&(e.assume_symbol("amount"),t=e.fetch_float(-200,500),e.assume_symbol("radius"),r=e.fetch_float(0,4)),m=e.test_symbol("crop")}(e),o){if(!h)return;return l=(new Date).getTime(),J(0,c,i.new_temporary(),i.current(),a.m_width,a.m_height,a.m_frame_buffer,h),i.push_to_current(),x=(new Date).getTime()-l,void console.log("time cost of rectangle:"+x)}h||(h=pe(a.m_width,a.m_height,!0)),s=_<0?u.lock_image(null,"matting"):i.load_view(_);var l=(new Date).getTime();K(0,c,i.new_temporary(),i.current(),a.m_width,a.m_height,a.m_frame_buffer,s,h);var x=(new Date).getTime()-l;console.log("time cost:"+x),i.push_to_current()}catch(e){throw"CGEPTPTemplete::gpu_process"}},Q}};return e}function $(e){var t=["varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D blendTexture;    uniform float opacity;    uniform vec4 trans;    uniform float flag;%s    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);        vec2 cod = textureCoordinate*trans.xy + trans.zw;        cod = clamp(cod - floor(cod)*flag, 0.0, 1.0);        vec4 dst = texture2D(blendTexture, cod);        gl_FragColor = vec4(blend(src.rgb, dst.rgb, dst.a * opacity), src.a);    }","varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D blendTexture;    uniform sampler2D alphaTexture;    uniform vec4 trans;    uniform float flag;%s    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);        vec2 cod = textureCoordinate*trans.xy + trans.zw;        cod = clamp(cod - floor(cod)*flag, 0.0, 1.0);        float a = texture2D(alphaTexture, cod).g;        vec4 dst = texture2D(blendTexture, textureCoordinate);        gl_FragColor = vec4(blend(src.rgb, dst.rgb, a), src.a);    }","varying vec2 textureCoordinate;\tuniform sampler2D inputImageTexture;\tuniform sampler2D blendTexture;\tuniform float opacity;\tuniform float reOpacity;%s\t\tvoid main()\t{\t\t\tvec4 src = texture2D(inputImageTexture, textureCoordinate);\t\t\tvec4 dst = texture2D(blendTexture, textureCoordinate);\t\t\tvec3 dst2 = src.rgb*(1.0-dst.a*opacity)+dst.rgb*opacity;\t\t\tif(reOpacity>1.0)                gl_FragColor =vec4(dst2,src.a);             else\t\t\t    gl_FragColor = vec4(blend(src.rgb, dst.rgb, dst.a* opacity), src.a);\t\t}","varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D blendTexture;    uniform float opacity;%s    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);        vec4 dst = texture2D(blendTexture, textureCoordinate);        gl_FragColor = vec4(blend(src.rgb, dst.rgb, opacity), src.a);    }","varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D blendTexture;    uniform sampler2D alphaTexture;    uniform vec4 trans;    uniform float flag;%s    void main()    {        vec4 src = texture2D(inputImageTexture, textureCoordinate);        vec4 dst = texture2D(blendTexture, textureCoordinate);        float a = texture2D(alphaTexture, textureCoordinate).w;        gl_FragColor = vec4(blend(src.rgb, dst.rgb, a), src.a);    }","varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D blendTexture;    uniform sampler2D alphaTexture;    uniform vec4 trans;    uniform float opacity;%s    void main()    {        vec2 coord = textureCoordinate*trans.xy+trans.zw;                vec4 src = texture2D(inputImageTexture, coord);        vec4 dst = texture2D(blendTexture, coord);        float a = texture2D(alphaTexture, coord).w*opacity;        gl_FragColor =vec4(mix(src.rgb,dst.rgb,1.0-a),src.a);    }"],r=[0,0,0,0,0],o=e.shader_string(),i={check_shader:function(e,i){if(!r[e]){var a=t[e].replace(/%s/g,o);r[e]=new N(null,a,i)}return r[e]},destroy:function(){r[0]&&r[0].destroy(),r[1]&&r[1].destroy(),r[2]&&r[2].destroy(),r[3]&&r[3].destroy(),r[4]&&r[4].destroy()}};return i}function ee(){var e={name:"blend",create:function(e){var t,o,i,a,s,n,c,u,l,m,h,_,f=0,d=0,g=0,v=e,x=((t={}).opacity=$(r.createCGEBlendOpacity()),t.darken=$(r.createCGEBlendDarken()),t.lighten=$(r.createCGEBlendLighten()),t.multiply=$(r.createCGEBlendMultiply()),t.screen=$(r.createCGEBlendScreen()),t.colorDodge=$(r.createCGEBlendColorDodge()),t.colorBurn=$(r.createCGEBlendColorBurn()),t.linearDodge=$(r.createCGEBlendLinearDodge()),t.linearBurn=$(r.createCGEBlendLinearBurn()),t.hardLight=$(r.createCGEBlendHardLight()),t.softLight=$(r.createCGEBlendSoftLight()),t.vividLight=$(r.createCGEBlendVividLight()),t.linearLight=$(r.createCGEBlendLinearLight()),t.pinLight=$(r.createCGEBlendPinLight()),t.hardMix=$(r.createCGEBlendHardMix()),t.difference=$(r.createCGEBlendDifference()),t.exclude=$(r.createCGEBlendExclude()),t.add=$(r.createCGEBlendAdd()),t.overlay=$(r.createCGEBlendOverlay()),t.destroy=function(){for(var e in this)this[e].destroy&&this[e].destroy()},t),p="",b=[],y="",w=[],T=[];function C(e){var t=e.fetch_symbol();(m=x[t])||e.error("invalid blend mode",t)}function S(e){o=0,i=0,e.test_symbol("align")&&(o=e.lookup_symbol(["none","center","centerFit","rightTop","leftBottom","tile","stick",0],!0)),6==o&&(b[0]=e.fetch_float(),b[1]=e.fetch_float(),u=e.fetch_float(),i=e.lookup_symbol(["leftTop","leftBottom","rightTop","rightBottom",0],!0)),5==o&&(n=e.fetch_float(.05,1))}function E(e,t,r,a,s){var c=new Array(4);!function(e,t,r,a,s){s[0]=1,s[1]=1,s[2]=0,s[3]=0,l=1;var c=e/r,m=t/a;if(c>m){var h=m/c;s[0]=1,s[1]=h}else h=c/m,s[0]=h,s[1]=1;switch(o){case 0:s[0]=1,s[1]=1;break;case 1:s[2]=.5*(1-s[0]),s[3]=.5*(1-s[1]);break;case 2:c<m?(h=m/c,s[0]=1,s[1]=h):(h=c/m,s[0]=h,s[1]=1),s[2]=.5*(1-s[0]),s[3]=.5*(1-s[1]),l=0;break;case 3:break;case 4:s[2]=1-s[0],s[3]=1-s[1];break;case 5:s[0]/=n,s[1]/=n;break;case 6:switch(c>m?(s[0]=u*c/m,s[1]=u,s[2]=-b[0]*u*c/m,s[3]=-b[1]*u):(s[0]=u,s[1]=u*m/c,s[2]=-b[0]*u,s[3]=-b[1]*u*m/c),i){case 0:break;case 1:s[3]=1-s[1]-s[3];break;case 2:s[2]=1-s[0]-s[2];break;case 3:s[2]=1-s[0]-s[2],s[3]=1-s[1]-s[3]}l=0;break;default:throw"CGEBlendParser::cal_trans"}}(e,t,r,a,c);var m={};m.trans=c,s.shader.uniforms(m)}var z={destroy:function(){x.destroy()}};return z.gpu_process=function(e,t,r){try{(new Date).getTime();d=he(t),function(e){switch(f=0,T=[],w=[],s=!1,e.lookup_symbol(["texture","layer","view","shit",0],!0)){case 0:e.assume_symbol("file"),p=e.fetch_string(),S(e),C(e),c=.01*e.fetch_float(0,100),h=0;break;case 1:s=!1;var t=["file","alpha","layer",0];if(y=e.fetch_symbol(),C(e),"BPSNumber"==e.get_parcer_status())c=.01*e.fetch_float(0,100),h=3;else switch(e.lookup_symbol(t,!0)){case 0:p=e.fetch_string(),S(e),h=1;break;case 1:c=.01*e.fetch_float(0,100),h=2;break;case 2:p=e.fetch_symbol(),h=4}break;case 2:var r;s=!0,t=["file","alpha","cache",0],a=e.fetch_float(),C(e),"BPSNumber"==e.get_parcer_status()?(c=.01*e.fetch_float(0,100),h=3):(r=e.lookup_symbol(t,!0))?2==r?(h=5,_=1,e.test_symbol("alpha")&&(_=e.fetch_float()),e.test_symbol("position")&&(T[0]=e.fetch_float(),T[1]=e.fetch_float(),e.assume_symbol("size"),w[0]=e.fetch_float(),w[1]=e.fetch_float())):(e.test_symbol("reOpacity")&&(f=2),c=.01*e.fetch_float(0,100),h=2):(p=e.fetch_string(),S(e),h=1);break;default:throw"CGEBlendParser::init"}}(e);var o=fe(v.m_context,r,m.check_shader(h,v.context()));switch(o.shader_texture("inputImageTexture",t.current()),h){case 0:if(!(g=v.get_resource_texture(p)))throw p;o.shader_texture("blendTexture",g.texture),E(r.m_width,r.m_height,g.width,g.height,o),(x={}).opacity=c,x.flag=l,o.shader.uniforms(x);break;case 1:case 2:case 3:case 4:case 5:var i;if((i=s?t.load_view(a):t.load_channel(y))||e.error("invalid layer name",y),o.shader_texture("blendTexture",i),1==h){if(!(g=v.get_resource_texture(p)))throw p;o.shader_texture("alphaTexture",g.texture),E(r.m_width,r.m_height,g.width,g.height,o),(x={}).flag=l,o.shader.uniforms(x)}else if(4==h){var n;(n=t.load_channel(p))||e.error("invalid layer name",p),o.shader_texture("alphaTexture",n)}else if(5==h){var u=v.lock_image(null,"painter");if(!u)throw new error("no painter cache");o.shader_texture("alphaTexture",u),(x={}).opacity=_,o.shader.uniforms(x)}else{var x;(x={}).reOpacity=f,x.opacity=c,o.shader.uniforms(x)}}if(w.length){var b=[w[0]/r.m_width,w[1]/r.m_height,T[0]/r.m_width,T[1]/r.m_height];(z={}).trans=b,o.shader.uniforms(z),v.m_context.enable(v.m_context.BLEND),v.m_context.blendEquation(v.m_context.FUNC_ADD),v.m_context.blendFunc(v.m_context.ONE,v.m_context.ZERO),v.m_context.bindFramebuffer(v.m_context.FRAMEBUFFER,r.m_frame_buffer),v.m_context.framebufferTexture2D(v.m_context.FRAMEBUFFER,v.m_context.COLOR_ATTACHMENT0,v.m_context.TEXTURE_2D,t.new_temporary(),0),v.m_context.viewport(Math.floor(T[0]+.5),Math.floor(T[1]+.5),Math.floor(w[0]+.5),Math.floor(w[1]+.5)),v.m_context.drawArrays(v.m_context.TRIANGLE_FAN,0,4),v.m_context.disable(v.m_context.BLEND)}else{if(5==h){var z={trans:[1,1,0,0]};o.shader.uniforms(z)}o.draw_to(t.new_temporary())}if(t.push_to_current(),5==h&&v.unlock_image(null,null,"painter"),v.m_context.getError())throw new error("CGEPTPTemplate::gpu_process");d.destroy(),(new Date).getTime()}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{d.destroy(),g&&(v.release_resource_texture(g),g=0)}},z}};return e}function te(){var e={name:"hueAlphaAdjust",create:function(e){var t,r,o,i=e,a=0,s=0,n=0,c={};function u(e){var t=(e+.5)*(1/256);return t=t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4),enten}var l={};return(l=S()).destroy=function(){a&&(a.destroy(),a=0),s&&(s.destroy(),s=0),n&&(i.m_context.deleteTexture(n),n=0)},l.gpu_process=function(e,l,m){try{c=he(l),function(e,i,a){if(e.assume_symbol("factor"),i=e.fetch_float(0,1),t=Math.pow(20,1-i),0==e.lookup_symbol(["hue","color",0],!0))a=(a=e.fetch_float())/180*Math.PI,r=Math.sin(a),o=Math.cos(a);else{var s=e.fetch_float(0,256);s=u(s),s*=.299;var n=e.fetch_float(0,256);n=u(n),n*=.587;var c=e.fetch_float(0,256);c=u(c);var l=1/(s+n+(c*=.114));s*=l,n*=l,c*=l,s-=.299,c-=.114,l=1/Math.sqrt(s*s+c*c),r=s*l,o=c*l}}(e),s||(s=new N(null,"varying vec2 textureCoordinate;     uniform float m_red;     uniform float m_blue;     uniform float m_factor;        void main()    {    float red = textureCoordinate.x-0.299;    float blue = textureCoordinate.y-0.114;    float cr = red;    float cb = blue;    float n = 1.0/sqrt(cr*cr+cb*cb);    cr *=n;    cb *=n;    float vp = cr*m_red+cb*m_blue;    float fac;    if(vp>0.0)    {        float vs = (cr*m_blue - cb*m_red)*m_factor;        fac = vp/(vp*vp+vs*vs);     }     else         fac = 0.0;     float ratio =0.125*25.0/8192.0;     float dst = fac;         if((red*red*0.3 + blue*blue)<ratio)            {                float x = (red*red*0.3 + blue*blue) / ratio;                dst = (1.0 - (x*x - 2.0*x + 1.0))*fac;            }      gl_FragColor = vec4(0.0,0.0,0.0,dst);    }",i.m_context)),a||(a=new N(null,"varying vec2 textureCoordinate;            uniform sampler2D inputImageTexture;            uniform sampler2D chrome;            void main()            {                vec4 src = texture2D(inputImageTexture, textureCoordinate);                vec3 lsrc = max(src.rgb * vec3(1.0 / 12.82), pow((src.rgb + vec3(0.055)) * vec3(1.0 / 1.055), vec3(2.4)));                vec3 csrc = lsrc * vec3(0.299, 0.587, 0.114);                float lum = csrc.r + csrc.g + csrc.b;                csrc /= vec3(lum + 0.000001);                src.a = src.a - texture2D(chrome, vec2(csrc.r, csrc.b)).w;                gl_FragColor = src;            }",i.m_context)),function(e){n||(n=pe(256,256,!0));var a=fe(i.m_context,null,s,256,256,e.m_frame_buffer),c={};c.m_red=r,c.m_blue=o,c.m_factor=t,s.uniforms(c),a.draw_to(n)}(m);var h=fe(i.m_context,m,a);if(h.shader_texture("inputImageTexture",l.current()),h.shader_texture("chrome",n),h.draw_to(l.new_temporary()),i.m_context.getError())throw new error("CGEPTPTemplate::gpu_process");l.push_to_current()}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{c.destroy()}},l}};return e}function re(){var e={name:"RGB",create:function(e){var t,r,o,i,a,s,n,c=e,u=0,l={},m={destroy:function(){u&&(u.destroy(),u=0)}};return m.gpu_process=function(e,m,h){try{l=he(m),function(e){t=0,r=0,o=0,i=0,a=0,s=0,n=.5;for(var c=["dark","light","middle","midTone",0],u=-1;-1!=(u=e.lookup_symbol(c));)switch(u){case 0:t=e.fetch_float(),r=e.fetch_float();break;case 1:o=e.fetch_float(),i=e.fetch_float();break;case 2:a=e.fetch_float(),s=e.fetch_float();break;case 3:n=e.fetch_float()}t=3*t/1e3,r=3*r/1e3,o=3*o/1e3,i=3*i/1e3,a=3*a/1e3,s=3*s/1e3}(e),u||(u=new N(null,"varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;     uniform float d_red;     uniform float d_blue;     uniform float l_red;     uniform float l_blue;     uniform float m_red;     uniform float m_blue;     uniform float mid_tone;          vec3 color_limite(vec3 src,float lum)            {                vec3 vl = vec3(lum);                vec3 vc = src - vl;                vec3 fac = min((vec3(1.0) - vl) / max(vc, vec3(0.00001)), vec3(1.0));                vc = vc * vec3(min(fac.r, min(fac.g, fac.b)));                return vl + vc;            }        void main()    {\t\t    vec4 src = texture2D(inputImageTexture, textureCoordinate);        vec3 lsrc = max(src.rgb * vec3(1.0 / 12.82),pow((src.rgb + vec3(0.055)) * vec3(1.0 / 1.055),vec3(2.4)));       vec3 csrc = lsrc * vec3(0.299,0.587,0.114);            float lum = csrc.r + csrc.g + csrc.b;            csrc /= vec3(lum);            csrc.rb = csrc.rb - vec2(0.299,0.114);            float p_lum;            if(lum<mid_tone)            {                p_lum = lum/mid_tone;                p_lum = p_lum*p_lum*(3.0 - 2.0 * p_lum);                csrc.rb = (csrc.rb + vec2(d_red,d_blue)) * vec2(1.0 - p_lum) + (csrc.rb + vec2(m_red,m_blue)) * vec2(p_lum);            }            else            {                p_lum = (lum - mid_tone)/(1.0 - mid_tone);                p_lum = p_lum*p_lum*(3.0 - 2.0 * p_lum);                csrc.rb = (csrc.rb + vec2(m_red,m_blue)) * vec2(1.0 - p_lum) + (csrc.rb + vec2(l_red,l_blue)) * vec2(p_lum);            }            {                float sr,sb,sg,smax;                sr = csrc.r * (1.0 / -0.299);                sb = csrc.b * (1.0 / -0.114);                sg = (csrc.r+csrc.b) * (1.0/0.587);                smax = max(max(sr,sb),sg);                if(smax > 1.0)                    csrc.rb = csrc.rb * vec2(1.0/smax);                csrc.rb = csrc.rb + vec2(0.299,0.114);            }            csrc.g = 1.0 - csrc.r - csrc.b;            csrc *= vec3(lum);            lsrc = csrc * vec3(1.0/0.299,1.0/0.587,1.0/0.114);            lsrc = color_limite(lsrc,lum);            src.rgb = min(lsrc * 12.82,pow(lsrc,vec3(1.0 / 2.4)) * vec3(1.055) - vec3(0.055));      gl_FragColor = src;    }",c.m_context)),(f={}).mid_tone=n,f.l_red=o,f.l_blue=i,f.d_red=t,f.d_blue=r,f.m_red=a,f.m_blue=s,u.uniforms(f);var _=fe(c.m_context,h,u);if(_.shader_texture("inputImageTexture",m.current()),_.draw_to(m.new_temporary()),c.m_context.getError())throw new error("CGEPTPTemplate::gpu_process");m.push_to_current()}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{l.destroy()}var f},m}};return e}function oe(){var e={name:"opticsAdjust",create:function(e){var t={};return(t=_e()).m_context=e,t.m_red=0,t.m_green=0,t.m_blue=0,t.shader_uniform=function(){return"uniform vec3 mul;                uniform vec2 a;                vec3 color_limite(vec3 src, float lum)                {                    vec3 vc = src - lum;                    vec3 fac = min(vec3(1.0 - lum) / max(vc, 0.00001), 1.0);                    vc = vc * min(fac.r, min(fac.g, fac.b));                    return vc + lum;                }"},t.shader_procession=function(){return"vec3 lsrc = max(src.rgb * vec3(1.0 / 12.82), pow((src.rgb + vec3(0.055)) * vec3(1.0 / 1.055), vec3(2.4)));                vec2 cod = textureCoordinate - 0.5;                float v = dot(a, cod * cod);                v = 1.0 / (1.0 + v);                lsrc *= mul * v * v;                float lum = dot(lsrc, vec3(0.299, 0.587, 0.114));                lsrc = mix(color_limite(lsrc, lum),vec3(1.0),step(1.0,lum));                src.rgb = min(lsrc * 12.82, pow(lsrc, vec3(1.0 / 2.4)) * vec3(1.055) - vec3(0.055));                dst = src;"},t.shader_setup=function(e){var t={},r=[this.m_red,this.m_green,this.m_blue];t.mul=r;var o=e.width,i=e.height,a=o*o*.25+i*i*.25,s=o*o/a,n=i*i/a,c=[s*=this.m_vigFac*this.m_vigFac,n*=this.m_vigFac*this.m_vigFac];t.a=c,e.shader.uniforms(t)},t.init=function(e){e.assume_symbol("exposure");var t,r,o,i=e.fetch_float(.01,4);if(e.lookup_symbol(["color","temperature",0],!0)){var a,s=e.fetch_float(1200,12e3);e.assume_symbol("tint"),t=(a=function(e,t){var r,o=-3*(r=(e/=1e3)<4?.27475/(e*e*e)-.98598/(e*e)+1.17444/e+.145986:e<7?-4.607/(e*e*e)+2.9678/(e*e)+.09911/e+.244063:-2.0064/(e*e*e)+1.9018/(e*e)+.24748/e+.23704)*r+2.87*r-.275,i=r/o,a=(1-r-o)/o,s=[];return s[0]=3.24074*i-1.53726-.498571*a,s[1]=.969258*-i+1.87599+.0415557*a,s[2]=.0556352*i-.203996+1.05707*a,s[1]/=t,s}(s,e.fetch_float(.02,5)))[0],r=a[1],o=a[2]}else t=e.fetch_float(0,255)*(1/255),r=e.fetch_float(0,255)*(1/255),o=e.fetch_float(0,255)*(1/255),t=Math.max(t*(1/12.82),Math.pow((t+.055)*(1/1.055),2.4)),r=Math.max(r*(1/12.82),Math.pow((r+.055)*(1/1.055),2.4)),o=Math.max(o*(1/12.82),Math.pow((o+.055)*(1/1.055),2.4));var n=i/(.299*(t=1/t)+.587*(r=1/r)+.114*(o=1/o));if(this.m_red=t*n,this.m_green=r*n,this.m_blue=o*n,this.m_red=Math.min(this.m_red,16),this.m_green=Math.min(this.m_green,16),this.m_blue=Math.min(this.m_blue,16),e.lookup_symbol(["focalLength","vignetting",0],!0)){var c=e.fetch_float(0,1);this.m_vigFac=20*c/12}else{var u=e.fetch_float(12,1600);this.m_vigFac=20/u}},t}};return e}function ie(e){var t,r=[(t={name:"toneMapEnd",m_key:0,create:function(e){var t={cal_fac:function(e){var t=Math.pow(2,5-this.m_key/20);e.key_base=Math.log(t+1),e.key=1/t},m_shader:0,s_fshCGEToneMapEnd:"varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform sampler2D srcTexForAlpha;        uniform float key;        uniform float key_base;        vec3 color_limite(vec3 src,float lum)        {            vec3 vl = vec3(lum);            vec3 vc = src - vl;            vec3 fac = min((vec3(1.0) - vl) / max(vc,0.00001),1.0);            vc = vc * vec3(min(fac.r,min(fac.g,fac.b)));            return vl + vc;        }        void main()        {            vec4 src = texture2D(inputImageTexture, textureCoordinate);            vec3 csrc;            float lum;            csrc.r = src.x;            csrc.b = src.y;            csrc.g = 1.0 - src.x - src.y;            lum = src.w + (- 0.5 + src.z)*(1.0 / 255.0);            lum = (exp(lum * key_base) - 1.0) * key;            lum = min(lum,0.9999);            csrc *= vec3(lum);            vec3 lsrc = csrc * vec3(1.0/0.299,1.0/0.587,1.0/0.114);            lsrc = color_limite(lsrc,lum);            lsrc = min(lsrc,0.9999);                         src.rgb = min(lsrc * 12.82,pow(lsrc,vec3(1.0 / 2.4)) * vec3(1.055) - vec3(0.055));            src.a =texture2D(srcTexForAlpha, textureCoordinate).w;            gl_FragColor = src;        } ",init:function(e){var t,r={};for(var o in e.m_parcer)r[o]=e.m_parcer[o];if(t=function(e,t){return"BPSSemicolon"!=e.get_current_status()?0:(e.next(),e.cmp_symbol("toneMapStart")?(e.next(),e.cmp_symbol("key")?(e.next(),t!=e.get_float()?0:4):0):0)}(r,e.m_key)){for(var i=0;i<t;++i)e.m_parcer.next();return e.log("start merged"),!1}return this.m_key=e.m_key,e.m_mode="CPM_SRGB",r=null,!0},gpu_process:function(e,t,r){try{var o=he(t);this.m_shader||(this.m_shader=new N(null,this.s_fshCGEToneMapEnd,this.m_context.m_context));var i=fe(this.m_context.m_context,r,this.m_shader);if(!this.init(e))return;i.shader_texture("inputImageTexture",t.current()),i.shader_texture("srcTexForAlpha",t.get_src());var a,s,n={};this.cal_fac(n),a=n.key,s=n.key_base;var c={};if(c.key=a,c.key_base=s,i.shader.uniforms(c),i.draw_to(t.new_temporary()),this.m_context.m_context.getError())throw"CGEPTPTemplate::gpu_process";t.push_to_current(),o.destroy()}catch(e){throw"CGEPTPTemplete::gpu_process"}finally{this.m_context.m_context.deleteTexture(this.m_curve_tex)}}};return t.m_context=e,t.destroy=function(){this.m_shader&&(this.m_shader.destroy(),this.m_shader=0)},t}},t),K(),I(),G(),F()];return de(e,r,r.length)}function ae(){var e={name:"basicAdjust"};return e.create=function(){function e(){var e={name:"colorBalance",create:function(e){var t,r,o,i={};return(i=_e()).m_context=e,i.init=function(e){t=e.fetch_float(),r=e.fetch_float(),o=e.fetch_float()},i.shader_uniform=function(){return"uniform float redShift;                        uniform float greenShift;                        uniform float blueShift;                        float RGBToL(vec3 color)                        {                            float fmin = min(min(color.r, color.g), color.b);                            float fmax = max(max(color.r, color.g), color.b);                            return (fmax + fmin) / 2.0;                         }                        vec3 RGBToHSL(vec3 color)                        {                            vec3 hsl;                             float fmin = min(min(color.r, color.g), color.b);                            float fmax = max(max(color.r, color.g), color.b);                            float delta = fmax - fmin;                            hsl.z = (fmax + fmin) / 2.0;                            if (delta == 0.0)                            {                                hsl.x = 0.0;                                hsl.y = 0.0;                            }                            else                            {                                if (hsl.z < 0.5)                                    hsl.y = delta / (fmax + fmin);                                 else                                    hsl.y = delta / (2.0 - fmax - fmin);                                 float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;                                float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;                                float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;                                if (color.r == fmax )                                    hsl.x = deltaB - deltaG;                                else if (color.g == fmax)                                    hsl.x = (1.0 / 3.0) + deltaR - deltaB;                                else if (color.b == fmax)                                    hsl.x = (2.0 / 3.0) + deltaG - deltaR;                                if (hsl.x < 0.0)                                    hsl.x += 1.0;                                else if (hsl.x > 1.0)                                    hsl.x -= 1.0;                             }                            return hsl;                        }                        float HueToRGB(float f1, float f2, float hue)                        {                            if (hue < 0.0)                                hue += 1.0;                            else if (hue > 1.0)                                hue -= 1.0;                            float res;                            if ((6.0 * hue) < 1.0)                                res = f1 + (f2 - f1) * 6.0 * hue;                            else if ((2.0 * hue) < 1.0)                                res = f2;                            else if ((3.0 * hue) < 2.0)                                res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;                            else                                res = f1;                            return res;                        }                        vec3 HSLToRGB(vec3 hsl)                        {                            vec3 rgb;                            if (hsl.y == 0.0)                                rgb = vec3(hsl.z);                            else                            {                                float f2;                                if (hsl.z < 0.5)                                    f2 = hsl.z * (1.0 + hsl.y);                                else                                    f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);                                float f1 = 2.0 * hsl.z - f2;                                rgb.r = HueToRGB(f1, f2, hsl.x + (1.0/3.0));                                rgb.g = HueToRGB(f1, f2, hsl.x);                                rgb.b= HueToRGB(f1, f2, hsl.x - (1.0/3.0));                            }                            return rgb;                        }"},i.shader_procession=function(){return"float lightness = RGBToL(src.rgb);                        vec3 shift = vec3(redShift, greenShift, blueShift);                        const float a = 0.25;                        const float b = 0.333;                        const float scale = 0.7;                        vec3 midtones = (clamp((lightness - b) /  a + 0.5, 0.0, 1.0) * clamp ((lightness + b - 1.0) / -a + 0.5, 0.0, 1.0) * scale) * shift;                        vec3 newColor = src.rgb + midtones;                        newColor = clamp(newColor, 0.0, 1.0);                        vec3 newHSL = RGBToHSL(newColor);                        float oldLum = RGBToL(src.rgb);                        src.rgb = HSLToRGB(vec3(newHSL.x, newHSL.y, oldLum));                        dst = src;"},i.shader_setup=function(e){var i={};i.redShift=t,i.greenShift=r,i.blueShift=o,e.shader.uniforms(i)},i}};return e}function t(){var e={name:"hsl",create:function(e){var t,r,o,i={};return(i=_e()).m_context=e,i.init=function(e){r=e.fetch_float(),t=e.fetch_float(),o=e.fetch_float()},i.shader_uniform=function(){return"uniform float saturation;                        uniform float hue;                        uniform float luminance;                        vec3 RGB2HSL(vec3 src)                        {                            float maxc = max(max(src.r, src.g), src.b);                            float minc = min(min(src.r, src.g), src.b);                            float L = (maxc + minc) / 2.0;                            if(maxc == minc)                                return vec3(0.0, 0.0, L);                            float H, S;                            float temp0 = maxc + minc, temp1 = maxc - minc;                            S = mix(temp1 / (2.0 - temp0), temp1 / temp0, step(L, 0.5));                            vec3 comp;                            comp.xy = vec2(equal(src.xy, vec2(maxc)));                            float comp_neg = 1.0 - comp.x;                            comp.y *= comp_neg;                            comp.z = (1.0 - comp.y) * comp_neg;                            float dif = maxc - minc;                            vec3 result = comp * vec3((src.g - src.b) / dif,                                2.0 + (src.b - src.r) / dif,                                4.0 + (src.r - src.g) / dif);                            H = result.x + result.y + result.z;                            H *= 60.0;                            H += step(H, 0.0) * 360.0;                            return vec3(H / 360.0, S, L);                        }                        vec3 HSL2RGB(vec3 src)                        {                            float q = (src.z < 0.5) ? src.z * (1.0 + src.y) : (src.z + src.y - (src.y * src.z));                            float p = 2.0 * src.z - q;                            vec3 dst = vec3(src.x + 0.333, src.x, src.x - 0.333);                            dst = fract(dst);                            vec3 weight = step(dst, vec3(1.0 / 6.0));                            vec3 weight_neg = 1.0 - weight;                            vec3 weight2 = weight_neg * step(dst, vec3(0.5));                            vec3 weight2_neg = weight_neg * (1.0 - weight2);                            vec3 weight3 = weight2_neg * step(dst, vec3(2.0 / 3.0));                            vec3 weight4 = (1.0 - weight3) * weight2_neg;                            float q_p = q - p;                            dst = mix(dst, p + q_p * 6.0 * dst, weight);                            dst = mix(dst, vec3(q), weight2);                            dst = mix(dst, p + q_p * ((2.0 / 3.0) - dst) * 6.0, weight3);                            dst = mix(dst, vec3(p), weight4);                            return dst;                        }                        vec3 adjustColor(vec3 src, float h, float s, float l)                        {                            src = RGB2HSL(src);                            src.x += h;                            src.y *= 1.0 + s;                            src.z *= 1.0 + l;                            return HSL2RGB(src);                        }"},i.shader_procession=function(){return"src.rgb = adjustColor(src.rgb, hue, saturation, luminance);                        dst = src;"},i.shader_setup=function(e){var i={};i.saturation=t,i.hue=r,i.luminance=o,e.shader.uniforms(i)},i}};return e}function r(){var e={name:"hsv",create:function(e){var t,r,o,i,a,s,n={};return(n=_e()).m_context=e,n.init=function(e){t=e.fetch_float(),r=e.fetch_float(),o=e.fetch_float(),i=e.fetch_float(),a=e.fetch_float(),s=e.fetch_float(),e.test_symbol("special")},n.shader_uniform=function(){return"uniform vec3 vColor1;                        uniform vec3 vColor2;                        uniform vec2 special;                        vec3 hsvAdjust(vec3 src, vec3 color1, vec3 color2)                        {                            float fmax = max(src.r,max(src.g,src.b));                            float fmin = min(src.r,min(src.g,src.b));                            float fdelta = fmax - fmin;                            float fs_off;                            vec3 hsv;                            hsv.z = fmax;                            if(0.0 == fdelta)                            {                                return src;                            }                            hsv.y = fdelta/fmax;                            if(fmax == src.r)                            {                                if(src.g >= src.b)                                {                                    hsv.x = (src.g - src.b)/fdelta;                                    fs_off = (color2.g - color1.r)*hsv.x + color1.r;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    clamp(hsv.y, 0.0, 1.0);                                    src.r = hsv.z;                                    src.b = hsv.z*(1.0 - hsv.y);                                    src.g = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                                }                                else                                {                                    hsv.x = (src.r - src.b)/fdelta;                                    fs_off = (color1.r - color2.r)*hsv.x + color2.r;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    clamp(hsv.y, 0.0, 1.0);                                    src.r = hsv.z;                                    src.g = hsv.z*(1.0 - hsv.y);                                    src.b = hsv.z*(1.0 - hsv.y*hsv.x);                                }                            }                            else if(fmax == src.g)                            {                                if(src.r > src.b)                                {                                    hsv.x = (src.g - src.r)/fdelta;                                    fs_off = (color1.g - color2.g)*hsv.x + color2.g;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    clamp(hsv.y, 0.0, 1.0);                                    src.g = hsv.z;                                    src.r = hsv.z*(1.0 - hsv.y*hsv.x);                                    src.b = hsv.z*(1.0 - hsv.y);                                }                                else                                {                                    hsv.x = (src.b - src.r)/fdelta;                                    fs_off = (color2.b - color1.g)*hsv.x + color1.g;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    clamp(hsv.y, 0.0, 1.0);                                    src.g = hsv.z;                                    src.r = hsv.z*(1.0 - hsv.y);                                    src.b = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                                }                            }                            else                            {                                if(src.g > src.r)                                {                                    hsv.x = (src.b - src.g)/fdelta;                                    fs_off = (color1.b - color2.b)*hsv.x + color2.b;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    clamp(hsv.y, 0.0, 1.0);                                    src.b = hsv.z;                                    src.r = hsv.z*(1.0 - hsv.y);                                    src.g = hsv.z*(1.0 - hsv.y*hsv.x);                                }                                else                                {                                    hsv.x = (src.r - src.g)/fdelta;                                    fs_off = (color2.r - color1.b)*hsv.x + color1.b;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    clamp(hsv.y, 0.0, 1.0);                                    src.b = hsv.z;                                    src.r = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                                    src.g = hsv.z*(1.0 - hsv.y);                                }                            }                            return src;                        }"},n.shader_procession=function(){return"src.rgb = hsvAdjust(src.rgb, vColor1, vColor2);                        dst = src;"},n.shader_setup=function(e){var n={};n.vColor1=[t,r,o],n.vColor2=[i,a,s],e.shader.uniforms(n)},n}};return e}function o(){var e={name:"hue",create:function(e){var t,r={};return(r=_e()).m_context=e,r.init=function(e){t=e.fetch_float()},r.shader_uniform=function(){return"uniform float hueAdjust;                        vec3 rgb2yiq(vec3 src)                        {                            return src * mat3(0.299, 0.587, 0.114,                                    0.595716, -0.274453, -0.321263,                                    0.211456, -0.522591, 0.31135);                        }                        vec3 yiq2rgb(vec3 src)                        {                            return src * mat3(1.0, 0.9563, 0.6210,                                    1.0, -0.2721, -0.6474,                                    1.0, -1.1070, 1.7046);                        }"},r.shader_procession=function(){return"vec4 color =src;                        vec3 yiq = rgb2yiq(color.rgb);                        float hue = atan(yiq.z, yiq.y);                        float chroma = length(yiq.yz);                        hue -= hueAdjust;                        yiq.yz = vec2(cos(hue), sin(hue)) * chroma;                        dst = vec4(yiq2rgb(yiq), color.a);                        "},r.shader_setup=function(e){var r={};r.hueAdjust=t,e.shader.uniforms(r)},r}};return e}function i(){var e={name:"monoChrome",create:function(e){var t,r,o,i,a,s,n={};return(n=_e()).m_context=e,n.init=function(e){t=e.fetch_float(),r=e.fetch_float(),o=e.fetch_float(),i=e.fetch_float(),a=e.fetch_float(),s=e.fetch_float()},n.shader_uniform=function(){return"uniform float red;                        uniform float green;                        uniform float blue;                        uniform float cyan;                        uniform float magenta;                        uniform float yellow;"},n.shader_procession=function(){return"float maxc = max(max(src.r, src.g), src.b);                        float minc = min(min(src.r, src.g), src.b);                        float midc = src.r + src.g + src.b - maxc - minc;                        if(maxc == minc)                            gl_FragColor = src;                        vec3 ratioMax, ratioMin;                        ratioMax.xy = vec2(equal(src.rg, vec2(maxc)));                        float max_neg = 1.0 - ratioMax.x;                        ratioMax.y *= max_neg;                        ratioMax.z = (1.0 - ratioMax.y) * max_neg;                        vec3 compMax = vec3(red, green, blue) * ratioMax;                        ratioMin.xy = vec2(equal(src.rg, vec2(minc)));                        float min_neg = 1.0 - ratioMin.x;                        ratioMin.y *= min_neg;                        ratioMin.z = (1.0 - ratioMin.y) * min_neg;                        vec3 compMaxMid = vec3(cyan, magenta, yellow) * ratioMin;                        float total = (compMax.x + compMax.y + compMax.z) * (maxc - midc) + (compMaxMid.x + compMaxMid.y + compMaxMid.z) * (midc - minc) + minc;                        dst = vec4(total, total, total, 1.0);                        "},n.shader_setup=function(e){var n={};n.red=t,n.green=r,n.blue=o,n.cyan=i,n.magenta=a,n.yellow=s,e.shader.uniforms(n)},n}};return e}function a(){var e={name:"saturation",create:function(e){var t,r={};return(r=_e()).m_context=e,r.init=function(e){t=e.fetch_float()},r.shader_uniform=function(){return"uniform float intensity;"},r.shader_procession=function(){return"float lum = (max(max(src.r, src.g),src.b) + min(min(src.r, src.g), src.b)) / 2.0;                        dst = vec4(mix(vec3(lum), src.rgb, intensity), src.a);"},r.shader_setup=function(e){var r={};r.intensity=t,e.shader.uniforms(r)},r}};return e}function s(){var e={name:"whiteBalance",create:function(e){var t,r,o={};return(o=_e()).m_context=e,o.init=function(e){t=5400*(t=e.fetch_float())+6500,r=e.fetch_float()},o.shader_uniform=function(){return"uniform float temperature;                        uniform float tint;                        vec3 whiteBalance(vec3 src, float temp, float tint)                        {                            temp = clamp(temp, 1200.0, 12000.0);                            tint = clamp(tint, 0.02, 5.0);                            float xD;                            temp /= 1000.0;                            if(temp < 4.0)                                xD = 0.27475 / (temp * temp * temp) - 0.98598 / (temp * temp) + 1.17444 / temp + 0.145986;                            else if(temp < 7.0)                                xD = -4.6070 / (temp * temp * temp) + 2.9678 / (temp * temp) + 0.09911 / temp + 0.244063;                            else xD = -2.0064 / (temp * temp * temp) + 1.9018 / (temp * temp) + 0.24748 / temp + 0.237040;                            float yD = -3.0 * xD * xD + 2.87 * xD - 0.275;                            float X = xD / yD;                            float Z = (1.0 - xD - yD) / yD;                            vec3 color;                            color.r = X * 3.24074 - 1.53726 - Z * 0.498571;                            color.g = -X * 0.969258 + 1.87599 + Z * 0.0415557;                            color.b = X * 0.0556352 - 0.203996 + Z * 1.05707;                            color.g /= tint;                            color /= max(max(color.r, color.g), color.b);                            color = 1.0 / color;                            color /= color.r * 0.299 + color.g * 0.587 + color.b * 0.114;                            return src * color;                        }                        vec3 map_color(vec3 src, float lum)                        {                            vec3 h = src - lum;                            if(src.r > 1.0)                            {                                float tmp = 1.0 - lum;                                h.g = h.g * tmp / h.r;                                h.b = h.b * tmp / h.r;                                h.r = tmp;                            }                            float t3r = h.b + lum;                            if(t3r < -0.00003)                            {                                src.rg = lum - h.rg * lum / h.b;                                src.b = 0.0;                            }                            else                            {                                src.rg = lum + h.rg;                                src.b = t3r;                            }                            return src;                        }                        vec3 dispatch(vec3 src)                        {                            float lum = dot(src, vec3(0.299, 0.587, 0.114));                            if(src.g > src.b)                            {                                if(src.r > src.g)                                {                                    src = map_color(src, lum);                                }                                else if(src.r > src.b)                                {                                    src.grb = map_color(src.grb, lum);                                }                                else                                {                                    src.gbr = map_color(src.gbr, lum);                                }                            }                            else                            {                                if(src.g > src.r)                                {                                    src.bgr = map_color(src.bgr, lum);                                }                                else if(src.b > src.r)                                {                                    src.brg = map_color(src.brg, lum);                                }                                else                                {                                    src.rbg = map_color(src.rbg, lum);                                }                            }                            return src;                        }                        "},o.shader_procession=function(){return"src.rgb = dispatch(whiteBalance(src.rgb, temperature, tint));                        dst = src;"},o.shader_setup=function(e){var o={};o.temperature=t,o.tint=r,e.shader.uniforms(o)},o}};return e}function n(){var e={name:"colorMul",create:function(e){var t=[0,0,0,0,0,0,0,0,0],r={};return(r=_e()).m_context=e,r.init=function(e){switch(t=[0,0,0,0,0,0,0,0,0],"BPSSymbol"==e.get_parcer_status()?e.lookup_symbol(["float","vector","mat",0],!0):2){case 0:t[0]=e.fetch_float(),t[4]=t[0],t[8]=t[0];break;case 1:t[0]=e.fetch_float(),t[4]=e.fetch_float(),t[8]=e.fetch_float();break;case 2:for(var r=0;9!=r;++r)t[r]=e.fetch_float()}},r.shader_uniform=function(){return"uniform mat3 cmul;"},r.shader_procession=function(){return"src.rgb *= cmul;                        dst = vec4(src.rgb, src.a);"},r.shader_setup=function(e){var r={};r.cmul=t,e.shader.uniforms(r)},r}};return e}function c(){var e={name:"mosaic",create:function(e){var t,r,o=0,i=0,a=e,s=0,n=0,c={};return(c=_e()).destroy=function(){o&&o.destroy(),this.size_change()},c.size_change=function(e,t){i&&(a.context().deleteTexture(i),i=0)},c.init=function(e){var r,o;return t=0,e.lookup_symbol(["edge","widthHeight",0],!0)?(r=Math.floor(e.fetch_float()+.5),o=Math.floor(e.fetch_float()+.5)):r=o=t=Math.floor(e.fetch_float()+.5),{w:r,h:o}},c.gpu_process=function(c,u,l){try{r=he(u),o||(o=j(!0,e));var m=this.init(c);t&&(l.m_width>l.m_height?(m.h=t,m.w=t*l.m_width/l.m_height):(m.w=t,m.h=t*l.m_height/l.m_width)),s==m.w&&n==m.h||(s=m.w,n=m.h,i&&(a.context().deleteTexture(i),i=0)),i||(i=pe(s,n,!1));var h=u.current();a.context().bindTexture(a.context().TEXTURE_2D,h),a.context().texParameteri(a.context().TEXTURE_2D,a.context().TEXTURE_MIN_FILTER,a.context().NEAREST),a.context().texParameteri(a.context().TEXTURE_2D,a.context().TEXTURE_MAG_FILTER,a.context().NEAREST),o.gpu_process(i,h,s,n,l.m_frame_buffer),a.context().bindTexture(a.context().TEXTURE_2D,h),a.context().texParameteri(a.context().TEXTURE_2D,a.context().TEXTURE_MIN_FILTER,a.context().LINEAR),a.context().texParameteri(a.context().TEXTURE_2D,a.context().TEXTURE_MAG_FILTER,a.context().LINEAR),o.gpu_process(h,i,l.m_width,l.m_height,l.m_frame_buffer),r.destroy()}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{r.destroy()}},c}};return e}function u(){var e={name:"simplyMosaic",create:function(e){var t,r=e,o=0,i=0,a={};return(a=_e()).destroy=function(){o&&(o.destroy(),o=0)},a.init=function(e,t,r){e.assume_symbol("radius"),i=e.test_symbol("relToWidth")?e.fetch_float(0,1)*t:e.fetch_float()},a.gpu_process=function(e,a,s){try{t=he(a),this.init(e,s.m_width,s.m_height),o||(o=new N(null,"varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform vec2 samplerSteps;                    uniform float intensity;                    uniform float blurPixels;                    void main()                    {                        vec2 coord = floor(textureCoordinate / samplerSteps / blurPixels) * samplerSteps * blurPixels;                        vec4 src = texture2D(inputImageTexture, textureCoordinate);                        vec4 mosaic = texture2D(inputImageTexture, coord + samplerSteps * 0.5);                        gl_FragColor = vec4(mosaic.rgb,src.a);}",r.m_context));var n=fe(r.m_context,s,o);if(n.shader_texture("inputImageTexture",a.current()),function(e){i>e.width/3&&(i=30);var t={};t.blurPixels=i,t.samplerSteps=[1/e.width,1/e.height],e.shader.uniforms(t)}(n),n.draw_to(a.new_temporary()),r.m_context.getError())throw new error("CGEPTPTemplate::gpu_process");a.push_to_current(),t.destroy()}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{t.destroy()}},a}};return e}function l(){var e={name:"halfTone",create:function(e){var t,r=e,o=0,i={};return(i=_e()).destroy=function(){o&&(o.destroy(),o=0)},i.shader_setup=function(e,t,r){var o=e.height,i=e.width,a=o>i?502.65/o:502.65/i,s=2*Math.sin(a/2);s/=a;var n=[];n[0]=1/e.width,n[1]=1/e.height;var c={};c.al=s,c.scale=a,c.halfToneVars=[t,r],c.vSteps=n,e.shader.uniforms(c)},i.gpu_process=function(e,i,a){try{t=he(i),o||(o=new N(null,"varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform vec2 halfToneVars;                    uniform vec2 vSteps;                    uniform float scale;                    uniform float al;                    void main()                    {                        vec4 src = texture2D(inputImageTexture, textureCoordinate);                        vec2 gradient = textureCoordinate / vSteps;                        float lum = dot(src.rgb, vec3(0.299, 0.587, 0.114));                        float alfx = sin(gradient.x*scale)*al;                        float alfy = sin(gradient.y*scale)*al;                        float fa = alfx *alfy*0.1668 + 0.8333;                        lum = lum*fa;                        lum = (lum - halfToneVars.x)*halfToneVars.y;                        src.rgb = mix(vec3(0.3137, 0.1569, 0.6275), vec3(1.0, 1.0, 0.0), lum);                        src.a = 1.0;                        gl_FragColor = src;                    }",r.context()));var s=fe(r.context(),a,o);s.shader_texture("inputImageTexture",i.current());var n=function(e,t){var o=new Uint8Array(e*t*4);if(!o)return{low:.2,fac:1.4};r.context().readPixels(0,0,e,t,r.context().RGBA,r.context().UNSIGNED_BYTE,o);for(var i=new Array(256),a=0;a<256;++a)i[a]=0;var s=e*t;for(a=0;a!=s;++a){var n=.299*o[4*a]+.587*o[4*a+1]+.114*o[4*a+2];++i[Math.floor(n)]}for(a=1;256!=a;++a)i[a]+=i[a-1];var c=0;for(a=0;256!=a;++a)if(i[a]/i[255]>.1){c=a;break}var u=255;for(a=255;a>0;--a)if((i[255]-i[a])/i[255]>.1){u=a;break}var l=255/Math.max(u-c,.01);return o=null,{low:c/=255,range:l}}(s.width,s.height);if(this.shader_setup(s,n.low,n.range),s.draw_to(i.new_temporary()),r.context().getError())throw new error("CGEPTPTemplate::gpu_process");i.push_to_current(),t.destroy()}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{t.destroy()}},i}};return e}function m(){var e={name:"vignette",create:function(e){var t,r,o,i={};return(i=_e()).m_context=e,i.init=function(e){t=e.fetch_float(),r=e.fetch_float(),o=e.test_symbol("factor")?e.fetch_float():1},i.shader_uniform=function(){return"uniform vec2 vignette;                        uniform vec2 vignetteCenter;                        uniform float factor;"},i.shader_procession=function(){return"float d = distance(textureCoordinate, vignetteCenter);                        float percent = clamp((d - vignette.x) / vignette.y, 0.0, 1.0);                        float alpha = (1.0 - percent*percent)*factor;                        dst = vec4(src.rgb * alpha, src.a);"},i.shader_setup=function(e){var i={vignetteCenter:[.5,.5]};i.vignette=[t,r],i.factor=o,e.shader.uniforms(i)},i}};return e}function h(){var e={name:"vignetteAdjust",create:function(e){var t,r,o,i,a=[],s={};return(s=_e()).m_context=e,s.init=function(e){t=e.fetch_float(),r=e.fetch_float(),e.assume_symbol("color"),a[0]=e.fetch_float(0,255),a[1]=e.fetch_float(0,255),a[2]=e.fetch_float(0,255),a[3]=e.fetch_float(0,255),e.assume_symbol("intensity"),o=e.fetch_float(),i=0,e.test_symbol("round")&&(i=e.fetch_float())},s.shader_uniform=function(){return"uniform vec2 vignette;                                uniform vec2 vignetteCenter;                                uniform vec4 vignetteColor;                                uniform float intensity;                                uniform float vignette_roundness;                                uniform vec2 size;"},s.shader_procession=function(){return"vec2 dist = textureCoordinate - vignetteCenter;                                float scalex = mix(1.0, max(1.0, size.x / size.y), vignette_roundness);                                float scaley = mix(1.0, max(1.0, size.y / size.x), vignette_roundness);                                vec2 size_weight = vec2(scalex, scaley);                                dist += dist*(size_weight - 1.0)*float(vignette_roundness >= 0.0);                                float order_norm = 1.0 / mix(0.5, 0.05, max(0.0, -vignette_roundness));                                float dist_norm = pow(pow(abs(dist.x), order_norm) + pow(abs(dist.y), order_norm), 1.0 / order_norm);                                float percent = clamp((dist_norm - vignette.x) / vignette.y, 0.0, 1.0);                                percent = percent * percent * (3.0 - 2.0 * percent);                                float alpha = 1.0 *intensity*percent;                                dst = vec4(vec3(vignetteColor.xyz),alpha);"},s.shader_setup=function(e){var s={vignetteCenter:[.5,.5]};s.vignette=[t,r],s.vignetteColor=[a[0]/255,a[1]/255,a[2]/255,a[3]/255],s.intensity=o,s.vignette_roundness=i,s.size=[e.width,e.height],e.shader.uniforms(s)},s}};return e}function _(){var e={name:"redeyeRemove",create:function(e){var t,r,o,i=[],a={};return(a=_e()).m_context=e,a.init=function(e){o="BPSSymbol"==e.get_parcer_status()?e.lookup_symbol(["relativePosition","realPosition",0],!0):0,i[0]=e.fetch_float(),i[1]=e.fetch_float(),t=e.fetch_float(),r=e.fetch_float()},a.shader_uniform=function(){return"uniform vec2 samplerSteps;                        uniform vec2 eyePosition;                        uniform float radius;                        uniform float alpha;"},a.shader_procession=function(){return"vec2 realPosition = textureCoordinate / samplerSteps;                        float dis1 = distance(realPosition,eyePosition);                        vec4 color = src;                        if(dis1 >= radius)                        {                            dst = color;                        }                        else                        {                            vec3 v = color.rgb;                            v.r = (color.g + color.b) / 2.0;                            v.g = (color.g + color.r) / 2.0;                            v.b = (color.b + color.r) / 2.0;                            float vecR = color.r - v.r;                            float vecG = color.g - v.g;                            float vecB = color.b - v.b;                                                        float r1 = v.r+vecR*pow(dis1/radius,1.5);                            float g1 = v.g+vecG*pow(dis1/radius,1.5);                            float b1 = v.b+vecB*pow(dis1/radius,1.5);                            dst = vec4(r1,g1,b1,color.a);                        }"},a.shader_setup=function(e){var a=[];switch(o){case 0:a[0]=i[0]*e.width,a[1]=i[1]*e.height;break;case 1:a[0]=i[0],a[1]=i[1];break;default:throw new error("Unexpected Redeye Remove Model!\n")}var s={};s.samplerSteps=[1/e.width,1/e.height],s.eyePosition=[a[0],a[1]],s.radius=t,s.alpha=r,e.shader.uniforms(s)},a}};return e}function f(){var e={name:"special",create:function(e){var t={};return(t=_e()).m_context=e,t.init=function(e){},t.shader_uniform=function(){return"const float fh_red = 0.1;                        const float fh_yellow = -0.7;                        const float fh_green = -0.7;                        const float fh_cyan = -0.7;                        const float fh_blue = -0.7;                        const float fh_magenta = 0.1;"},t.shader_procession=function(){return"vec3 dst3;                        vec3 hsv;                        vec3 tmp_s;                        float fmax;                        float fmin;                        float fdelta;                        float fs_off;                        dst3 = src.rgb;                        fmax = max(dst3.r,max(dst3.g,dst3.b));                        fmin = min(dst3.r,min(dst3.g,dst3.b));                        fdelta = fmax - fmin;                        hsv.z = fmax;                        if(0.0 == fdelta)                        {                            hsv.x = 0.0;                            hsv.y = 0.0;                            tmp_s = dst3;                        }                        else                        {                            hsv.y = fdelta/fmax;                            if(fmax == dst3.r)                            {                                if(dst3.g >= dst3.b)                                {                                    hsv.x = (dst3.g - dst3.b)/fdelta;                                    fs_off = (fh_yellow - fh_red)*hsv.x + fh_red;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    hsv.y = min(1.0 , hsv.y);                                    hsv.y = max(0.0 , hsv.y);                                    dst3.r = hsv.z;                                    dst3.b = hsv.z*(1.0 - hsv.y);                                    dst3.g = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                                    tmp_s = dst3;                                    hsv.x = 0.658325;                                    dst3.r = hsv.z;                                    dst3.b = hsv.z*(1.0 - hsv.y);                                    dst3.g = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                                }                                else                                {                                    hsv.x = (dst3.r - dst3.b)/fdelta;                                    fs_off = (fh_red - fh_magenta)*hsv.x + fh_magenta;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    hsv.y = min(1.0 , hsv.y);                                    hsv.y = max(0.0 , hsv.y);                                    dst3.r = hsv.z;                                    dst3.g = hsv.z*(1.0 - hsv.y);                                    dst3.b = hsv.z*(1.0 - hsv.y*hsv.x);                                    tmp_s = dst3;                                    hsv.x = 0.658325;                                    dst3.r = hsv.z;                                    dst3.g = hsv.z*(1.0 - hsv.y);                                    dst3.b = hsv.z*(1.0 - hsv.y*hsv.x);                                }                            }                            else if(fmax == dst3.g)                            {                                if(dst3.r > dst3.b)                                {                                    hsv.x = (dst3.g - dst3.r)/fdelta;                                    fs_off = (fh_green - fh_yellow)*hsv.x + fh_yellow;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    hsv.y = min(1.0 , hsv.y);                                    hsv.y = max(0.0 , hsv.y);                                    dst3.g = hsv.z;                                    dst3.r = hsv.z*(1.0 - hsv.y*hsv.x);                                    dst3.b = hsv.z*(1.0 - hsv.y);                                    tmp_s = dst3;                                    hsv.x = 0.658325;                                    dst3.g = hsv.z;                                    dst3.r = hsv.z*(1.0 - hsv.y*hsv.x);                                    dst3.b = hsv.z*(1.0 - hsv.y);                                }                                else                                {                                    hsv.x = (dst3.b - dst3.r)/fdelta;                                    fs_off = (fh_cyan - fh_green)*hsv.x + fh_green;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    hsv.y = min(1.0 , hsv.y);                                    hsv.y = max(0.0 , hsv.y);                                    dst3.g = hsv.z;                                    dst3.r = hsv.z*(1.0 - hsv.y);                                    dst3.b = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                                    tmp_s = dst3;                                    hsv.x = 0.658325;                                    dst3.g = hsv.z;                                    dst3.r = hsv.z*(1.0 - hsv.y);                                    dst3.b = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                                }                            }                            else                            {                                if(dst3.g > dst3.r)                                {                                    hsv.x = (dst3.b - dst3.g)/fdelta;                                    fs_off = (fh_blue - fh_cyan)*hsv.x + fh_cyan;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    hsv.y = min(1.0 , hsv.y);                                    hsv.y = max(0.0 , hsv.y);                                    dst3.b = hsv.z;                                    dst3.r = hsv.z*(1.0 - hsv.y);                                    dst3.g = hsv.z*(1.0 - hsv.y*hsv.x);                                    tmp_s = dst3;                                    hsv.x = 0.658325;                                    dst3.b = hsv.z;                                    dst3.r = hsv.z*(1.0 - hsv.y);                                    dst3.g = hsv.z*(1.0 - hsv.y*hsv.x);                                }                                else                                {                                    hsv.x = (dst3.r - dst3.g)/fdelta;                                    fs_off = (fh_magenta - fh_blue)*hsv.x + fh_blue;                                    hsv.y = hsv.y*(1.0 + fs_off);                                    hsv.y = min(1.0 , hsv.y);                                    hsv.y = max(0.0 , hsv.y);                                    dst3.b = hsv.z;                                    dst3.r = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                                    dst3.g = hsv.z*(1.0 - hsv.y);                                    tmp_s = dst3;                                    hsv.x = 0.658325;                                    dst3.b = hsv.z;                                    dst3.r = hsv.z*(1.0 - hsv.y + hsv.y*hsv.x);                                    dst3.g = hsv.z*(1.0 - hsv.y);                                }                            }                        }                        dst3.r = hsv.z;                        dst3.g = hsv.z*(1.0 - hsv.y);                        dst3.b = hsv.z*(1.0 - hsv.y*hsv.x);                        dst3 = tmp_s * 0.69 + dst3 * 0.31;                        dst = vec4(dst3,src.a);"},t.shader_setup=function(e){},t}};return e}function d(){var e={name:"darkEngraving",create:function(e){var t={};return(t=_e()).m_context=e,t.init=function(e){},t.shader_uniform=function(){return"uniform vec2 vSteps;                        const float intensity = 0.45;                        float getLum(vec3 src)                        {                            return dot(src, vec3(0.299, 0.587, 0.114));                        }"},t.shader_procession=function(){return"mat3 m;                        m[0][0] = getLum(texture2D(inputImageTexture, textureCoordinate - vSteps).rgb);                        m[0][1] = getLum(texture2D(inputImageTexture, textureCoordinate - vec2(0.0, vSteps.y)).rgb);                        m[0][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(vSteps.x, -vSteps.y)).rgb);                        m[1][0] = getLum(texture2D(inputImageTexture, textureCoordinate - vec2(vSteps.x, 0.0)).rgb);                        m[1][1] = getLum(src.rgb);                        m[1][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(vSteps.x, 0.0)).rgb);                        m[2][0] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(-vSteps.x, vSteps.y)).rgb);                        m[2][1] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(0.0, vSteps.y)).rgb);                        m[2][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vSteps).rgb);                        float nx = m[0][0] + m[0][1] + m[0][2] - m[2][0] - m[2][1] - m[2][2];                        float ny = m[0][0] + m[1][0] + m[2][0] - m[0][2] - m[1][2] - m[2][2];                        float ndl = abs(nx + ny + intensity);                        float shade = 0.0;                        float norm = (nx * nx + ny * ny + intensity * intensity);                        shade = (ndl * 0.577) / sqrt(norm);                        dst = vec4(src.rgb * shade, src.a);"},t.shader_setup=function(e){var t=[];t[0]=1/e.width,t[1]=1/e.height;var r={};r.vSteps=t,e.shader.uniforms(r)},t}};return e}function g(){var e={name:"embossed",create:function(e){var t={};return(t=_e()).m_context=e,t.init=function(e){},t.shader_uniform=function(){return"uniform vec2 vSteps;                        const float intensity = 0.45;                        float getLum(vec3 src)                        {                            return dot(src, vec3(0.299, 0.587, 0.114));                        }"},t.shader_procession=function(){return"mat3 m;                        m[0][0] = getLum(texture2D(inputImageTexture, textureCoordinate - vSteps).rgb);                        m[0][1] = getLum(texture2D(inputImageTexture, textureCoordinate - vec2(0.0, vSteps.y)).rgb);                        m[0][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(vSteps.x, -vSteps.y)).rgb);                        m[1][0] = getLum(texture2D(inputImageTexture, textureCoordinate - vec2(vSteps.x, 0.0)).rgb);                        m[1][1] = getLum(src.rgb);                        m[1][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(vSteps.x, 0.0)).rgb);                        m[2][0] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(-vSteps.x, vSteps.y)).rgb);                        m[2][1] = getLum(texture2D(inputImageTexture, textureCoordinate + vec2(0.0, vSteps.y)).rgb);                        m[2][2] = getLum(texture2D(inputImageTexture, textureCoordinate + vSteps).rgb);                        float nx = m[0][0] + m[0][1] + m[0][2] - m[2][0] - m[2][1] - m[2][2];                        float ny = m[0][0] + m[1][0] + m[2][0] - m[0][2] - m[1][2] - m[2][2];                        float ndl = abs(nx + ny + intensity);                        float shade = 0.0;                        float norm = (nx * nx + ny * ny + intensity * intensity);                        shade = (ndl * 0.577) / sqrt(norm);                        dst = vec4(vec3(shade), src.a);"},t.shader_setup=function(e){var t=[];t[0]=1/e.width,t[1]=1/e.height;var r={};r.vSteps=t,e.shader.uniforms(r)},t}};return e}function v(){var e={name:"initialized",create:function(e){var t={};return(t=_e()).m_context=e,t.init=function(e){},t.shader_uniform=function(){return"                        vec3 blend(vec3 src1, vec3 src2, float alpha)                        {                            return mix(src1, src2, alpha);                        }"},t.shader_procession=function(){return"dst.xyz = blend(vec3(1.0, 1.0, 1.0), src.xyz, src.w);                        dst.w = 1.0;"},t.shader_setup=function(e){},t}};return e}function x(){var e={name:"gaussianBlur",create:function(e){var t,r,o,i=0,a=0,s=e;function n(e,o,i){var a={};a.samplerSteps=[1/o,1/i],a.radius=t,a.sigma=r,e.shader.uniforms(a)}var c={destroy:function(){i&&(i.destroy(),i=0),a&&(a.destroy(),a=0)}};return c.gpu_process=function(e,c,u){try{o=he(c),function(e){t=e.fetch_float(),r=e.fetch_float()}(e),i||(i=new N(null,"varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform vec2 samplerSteps;                    uniform float radius;                    uniform float sigma;                    float random(vec3 scale, float seed) {                        return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);                    }                    float sigma_s = 3.0;                    vec4 guidedFilter(vec2 uv)                    {                        float res_w = 1.0;                        vec3 center_g = texture2D(inputImageTexture, uv).rgb;                        float sigma_i = 0.5 / sigma / sigma;                        float offset2 = random(vec3(12.9898, 78.233, 151.7182), 0.0);                        float offset = random(vec3(151.7182, 12.9898, 78.233), 0.0);                        for (float i = -16.0; i <= 16.0; i++) {                        vec2 coord_sample = uv + vec2(float(i) + offset - 0.5, offset2 - 0.5)*samplerSteps*radius / 16.0;                        vec3 tmp_g = texture2D(inputImageTexture, coord_sample).rgb;                        vec3 diff_g = (tmp_g - center_g);                        float tmp_w = exp(-(i*i)*sigma_i);                        center_g += tmp_w*tmp_g;                        res_w += tmp_w;                    }                        vec4 res = vec4(center_g / res_w,res_w/16.0);                        return res;                    }                    void main() {                        vec4 res_t = guidedFilter(textureCoordinate);                        gl_FragColor = res_t;                    }",s.context())),a||(a=new N(null,"varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform vec2 samplerSteps;                    uniform float radius;                    uniform float sigma;                    float random(vec3 scale, float seed) {                        return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);                    }                    float sigma_s = 3.0;                    vec4 guidedFilter(vec2 uv)                    {                        float res_w = 1.0;                        vec3 center_g = texture2D(inputImageTexture, uv).rgb;                        float sigma_i = 0.5 / sigma / sigma;                        float offset2 = random(vec3(12.9898, 78.233, 151.7182), 0.0);                        float offset = random(vec3(151.7182, 12.9898, 78.233), 0.0);                        for (float i = -16.0; i <= 16.0; i++) {                        vec2 coord_sample = uv + vec2(offset - 0.5, float(i) + offset2 - 0.5)*samplerSteps*radius/16.0;                        float tmp_h = texture2D(inputImageTexture, coord_sample).a;                        vec3 tmp_g = texture2D(inputImageTexture, coord_sample).rgb;                        vec3 diff_g = (tmp_g - center_g);                        float tmp_w = exp(-(i*i)*sigma_i)*tmp_h;                        center_g += tmp_w*tmp_g;                        res_w += tmp_w;                    }                        vec4 res = vec4(center_g / res_w, 1.0);                        return res;                    }                    void main() {                        vec4 res_t = guidedFilter(textureCoordinate);                        gl_FragColor = res_t;                    }",s.context()));var l=fe(s.context(),u,i);if(l.shader_texture("inputImageTexture",c.current()),n(l,l.width,l.height),l.draw_to(c.new_temporary()),s.context().getError())throw new error("CGEPTPTemplate::gpu_process");c.push_to_current();var m=fe(s.context(),u,a);if(m.shader_texture("inputImageTexture",c.current()),n(m,m.width,m.height),m.draw_to(c.new_temporary()),s.context().getError())throw new error("CGEPTPTemplate::gpu_process");c.push_to_current(),o.destroy()}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{o.destroy()}},c}};return e}function p(){var e={name:"colorMatf",create:function(e){var t=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r={};return(r=_e()).m_context=e,r.init=function(e){for(var r=0;16!=r;++r)t[r]=e.fetch_float()},r.shader_uniform=function(){return"uniform mat4 cmul;"},r.shader_procession=function(){return"src *= cmul;                        dst = src;"},r.shader_setup=function(e){var r={};r.cmul=t,e.shader.uniforms(r)},r}};return e}function b(){var e={name:"noise",create:function(e){var t=0,r=0,o={};return(o=_e()).m_context=e,o.init=function(e){t=e.fetch_float(),r=e.fetch_float()+.2},o.shader_uniform=function(){return"uniform vec2 imgSize;                        uniform float scale;                        uniform float grain_amount;                        uniform float grain_size;                        const float timer = 1.0;                        const float intensity = 0.5;                        const float permTexUnit = 1.0 / 256.0;                        const float permTexUnitHalf = 0.5 / 256.0;                        const vec3 lumcoeff = vec3(0.299, 0.587, 0.114);                        vec4 rnm(in vec2 tc) {                            float noise = sin(dot(tc + vec2(timer), vec2(12.9898, 78.233))) * 43758.5453;                            return fract(vec4(1.0, 1.2154, 1.3453, 1.3647) * noise) * 2.0 - 1.0;                        }                        float fade(in float t) {                            return t*t*t*(t*(t*6.0 - 15.0) + 10.0);                        }                        float pnoise3D(in vec3 p) {                            vec3 pi = permTexUnit*floor(p) + permTexUnitHalf;                            vec3 pf = fract(p);                            float perm00 = rnm(pi.xy).a;                            vec3  grad000 = rnm(vec2(perm00, pi.z)).rgb * 4.0 - 1.0;                            float n000 = dot(grad000, pf);                            vec3  grad001 = rnm(vec2(perm00, pi.z + permTexUnit)).rgb * 4.0 - 1.0;                            float n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));                            float perm01 = rnm(pi.xy + vec2(0.0, permTexUnit)).a;                            vec3  grad010 = rnm(vec2(perm01, pi.z)).rgb * 4.0 - 1.0;                            float n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));                            vec3  grad011 = rnm(vec2(perm01, pi.z + permTexUnit)).rgb * 4.0 - 1.0;                            float n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));                            float perm10 = rnm(pi.xy + vec2(permTexUnit, 0.0)).a;                            vec3  grad100 = rnm(vec2(perm10, pi.z)).rgb * 4.0 - 1.0;                            float n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));                            vec3  grad101 = rnm(vec2(perm10, pi.z + permTexUnit)).rgb * 4.0 - 1.0;                            float n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));                            float perm11 = rnm(pi.xy + vec2(permTexUnit, permTexUnit)).a;                            vec3  grad110 = rnm(vec2(perm11, pi.z)).rgb * 4.0 - 1.0;                            float n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));                            vec3  grad111 = rnm(vec2(perm11, pi.z + permTexUnit)).rgb * 4.0 - 1.0;                            float n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));                            vec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));                            vec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));                            return mix(n_xy.x, n_xy.y, fade(pf.z));                        }                        vec2 coordRot(in vec2 tc, in float angle) {                            float aspect = imgSize.x / imgSize.y;                            float rotX = ((tc.x*2.0 - 1.0)*aspect*cos(angle)) - ((tc.y*2.0 - 1.0)*sin(angle));                            float rotY = ((tc.y*2.0 - 1.0)*cos(angle)) + ((tc.x*2.0 - 1.0)*aspect*sin(angle));                            return vec2((rotX / aspect)*0.5 + 0.5, rotY*0.5 + 0.5);                        }"},o.shader_procession=function(){return"float size = grain_size;                        float grain = grain_amount;                        vec3 rotOffset = vec3(1.425, 3.892, 5.835);                        vec2 rotCoordsR = coordRot(textureCoordinate.xy, timer + rotOffset.x);                        vec3 noise = vec3(pnoise3D(vec3(imgSize / size * rotCoordsR, 0.0)));                                                float luminance = mix(0.0, dot(src.rgb, lumcoeff), intensity);                        luminance = clamp(1.0-luminance / 0.2, 0.0, 1.0) + luminance;                        noise = mix(noise, vec3(0.0), pow(luminance, 4.0));                        dst = vec4(src.rgb + noise * grain,src.a);"},o.shader_setup=function(e){var o={};o.imgSize=[e.width,e.height];var i=Math.sqrt(e.width*e.width+e.height*e.height),a=Math.sqrt(i/2828.42712);a=Math.max(a,1)*r*2;var s=Math.sqrt(i/2828.42712)*t*.2;o.grain_amount=s,o.grain_size=a,e.shader.uniforms(o)},o}};return e}function y(){var e={name:"blemishFix",create:function(e){var t,r=0,o=0,i=0,a=0,s=0,n=0,c=new Array(2),u=e,l=0,m=0;function h(e,t,r,o){var i=u.context();i.bindFramebuffer(i.FRAMEBUFFER,o),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,r,0),i.viewport(e[0],e[1],t[0]-e[0],t[1]-e[1]),i.drawArrays(i.TRIANGLE_FAN,0,4)}var _={destroy:function(){if(r&&(r.destroy(),r=0),o&&(o.destroy(),o=0),a&&(a.destroy(),a=0),i&&(i.destroy(),i=0),this.size_change(0,0),s){for(var e=0;e<s.length;++e)u.context().deleteTexture(s[e]);s=0}n&&(u.context().deleteTexture(n),s=0)},size_change:function(e,t){if(!s||0!=e&&0!=t){if(e!=l||t!=m){if(s)for(r=0;r<s.length;++r)u.context().deleteTexture(s[r]);n&&u.context().deleteTexture(n),(s=new Array(2))[0]=pe(e/4,t/4,!0),s[1]=pe(e/4,t/4,!0),n=pe(e,t,!0),l=e,m=e}}else{for(var r=0;r<s.length;++r)u.context().deleteTexture(s[r]);u.context().deleteTexture(n),s=0,n=0}}};return _.gpu_process=function(e,l,m){try{t=he(l),this.size_change(m.m_width,m.m_height),function(e){for(c=[];e.test_symbol("point");){var t,r=[];r[0]=e.fetch_float(),r[1]=e.fetch_float(),e.assume_symbol("radius"),t=e.fetch_float(),c.push({pos:r,radius:t})}}(e),i||(i=new N(null,"varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform sampler2D blemishTexture;                    uniform float center_x;                    uniform float radius_x;                    uniform vec4 trans;                    void main()                    {                        vec4 dst;                        vec2 coord = textureCoordinate*trans.xy+trans.zw;                        if (coord.x <center_x)                        {                            dst = texture2D(inputImageTexture, coord - vec2(radius_x, 0.0));                        }                        else                        {                            dst = texture2D(inputImageTexture, coord + vec2(radius_x, 0.0));                        }                        gl_FragColor = dst;                    }",u.context())),r||(r=new N(null,"varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform sampler2D blemishTexture;                    uniform vec2 pos;                    uniform float radius;                    uniform vec2 size;                    uniform vec4 trans;                    vec4 fuckingBlur(vec3 sCol,vec2 uv){                        float sigma_i = 0.5/5.0/5.0;                        float res_w = 1.0;                        for(float i = -7.0; i <= 7.0; i++){                            vec2 coord_sample;                            if ((abs(uv.y*size.y + i - pos.y))>(radius))                                continue;                            coord_sample = uv + vec2(0.0, (float(i))) / size;                            vec3 tmp_g = texture2D(blemishTexture, coord_sample).rgb;                            float tmp_w = exp(-(i*i)*sigma_i);                            sCol += tmp_w*tmp_g;                            res_w += tmp_w;                        }                        vec4 res = vec4(sCol / res_w,res_w/7.0);                        return res;                    }                    void main()                    {                        vec4 col;                        vec2 coord = textureCoordinate*trans.xy+trans.zw;                        float dis = distance(coord*size, pos);                        if (dis< radius)                        {                            col = fuckingBlur(texture2D(blemishTexture, coord).rgb, coord);                        }                        else                            col = texture2D(blemishTexture, coord);                        gl_FragColor = col;                    }",u.context())),o||(o=new N(null,"varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform sampler2D blemishTexture;                    uniform vec2 pos;                    uniform float radius;                    uniform vec2 size;                    uniform vec4 trans;                    vec3 lightenMix(vec3 src, vec3 dst, float alpha){                        return mix(src, max(src, dst), alpha);                    }                    vec3 fuckingBlur(vec3 sCol, vec2 uv){                        float sigma_i = 0.5 / 5.0 / 5.0;                        float res_w = 1.0;                        for (float i = -7.0; i <= 7.0; i++){                            vec2 coord_sample;                            if ((abs(uv.x*size.x + i - pos.x)) > (radius))                                continue;                            coord_sample = uv + vec2((float(i)),0.0) / size;                            vec3 tmp_g = texture2D(blemishTexture, coord_sample).rgb;                            float tmp_h = texture2D(blemishTexture, coord_sample).a;                            float tmp_w = exp(-(i*i)*sigma_i)*tmp_h;                            sCol += tmp_w*tmp_g;                            res_w += tmp_w;                        }                        vec3 res = sCol / res_w;                        return res;                    }                    void main()                    {                        vec3 col;                        vec2 coord = textureCoordinate*trans.xy+trans.zw;                        float dis = distance(coord*size, pos);                        if (dis < radius)                        {                            col = texture2D(blemishTexture, coord).rgb;                            col = fuckingBlur(col, coord);                            col = lightenMix(texture2D(inputImageTexture, coord).rgb, col, (1.0 -dis/radius)*0.65);                        }                        else                            col = texture2D(inputImageTexture, coord).rgb;                        gl_FragColor = vec4(col, 1.0);                    }",u.context())),a||(a=new N(null,"varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform sampler2D blemishTexture;                    void main()                    {                        vec4 blemish = texture2D(blemishTexture, textureCoordinate);                        vec4 src = texture2D(inputImageTexture, textureCoordinate);                        gl_FragColor = vec4(mix(src.xyz,blemish.xyz,blemish.w),src.w);                    }",u.context()));for(var _=0;_<c.length;++_){var f=[Math.floor(c[_].pos[0]-c[_].radius),Math.floor(c[_].pos[1]-c[_].radius)],d=[Math.ceil(c[_].pos[0]+c[_].radius),Math.ceil(c[_].pos[1]+c[_].radius)];f[0]=Math.min(Math.max(0,f[0]),m.m_width),f[1]=Math.min(Math.max(0,f[1]),m.m_height),d[0]=Math.min(Math.max(0,d[0]),m.m_width),d[1]=Math.min(Math.max(0,d[1]),m.m_height);var g=[Math.floor(f[0]/4),Math.floor(f[1]/4)],v=[Math.ceil(d[0]/4),Math.ceil(d[1]/4)],x=fe(u.context(),null,i,m.m_width/4,m.m_height/4,m.m_frame_buffer);x.shader_texture("inputImageTexture",l.current());var p={};p.center_x=c[_].pos[0]/m.m_width,p.radius_x=c[_].radius/m.m_width,p.trans=[(v[0]-g[0])/(m.m_width/4),(v[1]-g[1])/(m.m_height/4),g[0]/(m.m_width/4),g[1]/(m.m_height/4)],x.shader.uniforms(p),h(g,v,s[0],m.m_frame_buffer);var b=fe(u.context(),null,r,m.m_width/4,m.m_height/4,m.m_frame_buffer);b.shader_texture("inputImageTexture",l.current()),b.shader_texture("blemishTexture",s[0]),(p={}).size=[m.m_width,m.m_height],p.pos=c[_].pos,p.radius=c[_].radius,p.trans=[(v[0]-g[0])/(m.m_width/4),(v[1]-g[1])/(m.m_height/4),g[0]/(m.m_width/4),g[1]/(m.m_height/4)],b.shader.uniforms(p),h(g,v,s[1],m.m_frame_buffer);var y=fe(u.context(),m,o);if(y.shader_texture("inputImageTexture",l.current()),y.shader_texture("blemishTexture",s[1]),(p={}).size=[y.width,y.height],p.pos=c[_].pos,p.radius=c[_].radius,p.trans=[(d[0]-f[0])/m.m_width,(d[1]-f[1])/m.m_height,f[0]/m.m_width,f[1]/m.m_height],y.shader.uniforms(p),h(f,d,n,m.m_frame_buffer),u.context().bindFramebuffer(u.context().FRAMEBUFFER,m.m_frame_buffer),u.context().framebufferTexture2D(u.context().FRAMEBUFFER,u.context().COLOR_ATTACHMENT0,u.context().TEXTURE_2D,n,0),u.context().activeTexture(u.context().TEXTURE0),u.context().bindTexture(u.context().TEXTURE_2D,l.current()),u.context().copyTexSubImage2D(u.context().TEXTURE_2D,0,f[0],f[1],f[0],f[1],d[0]-f[0],d[1]-f[1]),u.context().getError())throw new error("CGEPTPTemplate::gpu_process");t.destroy()}}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{t.destroy()}},_}};return e}function w(){var e={name:"clone",create:function(e){var t=new Array(2),r=new Array(2),o={};return(o=_e()).m_context=e,o.init=function(e){t[0]=e.fetch_float(),t[1]=e.fetch_float(),r[0]=e.fetch_float(),r[1]=e.fetch_float(),e.fetch_float()},o.shader_uniform=function(){return"uniform vec2 offset;"},o.shader_procession=function(){return"vec2 cod = textureCoordinate - offset;                                src = texture2D(inputImageTexture, textureCoordinate);                        if (cod.x<1.0&&cod.x>0.0&&cod.y > 0.0&&cod.y < 1.0)                            dst = texture2D(inputImageTexture, cod);                        else                            dst = src;"},o.shader_setup=function(e){var o={};o.offset=[(r[0]-t[0])/e.width,(r[1]-t[1])/e.height],e.shader.uniforms(o)},o}};return e}function T(){var e={name:"marscara",create:function(e){var t=0,r={};return(r=_e()).m_context=e,r.init=function(e){t=e.fetch_float()/5},r.shader_uniform=function(){return"uniform vec2 samplerSteps;                        const int samplerRadius = 5;                        uniform float samplerScale;"},r.shader_procession=function(){return"vec3 sum = src.rgb;                        float cnt = 1.0;                        for (int i = 1; i <= samplerRadius; ++i)                        {                            float scale = float(i) * samplerScale;                            sum += texture2D(inputImageTexture, textureCoordinate + scale * vec2(samplerSteps.x, 0.0)).rgb;                            sum += texture2D(inputImageTexture, textureCoordinate + scale * vec2(-samplerSteps.x, 0.0)).rgb;                            sum += texture2D(inputImageTexture, textureCoordinate + scale * vec2(0.0, samplerSteps.y)).rgb;                            sum += texture2D(inputImageTexture, textureCoordinate + scale * vec2(0.0, -samplerSteps.y)).rgb;                            cnt += 4.0;                        }                        dst = vec4(src.rgb - max(sum / cnt - src.rgb, 0.0), src.a);"},r.shader_setup=function(e){var r={};r.samplerSteps=[1/e.width,1/e.height],r.samplerScale=t,e.shader.uniforms(r)},r}};return e}function C(){var e={name:"eyeBrighten",create:function(e){var t=0,r={};return(r=_e()).m_context=e,r.init=function(e){t=e.fetch_float()},r.shader_uniform=function(){return"uniform vec2 samplerSteps;                        uniform float intensity;                        const int samplerLimit = 5;                        const float weight = float(samplerLimit) * 4.0 + 1.0;                        "},r.shader_procession=function(){return"vec3 sum = src.rgb;                        vec2 len = 2.0 * samplerSteps;                        for (int i = 1; i <= samplerLimit; ++i)                        {                            sum += texture2D(inputImageTexture, textureCoordinate - len).rgb;                            sum += texture2D(inputImageTexture, vec2(textureCoordinate.x - len.x, textureCoordinate.y + len.y)).rgb;                            sum += texture2D(inputImageTexture, vec2(textureCoordinate.x + len.x, textureCoordinate.y - len.y)).rgb;                            sum += texture2D(inputImageTexture, textureCoordinate + len).rgb;                            len *= 2.0;                        }                       vec3 _dst = max(src.rgb - sum / weight,0.0);                       vec3 bmp2 = max(sum / weight - src.rgb, 0.0);                       dst = vec4(mix(src.rgb, max(max(src.rgb - bmp2,0.0)+_dst,0.0), intensity),src.a);"},r.shader_setup=function(e){var r={};r.samplerSteps=[1/e.width,1/e.height],r.intensity=t/100,e.shader.uniforms(r)},r}};return e}function S(){var e={name:"eyeTint",create:function(e){var t=0,r=new Array(3),o={};return(o=_e()).m_context=e,o.init=function(e){r[0]=e.fetch_float(),r[1]=e.fetch_float(),r[2]=e.fetch_float(),t=e.fetch_float()},o.shader_uniform=function(){return"uniform vec3 tintColor;                        uniform float intensity;                        "},o.shader_procession=function(){return"float lsrc = dot(src.rgb, vec3(0.299, 0.587, 0.114));                        float tintLum = dot(tintColor, vec3(0.299, 0.587, 0.114));                        float srcLum = dot(vec3(lsrc), vec3(0.299, 0.587, 0.114));                        vec3 tint = tintColor + srcLum - tintLum;                        float mn = min(tint.r, min(tint.g, tint.b));                        float mx = max(tint.r, max(tint.g, tint.b));                        if (mn < 0.0)                        {                            tint = srcLum + (tint - srcLum) * srcLum / (srcLum - mn);                        }                        if (mx > 1.0)                        {                            tint = srcLum + (tint - srcLum) * (1.0 - srcLum) / (mx - srcLum);                        }                        dst = vec4(mix(src.rgb,tint,intensity), src.a);"},o.shader_setup=function(e){var o={};o.tintColor=[r[0]/255,r[1]/255,r[2]/255],o.intensity=t/100,e.shader.uniforms(o)},o}};return e}function E(){var e={name:"reshape",create:function(e){var t,r=0,o=0,i=e,a=0,s=0,n=0,c=0,u=[],l=[],m="varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform vec2 samplerSteps;                    uniform vec2 pos;                    uniform vec2 v;                    uniform float radius;                    vec2 get_vector(float gvx, float gvy)                    {                        vec4 dst_v= texture2D(inputImageTexture, vec2(gvx, gvy)*samplerSteps);                        vec2 result;                        result.x = dst_v.x + (dst_v.z - 0.5) / 255.0;                        result.x = (result.x - 0.5)*2.0;                        result.y = dst_v.y + (dst_v.w - 0.5) / 255.0;                        result.y = (result.y - 0.5)*2.0;                        return result;                    }                    void main()                    {                        float dx = (textureCoordinate.x - pos.x)/samplerSteps.x;                        float dy = (textureCoordinate.y - pos.y)/samplerSteps.y;                        float r = 1.0 - ((dx / radius)*(dx / radius) + (dy / radius)*(dy / radius));                        vec4 dst;                        if (r > 0.0)                        {                            r = r*r;                            float cdx = v.x*r;                            float cdy = v.y*r;                            float gvx = textureCoordinate.x/samplerSteps.x + cdx;                            gvx = max(0.0, min(gvx, 1.0 / samplerSteps.x));                            float gvy = textureCoordinate.y/samplerSteps.y + cdy;                            gvy = max(0.0, min(gvy, 1.0 / samplerSteps.y));                            vec2 ov;                            ov = get_vector(gvx, gvy);                            gvx = gvx*samplerSteps.x + ov.x;                            gvy = gvy*samplerSteps.y + ov.y;                            vec2 _dis = vec2(min(1.0,max(gvx - textureCoordinate.x,-1.0)),                            min(1.0,max(gvy - textureCoordinate.y,-1.0)));                            {                                float cx = _dis.x*127.5+128.0;                                float fcx = floor(cx);                                dst.z = cx - fcx;                                dst.x = fcx*(1.0 / 255.0);                            }                            {                                float cy = _dis.y*127.5 +128.0;                                float fcy = floor(cy);                                dst.w = cy - fcy;                                dst.y = fcy*(1.0 / 255.0);                                                    }                        }                        else{                            dst = texture2D(inputImageTexture, textureCoordinate);                        }                        gl_FragColor = dst;                    }";function h(e,t,o){if(a||(_(t,a=pe(t.m_width/o,t.m_height/o,!0)),m_last_src=""),s||_(t,s=pe(t.m_width/o,t.m_height/o,!0)),e.get_log()!=m_last_src&&(_(t,a),_(t,s),m_last_src=e.get_log()),function(e,t,r){if(e.lookup_symbol(["coordinate","realPixel",0],!0))for(;e.test_symbol("point");){var o={vecPoints:{},stress:0,radius:0};e.assume_symbol("stress"),o.stress=e.fetch_float(),e.assume_symbol("radius"),o.radius=e.fetch_float();var i=e.fetch_float(),a=e.fetch_float();o.vecPoints={x:i,y:a},u.push(o)}else for(;e.test_symbol("point");)o={vecPoints:{},stress:0,radius:0},e.assume_symbol("stress"),o.stress=e.fetch_float(),e.assume_symbol("radius"),o.radius=e.fetch_float(),i=e.fetch_float()*t,a=e.fetch_float()*r,o.vecPoints={x:i,y:a},u.push(o);if(u.length<2)throw new Error("need more point")}(e,t.m_width,t.m_height),function(){if(u.length<l.length||!l.length)return l=u,!0;for(var e=l.length,t=0;t<e;++t)if(u[t].radius!=l[t].radius||u[t].stress!=l[t].stress||u[t].vecPoints.x!=l[t].vecPoints.x||u[t].vecPoints.y!=l[t].vecPoints.y)return l=u,!0;return u.length==l.length?(u=[],!1):(l=u,u=u.slice(e-1),!1)}()&&(_(t,a),_(t,s)),u.length){r||(r=new N(null,m,i.context()));for(var n,c=!0,h=0;h<u.length-1;++h)for(var f=u[h].vecPoints.x,d=u[h].vecPoints.y,g=u[h+1].vecPoints.x,v=u[h+1].vecPoints.y,x=u[h+1].stress,p=u[h+1].radius,b=g-f,y=v-d,w=Math.sqrt(b*b+y*y),T=Math.floor(4*w/p)+1,C=b/T,S=y/T,E=[C*x,S*x],z=1;z<=T;++z){var R=fe(i.context(),null,r,t.m_width/o,t.m_height/o,t.m_frame_buffer);c?R.shader_texture("inputImageTexture",a):R.shader_texture("inputImageTexture",s);var M={};M.pos=[(f+z*C)/t.m_width,(d+z*S)/t.m_height],M.radius=p,M.samplerSteps=[1/t.m_width,1/t.m_height],M.v=E,R.shader.uniforms(M),c?R.draw_to(s):R.draw_to(a),c=!c}if(c||(n=a,a=s,m_deforMap_buffer=n,n=null),i.context().getError())throw new Error("opengl error in reshape adjust");u=[]}}function _(e,t){i.context().bindFramebuffer(i.context().FRAMEBUFFER,e.m_frame_buffer),i.context().framebufferTexture2D(i.context().FRAMEBUFFER,i.context().COLOR_ATTACHMENT0,i.context().TEXTURE_2D,t,0),i.context().clearColor(.5,.5,0,0),i.context().clear(i.context().COLOR_BUFFER_BIT)}var f={destroy:function(){o&&(o.destroy(),o=0),r&&(r.destroy(),r=0),this.size_change(0,0),a&&(i.context().deleteTexture(a),a=0),s&&(i.context().deleteTexture(s),s=0),l=[]},size_change:function(e,t){n==e&&c==t||(n=e,c=t,m_last_src=[],a&&(i.context().deleteTexture(a),a=0),s&&(i.context().deleteTexture(s),s=0),l=[])},gpu_process:function(e,r,s){try{this.size_change(s.m_width,s.m_height),t=he(r),h(e,s,2),o||(o=new N(null,"varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform sampler2D reshapeMap;                    void main()                    {                        vec2 cod,result;                        vec4 dst;                        vec4 trans = texture2D(reshapeMap, textureCoordinate);                        result.x = trans.x + (trans.z - 0.5) / 255.0;                        result.x = (result.x - 0.5)*2.0;                        result.y = trans.y + (trans.w - 0.5) / 255.0;                        result.y = (result.y - 0.5)*2.0;                        cod.x = textureCoordinate.x - result.x;                        cod.y = textureCoordinate.y - result.y;                        dst = texture2D(inputImageTexture, cod);                        gl_FragColor = dst;                    }",i.context()));var n=fe(i.context(),s,o);if(n.shader_texture("inputImageTexture",r.current()),n.shader_texture("reshapeMap",a),n.draw_to(r.new_temporary()),i.context().getError())throw new error("CGEPTPTemplate::gpu_process");r.push_to_current(),t.destroy()}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{t.destroy()}}};return f}};return e}function z(){var e={name:"reshapeMap",create:function(e){var t,r=0,o=0,i=e,a=0,s=0,n=0,c={haveTest:!1,errorStatus:0},u=[],l="attribute vec2 vertex;                             attribute vec2 _texCoord;                            varying vec2 textureCoordinate;                            void main(){                                textureCoordinate = _texCoord;                                gl_Position = vec4(vertex*2.0 - 1.0, 0.0, 1.0);                            }",m="varying vec2 textureCoordinate;                            uniform sampler2D inputImageTexture;                            void main(){                                gl_FragColor = texture2D(inputImageTexture,textureCoordinate);                            }",h="varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform vec2 samplerSteps;                    uniform vec2 pos;                    uniform vec2 v;                    uniform float radius;                    vec4 sampler(vec2 coord)                    {                       vec2 real = coord/samplerSteps-0.5;                       vec2 freal = floor(real);                       vec4 lb = texture2D(inputImageTexture,(freal+vec2(0.5,0.5))*samplerSteps);                       vec4 lt = texture2D(inputImageTexture,(vec2(freal.x,freal.y + 1.0) + vec2(0.5,0.5))*samplerSteps);                       vec4 rb = texture2D(inputImageTexture,(vec2(freal.x + 1.0,freal.y) + vec2(0.5,0.5))*samplerSteps);                       vec4 rt = texture2D(inputImageTexture,(vec2(freal.x + 1.0,freal.y+1.0) + vec2(0.5,0.5))*samplerSteps);                       vec4 horizonB = mix(lb,rb,(real-freal).x);                       vec4 horizonT = mix(lt,rt,(real-freal).x);                       vec4 dst = mix(horizonB,horizonT,(real-freal).y);                       return dst;                        }                        vec2 get_vector(float gvx, float gvy)                    {                        vec4 dst_v= sampler(vec2(gvx, gvy)*samplerSteps);                        vec2 result;                        float mid = 127.0;                        result.x = dst_v.x*255.0 + (dst_v.z * (255.0/256.0));                        result.x = (result.x - mid)/127.0;                        result.y = dst_v.y*255.0 + (dst_v.w * (255.0/256.0));                        result.y = (result.y - mid)/127.0;                        return result;                    }                    void main()                    {                        float dx = (textureCoordinate.x - pos.x)/samplerSteps.x;                        float dy = (textureCoordinate.y - pos.y)/samplerSteps.y;                        float r = 1.0 - ((dx / radius)*(dx / radius) + (dy / radius)*(dy / radius));                        vec4 dst;                        if (r > 0.0)                        {                            r = r*r;                            float cdx = v.x*r;                            float cdy = v.y*r;                                                     float gvx;                              gvx = textureCoordinate.x/samplerSteps.x + cdx;                                                    gvx = max(0.0, min(gvx, 1.0 / samplerSteps.x));                                                    float gvy;                              gvy = textureCoordinate.y/samplerSteps.y + cdy;                                                          gvy = max(0.0, min(gvy, 1.0 / samplerSteps.y));                            vec2 ov;                            ov = get_vector(gvx, gvy);                            gvx = gvx*samplerSteps.x + ov.x;                            gvy = gvy*samplerSteps.y + ov.y;                            vec2 _dis = vec2(min(1.0,max(gvx - textureCoordinate.x,-0.999999)),                            min(1.0,max(gvy - textureCoordinate.y,-0.999999)));                            float mid = 127.0;                            {                                float cx = _dis.x*127.0+mid;                                float fcx = floor(cx);                                dst.z = (cx - fcx)* (256.0/255.0);                                dst.x = fcx*(1.0 / 255.0);                            }                            {                                float cy = _dis.y*127.0 +mid;                                float fcy = floor(cy);                                dst.w = (cy - fcy) * (256.0/255.0);                                dst.y = fcy*(1.0 / 255.0);                                                    }                        }                        else{                            dst = sampler(textureCoordinate);                        }                        gl_FragColor = dst;                    }",_="varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform vec2 samplerSteps;                    uniform vec2 pos;                    uniform vec2 v;                    uniform float radius;                    vec2 get_vector(float gvx, float gvy)                    {                        vec4 dst_v= texture2D(inputImageTexture, vec2(gvx, gvy)*samplerSteps);                        vec2 result;                        float mid = 127.0;                        result.x = dst_v.x*255.0 + (dst_v.z * (255.0/256.0));                        result.x = (result.x - mid)/127.0;                        result.y = dst_v.y*255.0 + (dst_v.w * (255.0/256.0));                        result.y = (result.y - mid)/127.0;                        return result;                    }                    void main()                    {                        float dx = (textureCoordinate.x - pos.x)/samplerSteps.x;                        float dy = (textureCoordinate.y - pos.y)/samplerSteps.y;                        float r = 1.0 - ((dx / radius)*(dx / radius) + (dy / radius)*(dy / radius));                        vec4 dst;                        if (r > 0.0)                        {                            r = r*r;                            float cdx = v.x*r;                            float cdy = v.y*r;                                                     float gvx;                              gvx = textureCoordinate.x/samplerSteps.x + cdx;                                                    gvx = max(0.0, min(gvx, 1.0 / samplerSteps.x));                                                    float gvy;                              gvy = textureCoordinate.y/samplerSteps.y + cdy;                                                          gvy = max(0.0, min(gvy, 1.0 / samplerSteps.y));                            vec2 ov;                            ov = get_vector(gvx, gvy);                            gvx = gvx*samplerSteps.x + ov.x;                            gvy = gvy*samplerSteps.y + ov.y;                            vec2 _dis = vec2(min(1.0,max(gvx - textureCoordinate.x,-0.999999)),                            min(1.0,max(gvy - textureCoordinate.y,-0.999999)));                            float mid = 127.0;                            {                                float cx = _dis.x*127.0+mid;                                float fcx = floor(cx);                                dst.z = (cx - fcx)* (256.0/255.0);                                dst.x = fcx*(1.0 / 255.0);                            }                            {                                float cy = _dis.y*127.0 +mid;                                float fcy = floor(cy);                                dst.w = (cy - fcy) * (256.0/255.0);                                dst.y = fcy*(1.0 / 255.0);                                                    }                        }                        else{                            dst = texture2D(inputImageTexture, textureCoordinate);                        }                        gl_FragColor = dst;                    }";function f(e,t,a,s){if(i.context().disable(i.context().BLEND),c.haveTest||function(e){var t=pe(128,1,!0),r=pe(2,1,!0);i.m_context.texSubImage2D(i.m_context.TEXTURE_2D,0,0,0,2,1,i.m_context.RGBA,i.m_context.UNSIGNED_BYTE,new Uint8Array([255,255,255,255,0,0,0,255])),o||(o=new N(null,m,i.context()));var a=fe(i.context(),null,o,128,1,e.m_frame_buffer);a.shader_texture("inputImageTexture",r),a.draw_to(t);var s=new Uint8Array(16);i.m_context.bindFramebuffer(i.m_context.FRAMEBUFFER,e.m_frame_buffer),i.m_context.framebufferTexture2D(i.m_context.FRAMEBUFFER,i.m_context.COLOR_ATTACHMENT0,i.m_context.TEXTURE_2D,t,0),i.m_context.readPixels(64,0,4,1,i.m_context.RGBA,i.m_context.UNSIGNED_BYTE,s),c.errorStatus=!1;for(var n=0;n<4;++n){s[4*n];for(var u=0;u<4;u++)u!=n&&s[4*u]==s[4*n]&&c.errorStatus}if(c.haveTest=!0,i.context().getError())throw new error("CGEPTPTemplate::gpu_process")}(t),function(e,t,r){if(e.lookup_symbol(["coordinate","realPixel",0],!0))for(;e.test_symbol("point");){var o={vecPoints:{},stress:0,radius:0};e.assume_symbol("stress"),o.stress=e.fetch_float(),e.assume_symbol("radius"),o.radius=e.fetch_float();var i=e.fetch_float(),a=e.fetch_float();o.vecPoints={x:i,y:a},u.push(o)}else for(;e.test_symbol("point");)o={vecPoints:{},stress:0,radius:0},e.assume_symbol("stress"),o.stress=e.fetch_float(),e.assume_symbol("radius"),o.radius=e.fetch_float(),i=e.fetch_float()*t,a=e.fetch_float()*r,o.vecPoints={x:i,y:a},u.push(o);if(u.length<2)throw new Error("need more point")}(e,t.m_width,t.m_height),u.length){r||(r=c.errorStatus?new N(l,h,i.context()):new N(l,_,i.context())),n||(n=pe(t.m_width,t.m_height));for(var f=0;f<u.length-1;++f)for(var d=u[f].vecPoints.x,g=u[f].vecPoints.y,v=u[f+1].vecPoints.x,x=u[f+1].vecPoints.y,p=u[f+1].stress,b=u[f+1].radius,y=v-d,w=x-g,T=Math.sqrt(y*y+w*w),C=Math.floor(4*T/b)+1,S=y/C,E=w/C,z=[S*p,E*p],R=1;R<=C;++R){var M=Math.min(t.m_width,Math.max(0,d+R*S-b)),A=Math.min(t.m_height,Math.max(0,g+R*E-b)),D=Math.min(t.m_width,Math.max(0,d+R*S+b)),k=Math.min(t.m_height,Math.max(0,g+R*E+b)),F=Math.min(k+.5,t.m_height)/t.m_height,I=Math.max(M-.5,0)/t.m_width,P=Math.min(D+.5,t.m_width)/t.m_width,B=Math.max(A-.5,0)/t.m_height,U=new Float32Array([I,B,I,F,P,B,P,F]),L=new Float32Array([I,B,I,F,P,B,P,F]);i.context().activeTexture(i.context().TEXTURE0),i.context().bindTexture(i.context().TEXTURE_2D,s.current());var G={inputImageTexture:0};r.textures(G),i.context().bindFramebuffer(i.context().FRAMEBUFFER,t.m_frame_buffer),i.context().framebufferTexture2D(i.context().FRAMEBUFFER,i.context().COLOR_ATTACHMENT0,i.context().TEXTURE_2D,n,0),i.context().viewport(0,0,t.m_width,t.m_height);var O={};O.pos=[(d+R*S)/t.m_width,(g+R*E)/t.m_height],O.radius=b,O.samplerSteps=[1/t.m_width,1/t.m_height],O.v=[z[0],z[1]],r.uniforms(O),r.drawRect(U,L),i.context().copyTexSubImage2D(i.context().TEXTURE_2D,0,M,A,M,A,D-M,k-A)}if(i.context().getError())throw new Error("opengl error in reshape adjust");u=[]}}var d={size_change:function(e,t){a==e&&s==t||(a=e,s=t,n&&(i.context().deleteTexture(n),n=0))},destroy:function(){n&&(i.context().deleteTexture(n),n=0)},gpu_process:function(e,r,o){try{t=he(r),this.size_change(o.m_width,o.m_height),f(e,o,0,r),t.destroy()}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{t.destroy()}}};return d}};return e}function R(){var e={name:"reshapeDraw",create:function(e){var t,r=0,o=0,i=e,a={destroy:function(){o&&(o.destroy(),o=0)}};return a.gpu_process=function(e,a,s){try{t=he(a),function(e,t,o){e.assume_symbol("useCache"),e.assume_symbol("stress"),r=e.fetch_float()}(e),o||(o=new N(null," varying vec2 textureCoordinate;                     uniform sampler2D inputImageTexture;                     uniform sampler2D reshapeMap;                     uniform float stress;                                                                     void main()                     {                         vec2 cod,result;                         vec4 dst;                         vec4 trans = texture2D(reshapeMap, textureCoordinate);                                              float mid = 127.0;                         result.x = trans.x*255.0 + (trans.z*(255.0/256.0));                         result.x = (result.x - mid)/127.0;                                              result.y = trans.y*255.0 + (trans.w*(255.0/256.0));                         result.y = (result.y - mid)/127.0;                                              cod.x = textureCoordinate.x - result.x*stress;                         cod.y = textureCoordinate.y - result.y*stress;                                                                    dst = texture2D(inputImageTexture, cod);                          dst.xyz = dst.xyz*vec3(dst.a);                         gl_FragColor = dst;                     }",i.context()));var n=fe(i.context(),s,o),c=i.lock_image(null,"reshape");if(!c)throw new error("cannot find reshape cache");n.shader_texture("inputImageTexture",a.current()),n.shader_texture("reshapeMap",c);var u={};if(u.stress=r,n.shader.uniforms(u),u=null,n.draw_to(a.new_temporary()),i.context().getError())throw new error("CGEPTPTemplate::gpu_process");a.push_to_current(),t.destroy()}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{t.destroy()}},a}};return e}function M(){var e={name:"dark",create:function(e){var t={};return(t=_e()).m_context=e,t.init=function(e){},t.shader_uniform=function(){return"   "},t.shader_procession=function(){return"                        dst= vec4(127.0/255.0,127.0/255.0,0.0,0.0);"},t.shader_setup=function(e){},t}};return e}function A(){var e={name:"darkClear",create:function(e){var t={};return(t=_e()).m_context=e,t.init=function(e){},t.shader_uniform=function(){return"   "},t.shader_procession=function(){return"                        dst= vec4(0.0,0.0,0.0,0.0);"},t.shader_setup=function(e){},t}};return e}function D(){var e={name:"teethWhiten",create:function(e){var t,r={};return(r=_e()).m_context=e,r.init=function(e){t=e.fetch_float()/100},r.shader_uniform=function(){return"  uniform float intensity; "},r.shader_procession=function(){return"                        vec3 _dst;                        if (src.r < src.g)                        {                            if (src.r < src.b)                            {                                _dst.r = src.r + 0.587 * (src.g - src.r) + 0.114 * (src.b - src.r);                                _dst.g = max(src.g, _dst.r);                                _dst.b = max(src.b, _dst.r);                            }                            else                            {                                _dst = src.rgb;                            }                        }                        else                        {                            if (src.g < src.b)                            {                                _dst.g = src.g + 0.299 * (src.r - src.g) + 0.114 * (src.b - src.g);                                _dst.r = max(src.r, _dst.g);                                _dst.b = max(src.b, _dst.g);                            }                            else                            {                                _dst.b = src.b + 0.299 * (src.r - src.b) + 0.587 * (src.g - src.b);                                _dst.r = max(src.r, _dst.b);                                _dst.g = max(src.g, _dst.b);                            }                        }                        dst = vec4(mix(src.rgb, _dst, intensity), src.a);                        "},r.shader_setup=function(e){var r={};r.intensity=t,e.shader.uniforms(r)},r}};return e}function k(){var e={name:"alphaInit",create:function(e){var t={};return(t=_e()).m_context=e,t.m_intensity=0,t.init=function(e){this.m_intensity=1,e.test_symbol("intensity")&&(this.m_intensity=e.fetch_float())},t.shader_uniform=function(){return"uniform float intensity;"},t.shader_procession=function(){return"                            dst = vec4(1.0,1.0,1.0,1.0);                            dst.a = intensity;                        "},t.shader_setup=function(e){var t={};t.intensity=this.m_intensity,e.shader.uniforms(t)},t}};return e}function F(){var e={name:"justDraw",create:function(e){var t={};return(t=_e()).m_context=e,t.init=function(e){},t.shader_uniform=function(){return"uniform sampler2D srcImage; "},t.shader_procession=function(){return"                            dst = texture2D(srcImage, textureCoordinate);                        "},t.shader_setup=function(e){var t=function(e){var t=e.lock_image();return t||!1}(this.m_context);e.shader_texture("srcImage",t)},t}};return e}function I(){var e={name:"areaSelective",create:function(e){var t=[],r=[],o={};return(o=_e()).m_context=e,o.init=function(e,o,i){var a=e.lookup_symbol(["pixel","relative",0],!0);e.assume_symbol("position"),a?(r[0]=e.fetch_float()*o,r[1]=e.fetch_float()*i):(r[0]=e.fetch_float(),r[1]=e.fetch_float()),e.assume_symbol("size"),a?(t[0]=e.fetch_float()*o,t[1]=e.fetch_float()*i):(t[0]=e.fetch_float(),t[1]=e.fetch_float())},o.shader_uniform=function(){return"uniform vec4 trans;"},o.shader_procession=function(){return"                            dst = texture2D(inputImageTexture, textureCoordinate*trans.xy+trans.zw);                        "},o.shader_setup=function(e){var o=[t[0]/e.width,t[1]/e.height,r[0]/e.width,r[1]/e.height],i={};i.trans=o,e.shader.uniforms(i)},o}};return e}function P(){var e={name:"crop",create:function(e){var t=[],r=[],o={};return(o=_e()).m_context=e,o.init=function(e){e.assume_symbol("position"),r[0]=e.fetch_float(),r[1]=e.fetch_float(),e.assume_symbol("srcSize"),t[0]=e.fetch_float(),t[1]=e.fetch_float()},o.shader_uniform=function(){return"uniform vec4 trans;                        uniform sampler2D srcImage;"},o.shader_procession=function(){return"                            dst = texture2D(srcImage, textureCoordinate*trans.xy+trans.zw);                        "},o.shader_setup=function(e){var o=function(e){var t=e.lock_image();return t||!1}(this.m_context),i=[e.width/t[0],e.height/t[1],r[0]/t[0],r[1]/t[1]],a={};a.trans=i,e.shader.uniforms(a),e.shader_texture("srcImage",o)},o}};return e}function B(){var e={name:"rotation",create:function(e){var t,r={};return(r=_e()).m_context=e,r.init=function(e){t=e.fetch_float()},r.shader_uniform=function(){return"  uniform vec4 trans; "},r.shader_procession=function(){return"                            vec2 coord = textureCoordinate - vec2(0.5, 0.5);                        coord = vec2(coord.x*trans.x + coord.y*trans.y,                            coord.x*trans.z + coord.y*trans.w);                        coord = coord + vec2(0.5, 0.5);                        dst = texture2D(inputImageTexture, coord); "},r.shader_setup=function(e){var r=Math.abs(10*t)%1800;(r/=10)>90&&(r=180-r),r=r/180*3.14159265358;var o=Math.sqrt(e.width/2*(e.width/2)+e.height/2*(e.height/2)),i=Math.min(e.width,e.height),a=Math.acos(i/2/o)-r,s=i/2/Math.cos(a)/o;r=t/180*3.14159265358;var n=[Math.cos(r)*s,-Math.sin(r)*s*e.height/e.width,Math.sin(r)*s*e.width/e.height,Math.cos(r)*s],c={};c.trans=n,e.shader.uniforms(c)},r}};return e}function U(){var e={name:"gribRotation",create:function(e){var t,r,o={};return(o=_e()).m_context=e,o.init=function(e){t=e.fetch_float(),r=e.fetch_float()},o.shader_uniform=function(){return"uniform vec4 trans;                                     uniform float meshWidth;                                     uniform vec2 size;                                     uniform float lineWidth;"},o.shader_procession=function(){return"                            vec2 coord = textureCoordinate - vec2(0.5, 0.5);                        coord = vec2(coord.x*trans.x + coord.y*trans.y,                            coord.x*trans.z + coord.y*trans.w);                        coord = coord + vec2(0.5, 0.5);                                               vec2 realPixel = vec2(abs(textureCoordinate.x-0.5),abs(textureCoordinate.y-0.5))*size;                        if(realPixel.x<2.0*lineWidth||realPixel.y<2.0*lineWidth){                                gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);                                return;                            }                                                vec2 dis = vec2(realPixel.x - floor(realPixel.x/meshWidth)*meshWidth,realPixel.y - floor(realPixel.y/meshWidth)*meshWidth);                        vec4 rotationResult = texture2D(inputImageTexture, coord);                        if(dis.x<lineWidth||dis.x>(meshWidth-lineWidth)||dis.y<lineWidth||dis.y>(meshWidth-lineWidth))                        {                                dis =  min(max(dis/lineWidth,dis/(meshWidth-lineWidth)),1.0);                                float alpha = max(dis.x,dis.y);                                dst = mix(rotationResult,vec4(1.0, 1.0, 1.0,1.0),alpha);                            }                        else                             dst = rotationResult;                        "},o.shader_setup=function(e){var o=Math.abs(10*t)%1800;(o/=10)>90&&(o=180-o),o=o/180*3.14159265358;var i=Math.sqrt(e.width/2*(e.width/2)+e.height/2*(e.height/2)),a=Math.min(e.width,e.height),s=Math.acos(a/2/i)-o,n=a/2/Math.cos(s)/i,c=Math.floor(50/r/n+.5),u=1/r;o=t/180*3.14159265358;var l=[Math.cos(o)*n,-Math.sin(o)*n*e.height/e.width,Math.sin(o)*n*e.width/e.height,Math.cos(o)*n],m={};m.trans=l,m.meshWidth=c,m.size=[e.width,e.height],m.lineWidth=u,e.shader.uniforms(m)},o}};return e}function L(){var e={name:"cloneBlend",create:function(e){var t,r,o,i,a=e,s=0,n={};return(n=_e()).destroy=function(){s&&(s.destroy(),s=0)},n.init=function(e,i,a){e.assume_symbol("view"),r=e.fetch_float(),e.assume_symbol("cache"),o=e.fetch_string(),e.assume_symbol("opacity"),t=e.fetch_float()},n.gpu_process=function(e,n,c){try{if(i=he(n),this.init(e,c.m_width,c.m_height),r)var u=n.load_view(r);var l=a.lock_image(null,"painter");if(!l)throw new error("no painter cache");s||(s=new N(null,"varying vec2 textureCoordinate;                    uniform sampler2D inputImageTexture;                    uniform sampler2D blendMaskTexture;                    uniform sampler2D baseTexture;                    uniform sampler2D srcTexture;                    uniform float model;                    uniform float opacity;                    void main()                    {                        vec4 src = texture2D(srcTexture,textureCoordinate);                                            vec4 top = texture2D(inputImageTexture, textureCoordinate);                        vec4 dst = texture2D(baseTexture,textureCoordinate);                float a = texture2D(blendMaskTexture, textureCoordinate).w;                    vec4 blendResult;             if(model>0.0)blendResult=vec4(mix(dst.rgb,top.rgb,a),src.a);            else blendResult =vec4(mix(src.rgb,top.rgb,a),src.a);                        gl_FragColor = vec4(mix(src.rgb,blendResult.rgb,opacity),src.a);            }",a.m_context));var m=fe(a.m_context,c,s);if(m.shader_texture("srcTexture",n.get_src()),m.shader_texture("inputImageTexture",n.current()),m.shader_texture("blendMaskTexture",l),m.shader_texture("baseTexture",u),function(e){var r={};r.opacity=t/100,r.model="painter"==o?1:0,e.shader.uniforms(r)}(m),m.draw_to(n.new_temporary()),a.m_context.getError())throw new error("CGEPTPTemplate::gpu_process");n.push_to_current(),i.destroy(),a.unlock_image(null,null,"painter")}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{i.destroy()}},n}};return e}function G(){var e={name:"lensFlare",create:function(e){var t,r=[],o=0,i=[],a=_e();return a.m_context=e,a.init=function(e){e.assume_symbol("radius"),t=e.fetch_float(),e.assume_symbol("pos"),r[0]=e.fetch_float(),r[1]=e.fetch_float();var o=0,a=0,s=0,n=0,c=0;for(e.assume_symbol("ratio"),c=e.fetch_float(),e.assume_symbol("color"),o=e.fetch_float(),a=e.fetch_float(),s=e.fetch_float(),n=e.fetch_float();e.test_symbol("ratio");){var u=e.fetch_float();e.assume_symbol("color");for(var l=e.fetch_float(),m=e.fetch_float(),h=e.fetch_float(),_=e.fetch_float(),f=Math.floor(256*c);f<256*u;++f){var d=(f-256*c)/(256*u-256*c);i[4*f]=Math.floor((1-d)*o+d*l+.5),i[4*f+1]=Math.floor((1-d)*a+d*m+.5),i[4*f+2]=Math.floor((1-d)*s+d*h+.5),i[4*f+3]=Math.floor((1-d)*n+d*_+.5)}c=u,o=l,a=m,s=h,n=_}},a.shader_uniform=function(){return"  uniform sampler2D color;                                uniform float radius;                                uniform vec2 position;                                uniform vec2 size; "},a.shader_procession=function(){return"                          \tfloat dis = (textureCoordinate.x - position.x)*(textureCoordinate.x - position.x)*size.x*size.x + (textureCoordinate.y - position.y)*(textureCoordinate.y - position.y)*size.y*size.y;                                dis = sqrt(dis);                                float index = dis / (radius);                                vec4 lens;                                if (index < 1.0){                                    lens = texture2D(color, vec2(index, 0.5));                                    dst = vec4(mix(src.xyz, lens.xyz, lens.a), src.a);                                }                                else dst = src; "},a.shader_setup=function(e){o||(o=pe(256,1,!0)),e.shader_texture("color",o),this.m_context.m_context.texSubImage2D(this.m_context.m_context.TEXTURE_2D,0,0,0,256,1,this.m_context.m_context.RGBA,this.m_context.m_context.UNSIGNED_BYTE,new Uint8Array(i));var a={};a.radius=t*Math.max(e.width,e.height),a.position=r,a.size=[e.width,e.height],e.shader.uniforms(a)},a}};return e}function O(){var e={name:"rectangle",create:function(e){var t={};return(t=_e()).m_context=e,t.init=function(e){},t.shader_uniform=function(){return"uniform vec2 samplerSize;"},t.shader_procession=function(){return"vec2 coord = textureCoordinate/samplerSize;                                if(coord.x<4.0||coord.x>1.0/samplerSize.x-4.0||coord.y<4.0||coord.y>1.0/samplerSize.y-4.0)                                dst = vec4(mix(src.xyz,vec3(0.0,1.0,132.0/255.0),0.5),src.a);                                else                                dst = src;"},t.shader_setup=function(e){var t={};t.samplerSize=[1/e.width,1/e.height],e.shader.uniforms(t)},t}};return e}function q(){var e={name:"linearTest",create:function(e){var t={};return(t=_e()).m_context=e,t.init=function(e){},t.shader_uniform=function(){return"uniform sampler2D smallTex;"},t.shader_procession=function(){return"vec4 texColor = texture2D(smallTex,textureCoordinate);                                    dst = (texColor-vec4(126.0/255.0))*255.0;                                    dst.a = 1.0;"},t.shader_setup=function(e){var t=pe(2,2,!0);this.m_context.m_context.texSubImage2D(this.m_context.m_context.TEXTURE_2D,0,0,0,2,2,this.m_context.m_context.RGBA,this.m_context.m_context.UNSIGNED_BYTE,new Uint8Array([32512/255,32512/255,32512/255,256,32256/255,32256/255,32256/255,256,32256/255,32256/255,32256/255,256,32512/255,32512/255,32512/255,256])),e.shader_texture("smallTex",t)},t}};return e}return function(N){var X=[e(),t(),r(),o(),i(),a(),s(),n(),c(),u(),l(),m(),h(),_(),f(),d(),g(),v(),B(),x(),p(),b(),y(),w(),T(),C(),S(),E(),R(),z(),M(),A(),D(),k(),F(),I(),P(),L(),G(),U(),q(),O()];return de(N,X,X.length)}}(),e}function se(){var e={name:"selectiveColor",create:function(e){var t=[],r=[],o=[],i=[],a=[],s=[],n=[],c=[],u=[],l={};return(l=_e()).m_context=e,l.m_curve_tex=0,l.m_data=[],l.m_red=new Array(256),l.m_green=new Array(256),l.m_blue=new Array(256),l.shader_uniform=function(){return"uniform vec4 red;                uniform vec4 yellow;                uniform vec4 green;                uniform vec4 cyan;                uniform vec4 blue;                uniform vec4 magenta;                uniform vec4 white;                uniform vec4 gray;                uniform vec4 black;                vec4 getFac(vec4 facPre,vec4 facNex,float h,float s,float v)                {                    vec4 ret = mix(facPre,facNex,h);                    vec4 rets0;                    v = v * 2.0 - 1.0;                    if(v > 0.0)                    {                        rets0 = mix(gray,white,v);                    }                    else                    {                        rets0 = mix(gray,black,-v);                    }                    s = 1.0 - s;                    s = s * s * s;                    s = 1.0 - s;                    return mix(rets0,ret,s);                }                vec3 adjColor(vec3 src,float a,vec4 fac)                {                    vec3 tfac = fac.xyz *  vec3(fac.w,fac.w,fac.w);                    tfac = min(tfac,vec3(2.0,2.0,2.0));                    vec3 tfc1 = clamp(tfac - vec3(1.0,1.0,1.0),0.0,0.5);                    vec3 tfc2 = max(tfac - vec3(1.5,1.5,1.5),0.0);                    src = vec3(1.0,1.0,1.0) - src;                    src = src * (tfac -  src * (src * (tfc1 - tfc2) + vec3(2.0,2.0,2.0) * tfc2));                    return vec3(1.0,1.0,1.0) - src;                }                vec3 hsvAdjust(vec3 src)                {                    vec3 temp;                    vec4 color1, color2;                    if(src.r > src.g)                    {                        if(src.g > src.b)                        {                            temp = src.rgb;                            color1 = red;                            color2 = yellow;                        }                        else if(src.b > src.r)                        {                            temp = src.brg;                            color1 = blue;                            color2 = magenta;                        }                        else                            {                            temp = src.rbg;                            color1 = red;                            color2 = magenta;                        }                    }                    else                    {                        if(src.r > src.b)                        {                            temp = src.grb;                            color1 = green;                            color2 = yellow;                        }                        else if(src.b > src.g)                        {                            temp = src.bgr;                            color1 = blue;                            color2 = cyan;                        }                        else                        {                            temp = src.gbr;                            color1 = green;                            color2 = cyan;                        }                    }                    float d = temp.x - temp.z + 0.0001;                    float s = temp.y - temp.z;                    vec4 fac = getFac(color1, color2, s/d, d, temp.x);                    return adjColor(src, temp.x, fac);                }"},l.shader_procession=function(){return"src.rgb = hsvAdjust(src.rgb);                dst = src;"},l.shader_setup=function(e){var l={};l.red=[t[0]+1,t[1]+1,t[2]+1,t[3]+1],l.green=[r[0]+1,r[1]+1,r[2]+1,r[3]+1],l.blue=[o[0]+1,o[1]+1,o[2]+1,o[3]+1],l.cyan=[i[0]+1,i[1]+1,i[2]+1,i[3]+1],l.magenta=[a[0]+1,a[1]+1,a[2]+1,a[3]+1],l.yellow=[s[0]+1,s[1]+1,s[2]+1,s[3]+1],l.white=[n[0]+1,n[1]+1,n[2]+1,n[3]+1],l.gray=[c[0]+1,c[1]+1,c[2]+1,c[3]+1],l.black=[u[0]+1,u[1]+1,u[2]+1,u[3]+1],e.shader.uniforms(l)},l.init=function(e){for(var l=0;l<4;++l)t[l]=0,r[l]=0,o[l]=0,i[l]=0,a[l]=0,s[l]=0,n[l]=0,c[l]=0,u[l]=0;var m,h=["red","green","blue","cyan","magenta","yellow","white","gray","black",0],_=1,f=1,d=1,g=1,v=1,x=1,p=1,b=1,y=1;for(l=0;l<9;++l){var w=e.lookup_symbol(h,!1);switch(w){case 0:for(0==_&&e.error("parameter red has been input"),m=0;m<4;++m)t[m]=.01*e.fetch_float();_=!1;break;case 1:for(0==f&&e.error("parameter green has been input"),m=0;m<4;++m)r[m]=.01*e.fetch_float();f=!1;break;case 2:for(0==d&&e.error("parameter blue has been input"),m=0;m<4;++m)o[m]=.01*e.fetch_float();d=!1;break;case 3:for(0==g&&e.error("parameter cyan has been input"),m=0;m<4;++m)i[m]=.01*e.fetch_float();g=!1;break;case 4:for(0==v&&e.error("parameter magenta has been input"),m=0;m<4;++m)a[m]=.01*e.fetch_float();v=!1;break;case 5:for(0==x&&e.error("parameter yellow has been input"),m=0;m<4;++m)s[m]=.01*e.fetch_float();x=!1;break;case 6:for(0==p&&e.error("parameter white has been input"),m=0;m<4;++m)n[m]=.01*e.fetch_float();p=!1;break;case 7:for(0==b&&e.error("parameter has been input"),m=0;m<4;++m)c[m]=.01*e.fetch_float();b=!1;break;case 8:for(0==y&&e.error("parameter black has been input"),m=0;m<4;++m)u[m]=.01*e.fetch_float();y=!1}if(-1==w)break}},l}};return e}function ne(){var e={name:"specialMixColor"};return e.create=function(){function e(){var e={name:"color",create:function(e){var t,r,o,i,a,s={};return(s=_e()).m_context=e,s.init=function(e){t=e.fetch_float(0,256),r=e.fetch_float(0,256),o=e.fetch_float(0,256),a=e.fetch_float(0,256),i=e.fetch_float(0,100)},s.shader_uniform=function(){return"uniform vec4 blendColor;                    uniform float intensity;                    float getLumValue(vec3 src)                    {                        return 0.299 * src.r + 0.587 * src.g + 0.114 * src.b;                    }                    vec3 blend(vec3 src1, vec3 src2, float alpha)                    {                        return mix(src1, getLumValue(src1) - getLumValue(src2) + src2, alpha);                    }"},s.shader_procession=function(){return"dst = vec4(blend(src.rgb, blendColor.rgb, intensity * blendColor.a), src.a);"},s.shader_setup=function(e){var s={};s.blendColor=[t/255,r/255,o/255,a/255],s.intensity=i/100,e.shader.uniforms(s)},s}};return e}function t(){var e={name:"lighterColor",create:function(e){var t,r,o,i,a,s={};return(s=_e()).m_context=e,s.init=function(e){t=e.fetch_float(0,256),r=e.fetch_float(0,256),o=e.fetch_float(0,256),a=e.fetch_float(0,256),i=e.fetch_float(0,100)},s.shader_uniform=function(){return"uniform vec4 blendColor;                    uniform float intensity;                    vec3 blend(vec3 src1, vec3 src2, float alpha)                    {                        vec3 dst = dot(src1, vec3(0.299, 0.587, 0.114)) > dot(src2, vec3(0.299, 0.587, 0.114)) ? src1 : src2;                        return mix(src1, dst, alpha);                    }"},s.shader_procession=function(){return"dst = vec4(blend(src.rgb, blendColor.rgb, intensity * blendColor.a), src.a);"},s.shader_setup=function(e){var s={};s.blendColor=[t/255,r/255,o/255,a/255],s.intensity=i/100,e.shader.uniforms(s)},s}};return e}function r(){var e={name:"darkerColor",create:function(e){var t,r,o,i,a,s={};return(s=_e()).m_context=e,s.init=function(e){t=e.fetch_float(0,256),r=e.fetch_float(0,256),o=e.fetch_float(0,256),a=e.fetch_float(0,256),i=e.fetch_float(0,100)},s.shader_uniform=function(){return"uniform vec4 blendColor;                    uniform float intensity;                    vec3 blend(vec3 src1, vec3 src2, float alpha)                    {                        vec3 dst = dot(src1, vec3(0.299, 0.587, 0.114)) < dot(src2, vec3(0.299, 0.587, 0.114)) ? src1 : src2;                        return mix(src1, dst, alpha);                    }"},s.shader_procession=function(){return"dst = vec4(blend(src.rgb, blendColor.rgb, intensity * blendColor.a), src.a);"},s.shader_setup=function(e){var s={};s.blendColor=[t/255,r/255,o/255,a/255],s.intensity=i/100,e.shader.uniforms(s)},s}};return e}return function(o){var i=[e(),t(),r()];return de(o,i,i.length)}}(),e}function ce(){var e={name:"specialBorder"};return e.create=function(){function e(e){var t=e.lock_image();return t||!1}function t(){var t={name:"shadow",create:function(t){var r,o,i,a,s=new Array(3),n=new Array(3),c={};return(c=_e()).m_context=t,c.texturelocker=0,c.init=function(e){e.assume_symbol("size"),i=e.fetch_float(),e.assume_symbol("fade"),a=e.fetch_float()/100,e.assume_symbol("angle"),o=e.fetch_float(),e.assume_symbol("distance"),r=e.fetch_float(),e.assume_symbol("shadowColor");for(var t=0;t<3;++t)s[t]=e.fetch_float()/255;for(e.assume_symbol("backColor"),t=0;t<3;++t)n[t]=e.fetch_float()/255},c.shader_uniform=function(){return"uniform sampler2D srcImage;                        uniform vec4 fac;                        uniform vec3 sColor;                        uniform vec3 bColor;                        uniform vec2 shadow_pos;                        uniform vec4 sBorder;                        uniform vec2 size;                        uniform float fade;                        "},c.shader_procession=function(){return"                                               vec2 pos = textureCoordinate;                                               if(pos.x<size.x||pos.x>1.0 - size.x||pos.y<size.y||pos.y>1.0-size.y)                        {                                                     pos = pos-shadow_pos;                             float x = max(max(pos.x - sBorder.y,sBorder.x - pos.x),0.0);                             float y = max(max(pos.y - sBorder.w,sBorder.z - pos.y),0.0);                             float alpha = 1.0 -((x/(size.x/1.2))*(x/(size.x/1.2))+(y/(size.y/1.2))*(y/(size.y/1.2)));                             alpha = clamp(alpha,0.0,1.0);                             alpha = 3.0*alpha*alpha-2.0*alpha*alpha*alpha;                             alpha = fade*alpha*alpha;                             dst =vec4( mix(bColor,sColor,alpha),1.0);                         }                        else                            dst = texture2D(srcImage,pos*vec2(fac.x,fac.y)+vec2(fac.z,fac.w));"},c.shader_setup=function(t){var c=e(this.m_context),u=new Array(4);u[0]=t.width/(t.width-2*i),u[1]=t.height/(t.height-2*i),u[2]=-i/(t.width-2*i),u[3]=-i/(t.height-2*i);var l=[r/t.width,0];l=[l[0]*Math.cos(o/180*Math.PI)-l[1]*Math.sin(o/180*Math.PI),l[0]*Math.sin(o/180*Math.PI)+l[1]*Math.cos(o/180*Math.PI)];var m=new Array(4);m[0]=i/t.width*1.4,m[1]=1-i/t.width*1.4,m[2]=i/t.height*1.4,m[3]=1-i/t.height*1.4,t.shader_texture("srcImage",c);var h={};h.size=[i/t.width,i/t.height],h.fade=a,h.sBorder=m,h.fac=u,h.sColor=s,h.bColor=n,h.shadow_pos=l,t.shader.uniforms(h)},c}};return t}function r(){var e={name:"smallShadow",create:function(e){var t,r,o,i,a=new Array(3),s=new Array(3),n={};return(n=_e()).m_context=e,n.texturelocker=0,n.init=function(e,n,c){e.assume_symbol("size"),o=e.fetch_float()*n,e.assume_symbol("fade"),i=e.fetch_float()/100,e.assume_symbol("angle"),r=e.fetch_float(),e.assume_symbol("distance"),t=e.fetch_float()*n,e.assume_symbol("shadowColor");for(var u=0;u<3;++u)a[u]=e.fetch_float()/255;for(e.assume_symbol("backColor"),u=0;u<4;++u)s[u]=e.fetch_float()/255},n.shader_uniform=function(){return" uniform vec4 fac;                        uniform vec3 sColor;                        uniform vec4 bColor;                        uniform vec2 shadow_pos;                        uniform vec4 sBorder;                        uniform vec2 size;                        uniform float fade;                        "},n.shader_procession=function(){return"                        vec2 pos = textureCoordinate;                                               if(pos.x<size.x||pos.x>1.0 - size.x||pos.y<size.y||pos.y>1.0-size.y)                        {                                                     pos = pos-shadow_pos;                             float x = max(max(pos.x - sBorder.y,sBorder.x - pos.x),0.0);                             float y = max(max(pos.y - sBorder.w,sBorder.z - pos.y),0.0);                             float alpha = 1.0 -((x/(size.x/1.5))*(x/(size.x/1.5))+(y/(size.y/1.5))*(y/(size.y/1.5)));                             alpha = clamp(alpha,0.0,1.0);                             alpha = alpha*alpha*fade;                             dst =vec4( mix(bColor,vec4(sColor.xyz,1.0),alpha));                         }                        else                            dst = texture2D(inputImageTexture,pos*vec2(fac.x,fac.y)+vec2(fac.z,fac.w));"},n.shader_setup=function(e){var n=new Array(4),c=Math.max(e.width,e.height);n[0]=c/(c-2*o),n[1]=n[0],c==e.width?(n[2]=-o/e.width*n[0],n[3]=-(n[0]-1)/2):(n[3]=-o/e.height*n[0],n[2]=-(n[0]-1)/2);var u=[t/e.width,0];u=[u[0]*Math.cos(r/180*Math.PI)-u[1]*Math.sin(r/180*Math.PI),u[0]*Math.sin(r/180*Math.PI)+u[1]*Math.cos(r/180*Math.PI)];var l=new Array(4);l[0]=o/e.width*1.3,l[1]=1-o/e.width*1.3,l[2]=o/e.height*1.3,l[3]=1-o/e.height*1.3;var m={};m.size=[o/e.width,o/e.height],m.fade=i,m.sBorder=l,m.fac=n,m.sColor=a,m.bColor=s,m.shadow_pos=u,e.shader.uniforms(m)},n}};return e}function o(){var t={name:"gallery",create:function(t){var r,o,i=new Array(3),a=new Array(3),s={};return(s=_e()).m_context=t,s.texturelocker=0,s.init=function(e){e.assume_symbol("outSize"),r=e.fetch_float(),e.assume_symbol("innerSize"),o=e.fetch_float(),e.assume_symbol("outColor");for(var t=0;t<3;++t)i[t]=e.fetch_float()/255;for(e.assume_symbol("innerColor"),t=0;t<3;++t)a[t]=e.fetch_float()/255},s.shader_uniform=function(){return"uniform sampler2D srcImage;                        uniform vec4 fac;                        uniform vec3 iColor;                        uniform vec3 oColor;                        uniform vec2 outSize;                        uniform vec2 innerSize;                        uniform vec4 shadeBorder;                        "},s.shader_procession=function(){return"                        vec2 pos = textureCoordinate;                                               if(pos.x<outSize.x||pos.x>1.0 - outSize.x||pos.y<outSize.y||pos.y>1.0-outSize.y)                        {                            dst = vec4(oColor,1.0);                         }                          else if(pos.x<(outSize.x+innerSize.x)||pos.x>1.0 - (outSize.x+innerSize.x)||pos.y<(outSize.y+innerSize.y)||pos.y>1.0 - (outSize.y+innerSize.y))                      {                            dst = vec4(iColor,1.0);                        }                        else                            {                             float x = max(max(pos.x - shadeBorder.y,shadeBorder.x - pos.x),0.0);                             float y = max(max(pos.y - shadeBorder.w,shadeBorder.z - pos.y),0.0);                            float alpha = ((x)*(x)+(y)*(y))/0.00002;                                                        alpha = clamp(alpha,0.0,1.0);                            alpha = alpha*alpha*0.5;                            vec4 color = texture2D(srcImage, pos * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));                            color.xyz = mix(color.xyz,vec3(0.0,0.0,0.0),alpha);                            dst = color;                            }                            "},s.shader_setup=function(t){var s=e(this.m_context),n=new Array(4);n[0]=t.width/(t.width-2*r-2*o),n[1]=t.height/(t.height-2*r-2*o),n[2]=-(r+o)/(t.width-2*r-2*o),n[3]=-(r+o)/(t.height-2*r-2*o);var c=[];c[0]=(r+o)/t.width+.006,c[1]=1-(r+o)/t.width-.006,c[2]=(r+o)/t.height+.006,c[3]=1-(r+o)/t.height-.006,t.shader_texture("srcImage",s);var u={};u.outSize=[r/t.width,r/t.height],u.innerSize=[o/t.width,o/t.height],u.fac=n,u.shadeBorder=c,u.iColor=a,u.oColor=i,t.shader.uniforms(u)},s}};return t}function i(){var e={name:"smallGallery",create:function(e){var t,r,o=new Array(3),i=new Array(3),a={};return(a=_e()).m_context=e,a.texturelocker=0,a.init=function(e,a,s){e.assume_symbol("outSize"),t=e.fetch_float()*a,e.assume_symbol("innerSize"),r=e.fetch_float()*s,e.assume_symbol("outColor");for(var n=0;n<3;++n)o[n]=e.fetch_float()/255;for(e.assume_symbol("innerColor"),n=0;n<3;++n)i[n]=e.fetch_float()/255},a.shader_uniform=function(){return"uniform vec4 fac;                        uniform vec3 iColor;                        uniform vec3 oColor;                        uniform vec2 outSize;                        uniform vec2 innerSize;                        uniform vec4 shadowInBorder;                        uniform vec4 shadowOutBorder;                        "},a.shader_procession=function(){return"                        vec2 pos = textureCoordinate;                                               if(pos.x<outSize.x||pos.x>1.0 - outSize.x||pos.y<outSize.y||pos.y>1.0-outSize.y)                        {                            dst = vec4(oColor,1.0);                         }                          else if(pos.x<(outSize.x+innerSize.x)||pos.x>1.0 - (outSize.x+innerSize.x)||pos.y<(outSize.y+innerSize.y)||pos.y>1.0 - (outSize.y+innerSize.y))                      {                      float x = max(max(pos.x - shadowOutBorder.y,shadowOutBorder.x - pos.x),0.0);                             float y = max(max(pos.y - shadowOutBorder.w,shadowOutBorder.z - pos.y),0.0);                            float alpha = ((x)*(x)+(y)*(y))/0.00007;                                                        alpha = clamp(alpha,0.0,1.0);                            alpha = alpha*alpha*0.5;                            dst = vec4(mix(iColor,vec3(0.0,0.0,0.0),alpha),1.0);                        }                        else                            {                             float x = max(max(pos.x - shadowInBorder.y,shadowInBorder.x - pos.x),0.0);                             float y = max(max(pos.y - shadowInBorder.w,shadowInBorder.z - pos.y),0.0);                            float alpha = ((x)*(x)+(y)*(y))/0.00007;                                                        alpha = clamp(alpha,0.0,1.0);                            alpha = alpha*alpha*0.4;                            vec4 color = texture2D(inputImageTexture, pos * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));                            color.xyz = mix(color.xyz,vec3(0.0,0.0,0.0),alpha);                            dst = color;                            }                            "},a.shader_setup=function(e){var a=new Array(4),s=Math.max(e.width,e.height);a[0]=s/(s-2*t-2*r),a[1]=a[0],s==e.width?(a[2]=-(t+r)/e.width*a[0],a[3]=-(a[0]-1)/2):(a[3]=-(t+r)/e.height*a[0],a[2]=-(a[0]-1)/2);var n=[];n[0]=(t+r)/e.width+.01,n[1]=1-(t+r)/e.width-.01,n[2]=(t+r)/e.height+.01,n[3]=1-(t+r)/e.height-.01;var c=[];c[0]=t/e.width+.01,c[1]=1-t/e.width-.01,c[2]=t/e.height+.01,c[3]=1-t/e.height-.01;var u={};u.outSize=[t/e.width,t/e.height],u.innerSize=[r/e.width,r/e.height],u.fac=a,u.shadowInBorder=n,u.shadowOutBorder=c,u.iColor=i,u.oColor=o,e.shader.uniforms(u)},a}};return e}function a(){var t={name:"polaroid",create:function(t){var r,o,i,a,s=new Array(3),n=new Array(3),c={};return(c=_e()).m_context=t,c.texturelocker=0,c.init=function(e,t,c){e.assume_symbol("outSize"),r=e.fetch_float(),e.assume_symbol("innerSize"),o=e.fetch_float(),e.assume_symbol("roundCorner"),i=e.fetch_float(),e.assume_symbol("captionSize"),a=e.fetch_float(),e.assume_symbol("outColor");for(var u=0;u<3;++u)s[u]=e.fetch_float()/255;for(e.assume_symbol("innerColor"),u=0;u<3;++u)n[u]=e.fetch_float()/255},c.shader_uniform=function(){return"uniform sampler2D srcImage;                        uniform vec4 fac;                        uniform vec3 iColor;                        uniform vec3 oColor;                        uniform vec2 outSize;                        uniform vec2 innerSize;                        uniform vec2 dstSize;                        uniform float captationSize;                        uniform float radius;                        "},c.shader_procession=function(){return"                        vec2 pos = textureCoordinate;                        vec4 outRoundBorder = vec4(outSize.x+radius/dstSize.x,1.0-outSize.x-radius/dstSize.x,outSize.y+radius/dstSize.y,1.0-outSize.y-captationSize-radius/dstSize.y);                        vec4 innerRoundBorder = vec4((innerSize.x+outSize.x)+radius/dstSize.x,1.0-(innerSize.x+outSize.x)-radius/dstSize.x,(innerSize.y+outSize.y)+radius/dstSize.y,1.0-(innerSize.y+outSize.y)-captationSize-radius/dstSize.y);                        float ox = max(max(outRoundBorder.x-pos.x,pos.x-outRoundBorder.y),0.0);                        float oy = max(max(outRoundBorder.z-pos.y,pos.y-outRoundBorder.w),0.0);                        float ix = max(max(innerRoundBorder.x-pos.x,pos.x-innerRoundBorder.y),0.0);                        float iy = max(max(innerRoundBorder.z-pos.y,pos.y-innerRoundBorder.w),0.0);                        if(pos.x<outSize.x||pos.x>1.0 - outSize.x||pos.y<outSize.y||pos.y>1.0-(outSize.y+captationSize)                        ||(ox>0.0&&oy>0.0&&(ox*ox*dstSize.x*dstSize.x+oy*oy*dstSize.y*dstSize.y)>(radius)*(radius)))                        {                            dst = vec4(oColor,1.0);                         }                          else if(pos.x<(outSize.x+innerSize.x)||pos.x>1.0 - (outSize.x+innerSize.x)||pos.y<(outSize.y+innerSize.y)||pos.y>1.0 - (outSize.y+innerSize.y+captationSize)                        ||(ix>0.0&&iy>0.0&&(ix*ix*dstSize.x*dstSize.x+iy*iy*dstSize.y*dstSize.y)>radius*radius))                      {                            dst = vec4(iColor,1.0);                        }                        else                            {                            dst = vec4(texture2D(srcImage, pos * vec2(fac.x, fac.y) + vec2(fac.z, fac.w)).xyz,1.0);                            }                            "},c.shader_setup=function(t){var c=e(this.m_context),u=new Array(4);u[0]=t.width/(t.width-2*r-2*o),u[1]=t.height/(t.height-2*r-2*o-a),u[2]=-(r+o)/(t.width-2*r-2*o),u[3]=-(r+o)/(t.height-2*r-2*o-a),t.shader_texture("srcImage",c);var l={};l.outSize=[r/t.width,r/t.height],l.innerSize=[o/t.width,o/t.height],l.captationSize=a/t.height,l.dstSize=[t.width,t.height],l.fac=u,l.iColor=n,l.oColor=s,l.radius=i,t.shader.uniforms(l)},c}};return t}function s(){var e={name:"smallPolaroid",create:function(e){var t,r,o,i=new Array(3),a=new Array(3),s={};return(s=_e()).m_context=e,s.texturelocker=0,s.init=function(e,s,n){e.assume_symbol("outSize"),t=e.fetch_float()*s,e.assume_symbol("innerSize"),r=e.fetch_float()*s,e.assume_symbol("roundCorner"),o=e.fetch_float()*s,e.assume_symbol("outColor");for(var c=0;c<3;++c)i[c]=e.fetch_float()/255;for(e.assume_symbol("innerColor"),c=0;c<3;++c)a[c]=e.fetch_float()/255},s.shader_uniform=function(){return"uniform vec4 fac;                        uniform vec3 iColor;                        uniform vec3 oColor;                        uniform vec2 outSize;                        uniform vec2 innerSize;                        uniform vec2 dstSize;                        uniform float radius;                        "},s.shader_procession=function(){return"                        vec2 pos = textureCoordinate;                        vec4 outRoundBorder = vec4(outSize.x+radius/dstSize.x,1.0-outSize.x-radius/dstSize.x,outSize.y+radius/dstSize.y,1.0-outSize.y-radius/dstSize.y);                        vec4 innerRoundBorder = vec4((innerSize.x+outSize.x)+radius/dstSize.x,1.0-(innerSize.x+outSize.x)-radius/dstSize.x,(innerSize.y+outSize.y)+radius/dstSize.y,1.0-(innerSize.y+outSize.y)-radius/dstSize.y);                        float ox = max(max(outRoundBorder.x-pos.x,pos.x-outRoundBorder.y),0.0);                        float oy = max(max(outRoundBorder.z-pos.y,pos.y-outRoundBorder.w),0.0);                        float ix = max(max(innerRoundBorder.x-pos.x,pos.x-innerRoundBorder.y),0.0);                        float iy = max(max(innerRoundBorder.z-pos.y,pos.y-innerRoundBorder.w),0.0);                        if(pos.x<outSize.x||pos.x>1.0 - outSize.x||pos.y<outSize.y||pos.y>1.0-(outSize.y)                        ||(ox>0.0&&oy>0.0&&(ox*ox*dstSize.x*dstSize.x+oy*oy*dstSize.y*dstSize.y)>(radius)*(radius)))                        {                            dst = vec4(oColor,1.0);                         }                          else if(pos.x<(outSize.x+innerSize.x)||pos.x>1.0 - (outSize.x+innerSize.x)||pos.y<(outSize.y+innerSize.y)||pos.y>1.0 - (outSize.y+innerSize.y)                        ||(ix>0.0&&iy>0.0&&(ix*ix*dstSize.x*dstSize.x+iy*iy*dstSize.y*dstSize.y)>radius*radius))                      {                            dst = vec4(iColor,1.0);                        }                        else                            {                            dst = texture2D(inputImageTexture, pos * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));                            }                            "},s.shader_setup=function(e){var s=new Array(4),n=Math.max(e.width,e.height);s[0]=n/(n-2*t-2*r),s[1]=s[0],n==e.width?(s[2]=-(t+r)/e.width*s[0],s[3]=-(s[0]-1)/2):(s[3]=-(t+r)/e.height*s[0],s[2]=-(s[0]-1)/2);var c={};c.outSize=[t/e.width,t/e.height],c.innerSize=[r/e.width,r/e.height],c.dstSize=[e.width,e.height],c.fac=s,c.iColor=a,c.oColor=i,c.radius=o,e.shader.uniforms(c)},s}};return e}function n(){var t={name:"outside",create:function(t){var r,o,i,a,s,n,c,u,l,m,h=new Array(3),_={};return(_=_e()).m_context=t,_.texturelocker=0,_.init=function(e){e.assume_symbol("file"),r=e.fetch_string(),e.assume_symbol("resourceLayoutH"),o=e.fetch_float()+1e-5,i=e.fetch_float()+1e-5,a=e.fetch_float()+1e-5,i=Math.max(i,.008*(o+a)),e.assume_symbol("resourceLayoutV"),s=e.fetch_float()+1e-5,n=e.fetch_float()+1e-5,c=e.fetch_float()+1e-5,n=Math.max(n,.008*(s+c)),e.assume_symbol("thickness"),-1==(l=e.lookup_symbol(["pixel","width","height","perimeter",0]))&&(l=3),u=e.fetch_float(),e.assume_symbol("color");for(var t=0;t<3;++t)h[t]=e.fetch_float()/255;e.assume_symbol("ratio"),m=e.fetch_float()},_.shader_uniform=function(){return"uniform sampler2D border;                        uniform sampler2D srcImage;                        uniform vec4 my;                        uniform vec3 py;                        uniform vec3 ky;                        uniform vec4 mx;                        uniform vec3 px;                        uniform vec3 kx;                        uniform vec4 fac;                        uniform vec2 borderSize;                        uniform vec3 color;                        "},_.shader_procession=function(){return"vec3 bx = (vec3(textureCoordinate.x) - kx) * mx.xyz;                        bx.y = fract(bx.y)*mx.w;                        bx += px;                        vec3 by = (vec3(textureCoordinate.y) - ky) * my.xyz;                        by.y = fract(by.y)*my.w;                        by += py;                        vec2 borderCord;                        if(textureCoordinate.x > kx.z)                        {                            borderCord.x = bx.z;                        }                        else if(textureCoordinate.x > kx.y)                        {                            borderCord.x = bx.y;                        }                        else                        {                            borderCord.x = bx.x;                        }                        if(textureCoordinate.y > ky.z)                        {                            borderCord.y = by.z;                        }                        else if(textureCoordinate.y > ky.y)                        {                            borderCord.y = by.y;                        }                        else                        {                            borderCord.y = by.x;                        }                        if(textureCoordinate.x<borderSize.x||textureCoordinate.x>1.0 - borderSize.x||textureCoordinate.y<borderSize.y||textureCoordinate.y>1.0-borderSize.y)                        {                            dst.a = texture2D(border, borderCord).a;                                dst.xyz = color;                        }                        else                        {                            dst = texture2D(srcImage, textureCoordinate * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));                        }"},_.shader_setup=function(t){var _,f=e(this.m_context),d=Math.min(t.width,t.height),g=(_=3==l?u*t.width:u)/(d*m);if(this.texturelocker=this.m_context.get_resource_texture(r),!this.texturelocker)throw new error(r);t.shader_texture("border",this.texturelocker.texture),t.shader_texture("srcImage",f);var v=new Array(3),x=new Array(3),p=new Array(4),b=new Array(4),y=new Array(3),w=new Array(3);!function(e,t,r,u,m,h,_,f,d){var g,v;switch(l){case 0:g=4*d*(o+a)/((o+a+s+c)*e),v=4*d*(s+c)/((o+a+s+c)*t);break;case 1:v=(g=2*d)*e*(s+c)/((o+a)*t);break;case 2:g=(v=2*d)*t*(o+i)/((s+c)*e);break;case 3:default:var x=2*e+2*t;g=d*x*(o+a)/((o+a+s+c)*e),v=d*x*(s+c)/((o+a+s+c)*t)}var p=Math.max(v,g);if(p>.99){var b=.99/p;v*=b,g*=b}var y=o+i+a,w=s+n+c,T=v*t/(s+c),C=g*e/(o+a),S=(1-g)*e/i,E=(1-v)*t/n,z=Math.max(Math.floor(S/T+.5),1),R=Math.max(Math.floor(E/C+.5),1),M=o/y,A=i/y,D=a/y,k=s/w,F=n/w,I=c/w,P=1/(M+D),B=1/(k+I);r[0]=0,r[1]=g*M*P,r[2]=1-g*D*P,u[0]=0,u[1]=v*k*B,u[2]=1-v*I*B,m[0]=(M+D)/g,m[1]=z/(1-g),m[2]=m[0],m[3]=A,h[0]=(k+I)/v,h[1]=R/(1-v),h[2]=h[0],h[3]=F,_[0]=0,_[1]=M,_[2]=M+A,f[0]=0,f[1]=k,f[2]=k+F}(t.width,t.height,v,x,p,b,y,w,g);var T=new Array(4);T[0]=t.width/(t.width-2*_),T[1]=t.height/(t.height-2*_),T[2]=-_/(t.width-2*_),T[3]=-_/(t.height-2*_);var C={};C.fac=T,C.borderSize=[_/t.width,_/t.height],C.color=h,C.kx=v,C.ky=x,C.mx=p,C.my=b,C.px=y,C.py=w,t.shader.uniforms(C)},_}};return t}function c(){var t={name:"blendedOutside",create:function(t){new Array(3);var r,o,i,a,s,n,c,u,l,m,h,_=[],f={};return(f=_e()).m_context=t,f.texturelocker=0,f.init=function(e){e.assume_symbol("file"),r=e.fetch_string(),e.assume_symbol("blend"),o=e.fetch_string(),e.assume_symbol("resSize"),_[0]=e.fetch_float(),_[1]=e.fetch_float(),e.assume_symbol("resourceLayoutH"),i=e.fetch_float()+1e-5,a=e.fetch_float()+1e-5,s=e.fetch_float()+1e-5,a=Math.max(a,.008*(i+s)),e.assume_symbol("resourceLayoutV"),n=e.fetch_float()+1e-5,c=e.fetch_float()+1e-5,u=e.fetch_float()+1e-5,c=Math.max(c,.008*(n+u)),e.assume_symbol("thickness"),-1==(m=e.lookup_symbol(["pixel","width","height","perimeter",0]))&&(m=3),l=e.fetch_float(),e.assume_symbol("ratio"),h=e.fetch_float()},f.shader_uniform=function(){return"uniform sampler2D border;                        uniform sampler2D srcImage;                        uniform sampler2D resImage;                        uniform vec2 resSize;                        uniform vec4 my;                        uniform vec3 py;                        uniform vec3 ky;                        uniform vec4 mx;                        uniform vec3 px;                        uniform vec3 kx;                        uniform vec4 fac;                        uniform vec2 borderSize;                        "},f.shader_procession=function(){return"vec3 bx = (vec3(textureCoordinate.x) - kx) * mx.xyz;                        bx.y = fract(bx.y)*mx.w;                        bx += px;                        vec3 by = (vec3(textureCoordinate.y) - ky) * my.xyz;                        by.y = fract(by.y)*my.w;                        by += py;                        vec2 borderCord;                        if(textureCoordinate.x > kx.z)                        {                            borderCord.x = bx.z;                        }                        else if(textureCoordinate.x > kx.y)                        {                            borderCord.x = bx.y;                        }                        else                        {                            borderCord.x = bx.x;                        }                        if(textureCoordinate.y > ky.z)                        {                            borderCord.y = by.z;                        }                        else if(textureCoordinate.y > ky.y)                        {                            borderCord.y = by.y;                        }                        else                        {                            borderCord.y = by.x;                        }                        if(textureCoordinate.x<borderSize.x||textureCoordinate.x>1.0 - borderSize.x||textureCoordinate.y<borderSize.y||textureCoordinate.y>1.0-borderSize.y)                        {                            vec2 resCoord;                            resCoord.x  = (textureCoordinate.x-floor(textureCoordinate.x/resSize.x)*resSize.x)/resSize.x;                            resCoord.y  = (textureCoordinate.y-floor(textureCoordinate.y/resSize.y)*resSize.y)/resSize.y;                            dst.xyz = texture2D(resImage, resCoord).rgb;                            dst.a = texture2D(border, borderCord).a;                        }                        else                        {                            dst = texture2D(srcImage, textureCoordinate * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));                        }"},f.shader_setup=function(t){var f,d=e(this.m_context),g=Math.min(t.width,t.height);3==m&&(f=l*t.width);var v=f/(g*h);this.texturelocker=this.m_context.get_resource_texture(r);var x=this.m_context.get_resource_texture(o);if(!this.texturelocker)throw new error(r);if(!x)throw new error(o);t.shader_texture("border",this.texturelocker.texture),t.shader_texture("resImage",x.texture),t.shader_texture("srcImage",d);var p=new Array(3),b=new Array(3),y=new Array(4),w=new Array(4),T=new Array(3),C=new Array(3);!function(e,t,r,o,l,h,_,f,d){var g,v;switch(m){case 0:g=4*d*(i+s)/((i+s+n+u)*e),v=4*d*(n+u)/((i+s+n+u)*t);break;case 1:v=(g=2*d)*e*(n+u)/((i+s)*t);break;case 2:g=(v=2*d)*t*(i+a)/((n+u)*e);break;case 3:default:var x=2*e+2*t;g=d*x*(i+s)/((i+s+n+u)*e),v=d*x*(n+u)/((i+s+n+u)*t)}var p=Math.max(v,g);if(p>.99){var b=.99/p;v*=b,g*=b}var y=i+a+s,w=n+c+u,T=v*t/(n+u),C=g*e/(i+s),S=(1-g)*e/a,E=(1-v)*t/c,z=Math.max(Math.floor(S/T+.5),1),R=Math.max(Math.floor(E/C+.5),1),M=i/y,A=a/y,D=s/y,k=n/w,F=c/w,I=u/w,P=1/(M+D),B=1/(k+I);r[0]=0,r[1]=g*M*P,r[2]=1-g*D*P,o[0]=0,o[1]=v*k*B,o[2]=1-v*I*B,l[0]=(M+D)/g,l[1]=z/(1-g),l[2]=l[0],l[3]=A,h[0]=(k+I)/v,h[1]=R/(1-v),h[2]=h[0],h[3]=F,_[0]=0,_[1]=M,_[2]=M+A,f[0]=0,f[1]=k,f[2]=k+F}(t.width,t.height,p,b,y,w,T,C,v);var S=new Array(4);S[0]=t.width/(t.width-2*f),S[1]=t.height/(t.height-2*f),S[2]=-f/(t.width-2*f),S[3]=-f/(t.height-2*f);var E={};E.fac=S,E.resSize=[Math.min(_[0]/t.width,1),Math.min(_[1]/t.height,1)],E.borderSize=[f/t.width,f/t.height],E.kx=p,E.ky=b,E.mx=y,E.my=w,E.px=T,E.py=C,t.shader.uniforms(E)},f}};return t}function u(){var e={name:"smallOutside",create:function(e){var t,r,o,i,a,s,n,c,u,l,m=new Array(3),h={};return(h=_e()).m_context=e,h.texturelocker=0,h.init=function(e){m_file_name_vec=[],e.assume_symbol("file"),t=e.fetch_string(),e.assume_symbol("resourceLayoutH"),r=e.fetch_float()+1e-5,o=e.fetch_float()+1e-5,i=e.fetch_float()+1e-5,o=Math.max(o,.008*(r+i)),e.assume_symbol("resourceLayoutV"),a=e.fetch_float()+1e-5,s=e.fetch_float()+1e-5,n=e.fetch_float()+1e-5,s=Math.max(s,.008*(a+n)),e.assume_symbol("thickness"),-1==(u=e.lookup_symbol(["pixel","width","height","perimeter",0]))&&(u=3),c=e.fetch_float(),e.assume_symbol("color");for(var h=0;h<3;++h)m[h]=e.fetch_float()/255;e.assume_symbol("ratio"),l=e.fetch_float()},h.shader_uniform=function(){return"uniform sampler2D border;                        uniform vec4 my;                        uniform vec3 py;                        uniform vec3 ky;                        uniform vec4 mx;                        uniform vec3 px;                        uniform vec3 kx;                        uniform vec4 fac;                        uniform vec2 borderSize;                        uniform vec3 color;                        "},h.shader_procession=function(){return"vec3 bx = (vec3(textureCoordinate.x) - kx) * mx.xyz;                        bx.y = fract(bx.y)*mx.w;                        bx += px;                        vec3 by = (vec3(textureCoordinate.y) - ky) * my.xyz;                        by.y = fract(by.y)*my.w;                        by += py;                        vec2 borderCord;                        if(textureCoordinate.x > kx.z)                        {                            borderCord.x = bx.z;                        }                        else if(textureCoordinate.x > kx.y)                        {                            borderCord.x = bx.y;                        }                        else                        {                            borderCord.x = bx.x;                        }                        if(textureCoordinate.y > ky.z)                        {                            borderCord.y = by.z;                        }                        else if(textureCoordinate.y > ky.y)                        {                            borderCord.y = by.y;                        }                        else                        {                            borderCord.y = by.x;                        }                        if(textureCoordinate.x<borderSize.x||textureCoordinate.x>1.0 - borderSize.x||textureCoordinate.y<borderSize.y||textureCoordinate.y>1.0-borderSize.y)                        {                            dst.xyz = color;                            dst.a = texture2D(border, borderCord).a;                        }                        else                        {                            dst = texture2D(inputImageTexture, textureCoordinate * vec2(fac.x, fac.y) + vec2(fac.z, fac.w));                        }"},h.shader_setup=function(e){var h=Math.min(e.width+2*c,e.height+2*c),_=c/(h*l);e.shader_texture("border",this.texturelocker.texture);var f=new Array(3),d=new Array(3),g=new Array(4),v=new Array(4),x=new Array(3),p=new Array(3);!function(e,t,c,l,m,h,_,f,d){var g,v;switch(u){case 0:g=4*d*(r+i)/((r+i+a+n)*e),v=4*d*(a+n)/((r+i+a+n)*t);break;case 1:v=(g=2*d)*e*(a+n)/((r+i)*t);break;case 2:g=(v=2*d)*t*(r+o)/((a+n)*e);break;case 3:default:var x=2*e+2*t;g=d*x*(r+i)/((r+i+a+n)*e),v=d*x*(a+n)/((r+i+a+n)*t)}var p=Math.max(v,g);if(p>.99){var b=.99/p;v*=b,g*=b}var y=r+o+i,w=a+s+n,T=v*t/(a+n),C=g*e/(r+i),S=(1-g)*e/o,E=(1-v)*t/s,z=Math.max(Math.floor(S/T+.5),1),R=Math.max(Math.floor(E/C+.5),1),M=r/y,A=o/y,D=i/y,k=a/w,F=s/w,I=n/w,P=1/(M+D),B=1/(k+I);c[0]=0,c[1]=g*M*P,c[2]=1-g*D*P,l[0]=0,l[1]=v*k*B,l[2]=1-v*I*B,m[0]=(M+D)/g,m[1]=z/(1-g),m[2]=m[0],m[3]=A,h[0]=(k+I)/v,h[1]=R/(1-v),h[2]=h[0],h[3]=F,_[0]=0,_[1]=M,_[2]=M+A,f[0]=0,f[1]=k,f[2]=k+F}(e.width+2*c,e.height+2*c,f,d,g,v,x,p,_);var b=new Array(4);b[0]=(e.width+2*c)/e.width,b[1]=(e.height+2*c)/e.height,b[2]=-c/e.width,b[3]=-c/e.height;var y={};if(this.texturelocker=this.m_context.get_resource_texture(t),!this.texturelocker)throw new error(t);y.fac=b,y.borderSize=[c/(e.width+2*c),c/(e.height+2*c)],y.color=m,y.kx=f,y.ky=d,y.mx=g,y.my=v,y.px=x,y.py=p,e.shader.uniforms(y)},h}};return e}return function(e){var l=[t(),o(),a(),n(),r(),i(),s(),u(),c()];return de(e,l,l.length)}}(),e}function ue(){var e={name:"border"};return e.create=function(){function e(){var e={name:"corner",create:function(e){var t,r,o,i,a,s,n,c,u,l,m,h=[],_={};return(_=_e()).m_context=e,_.texturelocker=0,_.init=function(e){for(m=null,h=[],l=!1;e.test_symbol("file");){var _={size:0,file_name:""};_.file_name=e.fetch_string(),"BPSNumber"==e.get_parcer_status()&&(_.size=e.fetch_float()),_.size*=_.size,h.push(_)}if(t=h[0].file_name,e.assume_symbol("resourceLayoutH"),r=e.fetch_float()+1e-5,o=e.fetch_float()+1e-5,i=e.fetch_float()+1e-5,o=Math.max(o,.008*(r+i)),e.assume_symbol("resourceLayoutV"),a=e.fetch_float()+1e-5,s=e.fetch_float()+1e-5,n=e.fetch_float()+1e-5,s=Math.max(s,.008*(a+n)),e.assume_symbol("thickness"),-1==(u=e.lookup_symbol(["pixel","width","height","perimeter",0]))&&(u=3),c=e.fetch_float(.01,.5),e.test_symbol("thicken")&&(l=!0),e.test_symbol("color")){m=new Array(3);for(var f=0;f<3;++f)m[f]=e.fetch_float()/255}},_.shader_uniform=function(){return"uniform sampler2D border;                        uniform vec4 my;                        uniform vec3 py;                        uniform vec3 ky;                        uniform vec4 mx;                        uniform vec3 px;                        uniform vec3 kx;                        uniform vec4 color;                        "},_.shader_procession=function(){return"vec3 bx = (vec3(textureCoordinate.x) - kx) * mx.xyz;                        bx.y = fract(bx.y)*mx.w;                        bx += px;                        vec3 by = (vec3(textureCoordinate.y) - ky) * my.xyz;                        by.y = fract(by.y)*my.w;                        by += py;                        vec2 borderCord;                        if(textureCoordinate.x > kx.z)                        {                            borderCord.x = bx.z;                        }                        else if(textureCoordinate.x > kx.y)                        {                            borderCord.x = bx.y;                        }                        else                        {                            borderCord.x = bx.x;                        }                        if(textureCoordinate.y > ky.z)                        {                            borderCord.y = by.z;                        }                        else if(textureCoordinate.y > ky.y)                        {                            borderCord.y = by.y;                        }                        else                        {                            borderCord.y = by.x;                        }                        vec4 bp = texture2D(border, borderCord);                        if(color.w==1.0)                            bp = vec4(color.xyz,bp.w);                        dst.rgb = mix(src.rgb,bp.rgb,bp.a);                        dst.a = 1.0;"},_.shader_setup=function(e){var _=e.width*e.height;if(l){var f=Math.min(e.width,e.height);f<=331&&(c+=.9*(1-f/331))>.48&&(c=.48)}else if(h.length>1)for(var d=0;d<h.length;++d)if(_<h[d].size||0==h[d].size){t=h[d].file_name;break}if(this.texturelocker=this.m_context.get_resource_texture(t),!this.texturelocker)throw new error(t);e.shader_texture("border",this.texturelocker.texture);var g=new Array(3),v=new Array(3),x=new Array(4),p=new Array(4),b=new Array(3),y=new Array(3);!function(e,t,l,m,h,_,f,d){var g,v;switch(u){case 0:g=4*c*(r+i)/((r+i+a+n)*e),v=4*c*(a+n)/((r+i+a+n)*t);break;case 1:v=(g=2*c)*e*(a+n)/((r+i)*t);break;case 2:g=(v=2*c)*t*(r+o)/((a+n)*e);break;case 3:default:var x=2*e+2*t;g=c*x*(r+i)/((r+i+a+n)*e),v=c*x*(a+n)/((r+i+a+n)*t)}var p=Math.max(v,g);if(p>.99){var b=.99/p;v*=b,g*=b}var y=r+o+i,w=a+s+n,T=v*t/(a+n),C=g*e/(r+i),S=(1-g)*e/o,E=(1-v)*t/s,z=Math.max(Math.floor(S/T+.5),1),R=Math.max(Math.floor(E/C+.5),1),M=r/y,A=o/y,D=i/y,k=a/w,F=s/w,I=n/w,P=1/(M+D),B=1/(k+I);l[0]=0,l[1]=g*M*P,l[2]=1-g*D*P,m[0]=0,m[1]=v*k*B,m[2]=1-v*I*B,h[0]=(M+D)/g,h[1]=z/(1-g),h[2]=h[0],h[3]=A,_[0]=(k+I)/v,_[1]=R/(1-v),_[2]=_[0],_[3]=F,f[0]=0,f[1]=M,f[2]=M+A,d[0]=0,d[1]=k,d[2]=k+F}(e.width,e.height,g,v,x,p,b,y);var w={};w.color=m?[m[0],m[1],m[2],1]:[0,0,0,0],w.kx=g,w.ky=v,w.mx=x,w.my=p,w.px=b,w.py=y,e.shader.uniforms(w)},_}};return e}function t(){var e={name:"plan",create:function(e){var t,r,o,i,a,s,n=new Array(12),c=new Array(2),u=new Array(12);function l(e,t,r,o,n){var c,u=[],l=e/t;l<1&&(o*=l);var m,h,_=n[0],f=n[1];return c=o/l*s*a,l>=1?_/=l:f*=l,"LB"==r?(m=0,h=1-i-f):"CB"==r?(m=.5-_/2,h=1-i-f):"RB"==r?(m=1-_,h=1-i-f):"LT"==r?(m=0,h=i):"CT"==r?(m=.5-_/2,h=i):"RT"==r?(m=1-_,h=i):"CX"==r?(m=.5-_/2,h=-1):"XC"==r?(m=-1,h=.5-f/2):"CC"==r?(m=.5-_/2,h=.5-f/2):"XX"==r&&(m=-1,h=-1),u[0]=m,u[1]=h,u[2]=_,u[3]=f,result={dst_texArea:u,thk:o,lengthH:c},result}var m={};return(m=_e()).m_context=e,m.texturelocker=0,m.init=function(e){var l,m;e.assume_symbol("file"),t=e.fetch_string(),l=e.fetch_float(),m=e.fetch_float();for(var h=0;12!=h;++h)u[h]=e.fetch_float(),n[h]=h%2==0?u[h]/l:u[h]/m;r=e.fetch_symbol(),o=r,c[0]=e.fetch_float(),c[1]=e.fetch_float(),e.assume_symbol("thickness"),"BPSSymbol"==e.get_parcer_status()&&e.lookup_symbol(["pixel","width","height","perimeter",0],!0),i=e.fetch_float(),a=l/m,s=n[2]/n[3]},m.shader_uniform=function(){return"uniform sampler2D borderTexture;                        uniform vec4 borderBlocks[3];                        uniform vec4 texArea;                        uniform float lengthH;                        uniform float borderThickness;                        vec3 blend(vec3 src, vec3 dst, float alpha)                        {                            return mix(src, dst, alpha);                        }                        "},m.shader_procession=function(){return"vec2 tc = textureCoordinate;                        vec2 coord;                        if(tc.y <= borderThickness)                        {                            coord = vec2(mod(tc.x, lengthH) / lengthH, tc.y / borderThickness) * borderBlocks[0].zw + borderBlocks[0].xy;                            vec4 frameTop = texture2D(borderTexture, coord);                            src.rgb = blend(src.rgb, frameTop.rgb, frameTop.a);                        }                        else if(tc.y >= 1.0 - borderThickness)                        {                            coord = vec2(mod(tc.x, lengthH) / lengthH, (tc.y - 1.0 + borderThickness) / borderThickness) * borderBlocks[1].zw + borderBlocks[1].xy;                            vec4 frameBottom = texture2D(borderTexture, coord);                            src.rgb = blend(src.rgb, frameBottom.rgb, frameBottom.a);                        }                        if(tc.x >= texArea.x && tc.x <= texArea.x + texArea.z                            && tc.y >= texArea.y && tc.y <= texArea.y + texArea.w)                        {                            coord = (tc - texArea.xy) / texArea.zw * borderBlocks[2].zw + borderBlocks[2].xy;                            vec4 texText = texture2D(borderTexture, coord);                            src.rgb = blend(src.rgb, texText.rgb, texText.a);                        }                        dst = src;"},m.shader_setup=function(e){if(this.texturelocker=this.m_context.get_resource_texture(t),!this.texturelocker)throw new error(t);e.shader_texture("borderTexture",this.texturelocker.texture);var r=this.m_context.context().getUniformLocation(e.shader.program,"borderBlocks");if(r<0)throw new error("CGEBorderCoverudtProcess::shader_setup");this.m_context.context().uniform4fv(r,n);var a=l(e.width,e.height,o,i,c),s={};s.borderThickness=a.thk,s.lengthH=a.lengthH,s.texArea=a.dst_texArea,e.shader.uniforms(s)},m}};return e}function r(){var e={name:"inner",create:function(e){var t,r,o,i,a,s,n,c,u,l=[],m={};return(m=_e()).m_context=e,m.texturelocker=0,m.init=function(e){for(l=[];e.test_symbol("file");){var m={size:0,file_name:""};m.file_name=e.fetch_string(),"BPSNumber"==e.get_parcer_status()&&(m.size=e.fetch_float()),m.size*=m.size,l.push(m)}t=l[0].file_name,e.assume_symbol("resourceLayoutH"),r=e.fetch_float()+1e-5,o=e.fetch_float()+1e-5,i=e.fetch_float()+1e-5,o=Math.max(o,.008*(r+i)),e.assume_symbol("resourceLayoutV"),a=e.fetch_float()+1e-5,s=e.fetch_float()+1e-5,n=e.fetch_float()+1e-5,s=Math.max(s,.008*(a+n)),e.assume_symbol("thickness"),-1==(u=e.lookup_symbol(["pixel","width","height","perimeter",0]))&&(u=3),c=e.fetch_float(.01,.5)},m.shader_uniform=function(){return"uniform sampler2D border;                        uniform vec4 my;                        uniform vec3 py;                        uniform vec3 ky;                        uniform vec4 mx;                        uniform vec3 px;                        uniform vec3 kx;                        uniform vec4 color;                        "},m.shader_procession=function(){return"vec3 bx = (vec3(textureCoordinate.x) - kx) * mx.xyz;                        bx.y = fract(bx.y)*mx.w;                        bx += px;                        vec3 by = (vec3(textureCoordinate.y) - ky) * my.xyz;                        by.y = fract(by.y)*my.w;                        by += py;                        vec2 borderCord;                        if(textureCoordinate.x > kx.z)                        {                            borderCord.x = bx.z;                        }                        else if(textureCoordinate.x > kx.y)                        {                            borderCord.x = bx.y;                        }                        else                        {                            borderCord.x = bx.x;                        }                        if(textureCoordinate.y > ky.z)                        {                            borderCord.y = by.z;                        }                        else if(textureCoordinate.y > ky.y)                        {                            borderCord.y = by.y;                        }                        else                        {                            borderCord.y = by.x;                        }                        vec4 bp = texture2D(border, borderCord);                        dst = vec4(src.rgb,bp.a);"},m.shader_setup=function(e){for(var m=e.width*e.height,h=0;h<l.length;++h)if(m<l[h].size||0==l[h].size){t=l[h].file_name;break}if(this.texturelocker=this.m_context.get_resource_texture(t),!this.texturelocker)throw new error(t);e.shader_texture("border",this.texturelocker.texture);var _=new Array(3),f=new Array(3),d=new Array(4),g=new Array(4),v=new Array(3),x=new Array(3);!function(e,t,l,m,h,_,f,d){var g,v;switch(u){case 0:g=4*c*(r+i)/((r+i+a+n)*e),v=4*c*(a+n)/((r+i+a+n)*t);break;case 1:v=(g=2*c)*e*(a+n)/((r+i)*t);break;case 2:g=(v=2*c)*t*(r+o)/((a+n)*e);break;case 3:default:var x=2*e+2*t;g=c*x*(r+i)/((r+i+a+n)*e),v=c*x*(a+n)/((r+i+a+n)*t)}var p=Math.max(v,g);if(p>.99){var b=.99/p;v*=b,g*=b}var y=r+o+i,w=a+s+n,T=v*t/(a+n),C=g*e/(r+i),S=(1-g)*e/o,E=(1-v)*t/s,z=Math.max(Math.floor(S/T+.5),1),R=Math.max(Math.floor(E/C+.5),1),M=r/y,A=o/y,D=i/y,k=a/w,F=s/w,I=n/w,P=1/(M+D),B=1/(k+I);l[0]=0,l[1]=g*M*P,l[2]=1-g*D*P,m[0]=0,m[1]=v*k*B,m[2]=1-v*I*B,h[0]=(M+D)/g,h[1]=z/(1-g),h[2]=h[0],h[3]=A,_[0]=(k+I)/v,_[1]=R/(1-v),_[2]=_[0],_[3]=F,f[0]=0,f[1]=M,f[2]=M+A,d[0]=0,d[1]=k,d[2]=k+F}(e.width,e.height,_,f,d,g,v,x);var p={};p.kx=_,p.ky=f,p.mx=d,p.my=g,p.px=v,p.py=x,e.shader.uniforms(p)},m}};return e}return function(o){var i=[e(),t(),r()];return de(o,i,i.length)}}(),e}function le(e){var r,o=[(r={name:"curve"},r.create=function(){function e(e){for(var t=0;t<256;++t)e[t]=(t+.5)*(1/256)}return function(t){var r={};return(r=_e()).m_context=t,r.m_curve_tex=0,r.m_data=[],r.m_red=new Array(256),r.m_green=new Array(256),r.m_blue=new Array(256),r.shader_uniform=function(){return"uniform sampler2D curve;"},r.shader_procession=function(){return"dst.r = texture2D(curve, vec2(src.r,0.5)).x;              dst.g = texture2D(curve, vec2(src.g,0.5)).y;               dst.b = texture2D(curve, vec2(src.b,0.5)).z;              dst.a = src.a;"},r.shader_setup=function(e){this.m_curve_tex||(this.m_curve_tex=pe(256,1,!0)),e.shader_texture("curve",this.m_curve_tex),this.m_context.m_context.texSubImage2D(this.m_context.m_context.TEXTURE_2D,0,0,0,256,1,this.m_context.m_context.RGBA,this.m_context.m_context.UNSIGNED_BYTE,new Uint8Array(this.m_data))},r.m_formula_list=0,r.init=function(t){e(this.m_red),e(this.m_green),e(this.m_blue);do{var r=t.fetch_symbol();this.m_formula_list||(this.m_formula_list=C());var o=this.m_formula_list.get_formula_Item_with_symbol(r);o&&o!={}&&o.color!={}||t.error("invalid curve process name",r),o.color(t,this.m_red,this.m_green,this.m_blue)}while(t.pre_test_symbol("curve"));for(var i=0;i<256;++i)this.m_data[4*i]=Math.min(256*this.m_red[i],255),this.m_data[4*i+1]=Math.min(256*this.m_green[i],255),this.m_data[4*i+2]=Math.min(256*this.m_blue[i],255),this.m_data[4*i+3]=255},r}}(),r),t(),oe(),O(),ae(),se(),ne(),Q(),V(),ee(),ue(),H(),W(),Z(),J(),ce(),te(),re(),L()];return de(e,o,o.length)}function me(){this.m_buf="",this.m_process_log="",this.tmp=""}function he(e){var t={};return t.m_taget=e,t.destroy=function(){this.m_taget&&this.m_taget.unlock()},t.lock=function(e){return e==this.m_taget||!!e.lock()&&(this.m_taget=e,!0)},t}function _e(){var e={_process:{},m_context:{}},t=0;return e.m_shader=0,e.shader_uniform={},e.shader_procession={},e.shader_setup={},e.init={},e.fshPTPTemplate="\t    \tvarying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;        %p        void main()    {\t\tvec4 src = texture2D(inputImageTexture, textureCoordinate);    vec4 dst;    %s        gl_FragColor = dst;    }",e.shader_setup={},e.get_unit={},e.destroy=function(){},e.gpu_process=function(e,r,o){try{if(t=he(r),!this.m_shader){var i=this.fshPTPTemplate.replace(/%p/g,this.shader_uniform());i=i.replace(/%s/g,this.shader_procession()),this.m_shader=new N(null,i,this.m_context.m_context)}var a=fe(this.m_context.m_context,o,this.m_shader);if(this.init(e,o.m_width,o.m_height),a.shader_texture("inputImageTexture",r.current()),this.shader_setup(a),a.draw_to(r.new_temporary()),this.m_context.m_context.getError())throw new error("CGEPTPTemplate::gpu_process");r.push_to_current(),t.destroy()}catch(e){throw new error("CGEPTPTemplete::gpu_process")}finally{t.destroy(),this.texturelocker&&this.m_context.release_resource_texture(this.texturelocker)}},e.destroy=function(){t.destroy(),this.m_shader&&(this.m_shader.destroy(),this.m_shader=0),this.m_curve_tex&&this.m_context.m_context.deleteTexture(this.m_curve_tex),this.m_curve_tex=0,this.texturelocker&&(this.m_context.release_resource_texture(this.texturelocker),this.texturelocker=0),this.m_formula_list&&(this.m_formula_list.destroy(),this.m_formula_list=0)},e}function fe(e,t,r,o,i,a){var s={};s.gl=e,s.cnt=0,null==t?(s.width=o,s.height=i,s.frame_buffer=a):(s.width=t.m_width,s.height=t.m_height,s.frame_buffer=t.m_frame_buffer),s.m_context=e,s.shader=r,e.useProgram(s.shader.program),null==s.gl.engineVertexBuffer&&(s.gl.engineVertexBuffer=s.gl.createBuffer()),s.gl.bindBuffer(s.gl.ARRAY_BUFFER,s.gl.engineVertexBuffer),s.gl.bufferData(s.gl.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,1,1,-1,1]),s.gl.STATIC_DRAW),s.shader.vertexAttribute=s.gl.getAttribLocation(s.shader.program,"vPosition"),s.gl.enableVertexAttribArray(s.shader.vertexAttribute),s.gl.vertexAttribPointer(s.shader.vertexAttribute,2,s.gl.FLOAT,!1,0,new Float32Array([-1,-1,1,-1,1,1,-1,1]));s.gl.getError();return s.shader_texture=function(e,t){this.gl.activeTexture(this.gl.TEXTURE2+this.cnt),this.gl.bindTexture(this.gl.TEXTURE_2D,t);var r={};r[e]=2+this.cnt,this.shader.textures(r);this.gl.getError();++this.cnt},s.draw_to=function(e,t){t||this.gl.TRIANGLE_FAN;if(this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.frame_buffer),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,e,0),this.gl.checkFramebufferStatus(this.gl.FRAMEBUFFER)!=this.gl.FRAMEBUFFER_COMPLETE);this.gl.viewport(0,0,this.width,this.height),this.gl.drawArrays(this.gl.TRIANGLE_FAN,0,4);this.gl.getError()},s}function de(e,t,r){var o={get_item:function(e){var t=e.fetch_symbol(),r=this.m_list[t];if(r=={})throw new Error("create_dispatch_parcer");r.parcer||(r.parcer=r.create(this.m_context));var o="processing:";return o+=t,o+="\n",this.m_context.on_log(o),r}};o.m_context=e,o.m_list={};for(var i=0;i<r;++i)o.m_list[t[i].name]={},o.m_list[t[i].name]={parcer:null,create:t[i].create};return o.gpu_process=function(e,t,r){this.get_item(e).parcer.gpu_process(e,t,r)},o.destroy=function(){for(var e in this.m_list)this.m_list[e].parcer&&this.m_list[e].parcer.destroy&&this.m_list[e].parcer.destroy()},o.mode_change=function(){},o.size_change=function(){},o}function ge(){this.m_macros={},this.m_script="",this.read_macro=function(e,t,r){var o=!1;function i(e){var t=e.indexOf("<");if(t>0){o=!0;var r=e.slice(t+1);r=findAngleBraket(r);var i=e.indexOf(">");if(i<0)throw new Error("语法错误：'<' unmatch");var a=r.slice(0,i);return a=this.m_macros[a]?this.m_macros[a]:""}return e}return i.bind(this),r.script=i(e),o}}function ve(){var e={};return e.m_data=new ge,e.set_macro=function(e,t){t?this.m_data.m_macros[e]=t:this.m_data.m_macros.erase(e)},e.clear=function(){this.m_data.m_macros.clear()},e._parce=function(e){for(var t="";;){this.m_data.m_script="";var r={};if(r.script=this.m_data.m_script,!this.m_data.read_macro(e.script,!0,r))return r.script;this.m_data.m_script=r.script;var o=this.m_data.m_script;this.m_data.m_script=t,t=o,e.script=t}},e}var xe=function(e){return"[object String]"!=Object.prototype.toString.call(e)||"CRMProcessingSuccess"==e};function pe(t,r,o){o=null==o||o;var i;return i=e.createTexture(),e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,o?e.LINEAR:e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,o?e.LINEAR:e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t,r,0,e.RGBA,e.UNSIGNED_BYTE,null),e.getError()?(e.deleteTexture(i),0):i}function be(t){e.deleteTexture(t)}function ye(t,r){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,r?e.LINEAR:e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,r?e.LINEAR:e.NEAREST)}function we(t,r){if(t)return t;if(t=new N(null,r,e),e.getError())throw new Error("error in check_shader");return t}var Te=function(t,r,o,i,a,s){var n=new Array,c=new Array,u=new Array,l=null,m=!1,h=function(e,t){for(var r=u.length-1;r>=0;--r)if(u[r].name==e)return t(r),!0;return!1},_=function(e){var r=n.length;if(!(e>=r)){for(var o=e;o<r;++o){var i=n[o];(a||i!=t)&&be(i)}n.length=e}},f=function(e){n[n.length]=e,_(s.get_max_pool_size())},d=function(){var e=n.length;if(!e)return null;var t=n[--e];return n.length=e,t},g=function(){p.unlock(),u.map((function(e){f(e.image)})),u.length=0,l&&(f(l),l=null)},v=function(){var e=pe(r,o);if(!e)throw Error("OpenGLError: ProcessData::new_image");return e},x=function(t,i){var a=t;if(a||(a=d()),a||(a=v()),!function(t,r,o,i,a){return e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,t),e.copyTexSubImage2D(e.TEXTURE_2D,0,0,0,0,0,i,a),!e.getError()}(a,i,s.get_frame_buffer(),r,o))throw t||f(a),Error("OpenGLError: ProcessData::duplicate_image");return a},p={get_src:function(){return t},unlock:function(){c.map((function(e){e&&f(e)})),c.length=0},destroy:function(){g(),a&&be(t),_(0)},current:function(){return l},new_temporary:function(){var e=d();return e||(e=v()),c[c.length]=e,e},get_temporary:function(e){return e=ap_idx(e),c[e]},push_to_current:function(e){e=function(e){var t=c.length;return e<0&&(e+=t),e}(e=null==e?-1:e),f(l),l=c[e],c[e]=null},load_channel:function(e){var t=null;return h(e,(function(e){t=u[e].image})),t},load_view:function(e){var t=s.get_view_by_number(e);return t?t.processed?s.load_view(t):"CRMOtherError":"CRMScriptSyntaxError"},get_inner_result:function(){return l},get_result:function(){var e=l;return l=null,g(),e},fetch_tmp_image:function(){var e=d();return i||a||t!=e||(e=d(),f(t)),e||(e=v()),e},put_tmp_image:function(e){f(e)},new_channel:function(e){var t=d();t||(t=v()),u[u.length]={name:e,image:t},x(t,l)},swap_channel:function(e){return h(e,(function(e){var t=l;l=u[e].image,u[e].image=t}))},end_channel:function(e){return h(e,(function(e){f(u[e].image),u.splice(e,1)}))},prepare:function(){if(g(),!t||m)throw Error("failed load source image");i?l=x(null,t):(l=t,m=!0,a&&(t=null))},prepare_empty:function(){return g(),(l=d())||(l=v()),l},size:function(){return{width:r,height:o}}};return p};function Ce(){this.serial=0,this.script=null,this.compressor=null,this.texture=0,this.processed=!1}return function(t){var r=null,o=0,i=ve(),a=(ve(),""),s=null,n=null,c={},u=0,l=0,m=0,h=new Array,_=function(){h.map((function(e){e.texture&&be(e.texture),e.compressor&&e.compressor.destroy(),e.compressor=null,e.texture=null,e.processed=!1}))},f=function(e,t){for(var r=0;r<h.length;++r)if(e==h[r].serial)return t(r),!0;return!1},d=function(e){if(e.texture||!r)return"CRMInnerError";e.texture=r.fetch_tmp_image();var t=e.compressor;return e.compressor=null,t.decompress_image_then_release(e.texture)?"CRMProcessingSuccess":(r.put_tmp_image(e.texture),e.texture=null,e.processed=!1,"CRMOtherError")},g={get_gl:function(){return e},destroy:function(){s&&s.destroy(),n&&n.destroy(),r&&r.destroy(),l&&t.context().deleteFramebuffer(l),_(),t.destroy()},get_src:function(){return r.get_src()},create_new_texture:function(e,t,r){return pe(e,t,r)},get_configure:function(){return c},set_configure:function(e){c=e},set_image:function(e,t,i,a,c,l){null==a&&(a=!1),null==c&&(c=!1),null==l&&(l=!0),(!e||t<=0||i<=0)&&(t=i=0,l&&e&&(be(e),e=null)),_(),a||(h.length=0);var m={width:0,height:0};r&&(m=r.size(),r.destroy(),r=null),t==m.width&&i==m.height||(s&&s.size_change(t,i),n&&n.size_change(t,i)),e&&(++u,o=0,r=Te(e,t,i,!c,l,g))},get_image_size:function(){return r?r.size():{width:0,height:0}},get_inner_result:function(){return r?r.get_inner_result():null},get_result:function(){return r?r.get_result():null},create_view:function(e){var t=new Ce;return t.script=e,t.serial=++m,h[h.length]=t,t.serial},destroy_view:function(e){f(e,(function(e){var o=h[e];o.texture&&(r?r.put_tmp_image(o.texture):t.delete_texture(1,o.texture)),o.compressor&&o.compressor.decompress_image_then_release(0,0),h.splice(e,1)}))},get_view_by_number:function(e){var t=null;return f(e,(function(e){t=h[e]})),t},load_view:function(e,o){if(!e.processed)return"CRMInnerError";if(e.compressor){var i=d(e);if(!xe(i))return i}if(!e.texture)return"CRMInnerError";if(o){var a=r.size();return t.texture_to_texture(o,e.texture,g.get_frame_buffer(),a.width,a.height)?o:"CRMOpenGLError"}return e.texture},process_view:function(e){var t=g.get_view_by_number(e);if(!t)return"CRMViewInvalidSerial";if(t.processed)return"CRMProcessingSuccess";g.set_script(t.script);var o=g.process_image();return"CRMProcessingSuccess"!=o?o:(t.texture=r.get_result(),t.processed=!0,t.texture?"CRMProcessingSuccess":"CRMInnerError")},get_src_size:function(){return r?r.size():{width:0,height:0}},compress_view:function(e,t){var o=g.get_view_by_number(e);if(!o)return"CRMViewInvalidSerial";if(!o.processed)return"CRMOtherError";if(o.compressor){var i=d(o);if("CRMProcessingSuccess"!=i)return i}var a=r.size();return t.compress_image(texture,a.width,a.height)?(o.compressor=t,r.put_tmp_image(o.texture),o.texture=null,"CRMProcessingSuccess"):"CRMOtherError"},set_lock_unlock_function:function(e,r){t.lock_image=e,t.unlock_image=r},fetch_view_texture:function(e){var t=g.get_view_by_number(e);if(!t)return"CRMViewInvalidSerial";if(!t.processed){var r=g.process_view(e);return xe(r)?(r=t.texture,t.compressor&&t.compressor.destroy(),t.compressor=null,t.texture=0,t.processed=!1,r):"CRMViewInvalidSerial"}r=g.load_view(t);return t.compressor&&t.compressor.destroy(),t.compressor=null,t.texture=0,t.processed=!1,r},get_view_texture:function(e){var t=g.get_view_by_number(e);if(!t)return"CRMViewInvalidSerial";if(!t.processed){var r=g.process_view(e);if(!xe(r))return r}return g.load_view(t)},set_macro:function(e,t){},clear_macro:function(){},set_script:function(e){a=e},clean:function(){s&&s.destroy(),s=null,n&&n.destroy(),n=null},process_image_template:function(){var e,c=r.size();++o;var l=function(e,t){var r={};return(r={m_mode:"CPM_SRGB",m_parcer:e,m_serial_num:t,m_data:new me}).m_key=0,r.m_parcer.renew(),r.assume_semicolon=function(e){"BPSSemicolon"!=this.m_parcer.get_current_status()&&this.error("expect ';'"),e&&this.log(";"),this.log_return(),this.m_parcer.next()},r.pre_test_symbol=function(e){if("BPSSemicolon"!=this.m_parcer.get_current_status())return!1;var t=this.m_parcer.m_start,r=this.m_parcer.m_end,o=this.m_parcer.m_status;if(this.m_parcer.next(),"BPSSymbol"!=this.m_parcer.get_current_status())return this.m_parcer.m_start=t,this.m_parcer.m_end=r,this.m_parcer.m_status=o,!1;var i={};return i.dst=this.m_data.m_buf,this.m_parcer.get_symbol(i),this.m_data.m_buf=i.dst,e!=this.m_data.m_buf?(this.m_parcer.m_start=t,this.m_parcer.m_end=r,this.m_parcer.m_status=o,!1):(this.m_parcer.m_start=t,this.m_parcer.m_end=r,this.m_parcer.m_status=o,this.m_parcer.next(),this.m_parcer.next(),!0)},r.test_symbol=function(e,t){return t=null==t||t,!!this.m_parcer.cmp_symbol(e)&&(this.m_parcer.next(),t&&this.log(e),!0)},r.fetch_symbol=function(e){e=null==e||e,"BPSSymbol"!=this.m_parcer.get_current_status()&&this.error("expect symbol");var t={};return t.dst=this.m_data.m_buf,this.m_parcer.get_symbol(t),this.m_data.m_buf=t.dst,t=null,this.m_parcer.next(),e&&this.log(this.m_data.m_buf),this.m_data.m_buf},r.fetch_float=function(e,t,r){var o=null==r||r;"BPSNumber"!=this.m_parcer.get_current_status()&&this.error("expect number");var i=this.m_parcer.get_float();if(null!=e&&null!=t&&(i<e||i>t)){var a="number out of range,should between "+e+"and"+t;this.error(a)}return this.m_parcer.next(),o&&this.log(i.toString()),i},r.process_serial_insert=function(){},r.assume_symbol=function(e,t){this.m_parcer.cmp_symbol(e)||this.error("expect",e),this.m_parcer.next(),t&&this.log(e)},r.check_symbol=function(e,t){},r.lookup_symbol=function(e,t,r){if(r=null==r||r,t=null!=t&&t,"BPSSymbol"!=this.m_parcer.get_current_status()){if(t){for(var o=0;e[o];)++o;this.error("expect symbols",e,o)}return-1}var i={};i.dst=this.m_data.m_buf,this.m_parcer.get_symbol(i),this.m_data.m_buf=i.dst;for(o=0;e[o];++o)if(e[o]==this.m_data.m_buf)return r&&this.log(this.m_data.m_buf),this.m_parcer.next(),o;return t&&this.error("expect symbols",e,o),-1},r.fetch_string=function(e){if(e=null==e||e,"BPSString"!=this.m_parcer.get_current_status())throw new error("expect string");var t={};this.m_parcer.get_string(t),this.m_parcer.next();var r=t.start.substring(0,t.start.length-t.end.length);return e&&(this.m_data.m_process_log='"'+r+'"'),r},r.get_parcer_status=function(){return this.m_parcer.get_current_status()},r.ended=function(){return this.m_parcer.ended()},r.get_log=function(){return this.m_data.tmp=this.m_data.m_process_log.toString(),this.m_data.tmp},r.log=function(e){e=e.toString(),this.m_data.m_process_log+=e+" "},r.log_return=function(){this.log("\n")},r.error=function(e,t,r){if(t=null==t?0:t,(r=null==r?0:r)%1!=0){var o=e+r.toString();return this.error(o),0}var i={script:"",current:""};this.m_parcer.dump(i);for(var a=i.script,s=1,n=i.script;(c=n.indexOf("\n"))>=0;)++s,a=n.substring(c+1),n=n.substring(c+1);if(s.toString()," column "+(i.current.length-a.length).toString()+"!!\n","error description:"+e.toString(),t&&0!=r){";";for(var c=0;c<r;++c)'"'+t[c]+'"'}},r}(function(e){var t={m_status:"",m_script:"",m_start:"",m_end:""};return t.a_z=new RegExp("[a-z]","i"),t.A_Z=new RegExp("[A-Z]","i"),t.blank=new RegExp("\\s","i"),t.blank2=new RegExp("\\s\\s","i"),t._enter=new RegExp("\\n","i"),t._line=new RegExp("\\r","i"),t.num=new RegExp("\\d","i"),t.quote=new RegExp('"',"i"),t.quotes=new RegExp("'","i"),t.negative=new RegExp("-","i"),t.dot=new RegExp(".","i"),t.semicolon=new RegExp(";","i"),t.comment=new RegExp("%","i"),t.quote_comment="[",t.QC_end="]",t.get_lut=function(){},t.next=function(){for(this.m_start=this.m_end;this.blank.test(this.m_start.charAt(0))||this.blank2.test(this.m_start.charAt(0))||this._line.test(this.m_start.charAt(0))||this._enter.test(this.m_start.charAt(0))||this.comment.test(this.m_start.charAt(0))||this.quote_comment==this.m_start.charAt(0);)if(this.comment.test(this.m_start.charAt(0))||this.quote_comment==this.m_start.charAt(0))if(this.comment.test(this.m_start.charAt(0)))for(this.m_start=this.m_start.substring(1);!(this._line.test(this.m_start.charAt(0))&&this._enter.test(this.m_start.charAt(0))||""==this.m_start.charAt(0));)this.m_start=this.m_start.substring(1);else{for(this.m_start=this.m_start.substring(1);this.QC_end!=this.m_start.charAt(0)&&""!=this.m_start.charAt(0);)this.m_start=this.m_start.substring(1);this.QC_end==this.m_start.charAt(0)&&(this.m_start=this.m_start.substring(1))}else this.m_start=this.m_start.substring(1);var e=this.m_start.charAt(0);this.m_end=this.m_start.substring(1);var t=!0;if(this.a_z.test(this.m_start.charAt(0))||this.A_Z.test(this.m_start.charAt(0))){for(var r=0;this.a_z.test(this.m_end.charAt(r));)++r;this.m_end=this.m_end.substring(r),this.m_start.length-this.m_end.length>32?this.m_status="BPSUnknown":this.m_status="BPSSymbol"}else if(this.num.test(this.m_start.charAt(0))||this.negative.test(this.m_start.charAt(0))){r=0;"-"==e&&++r;for(var o=!1;;){if(o){if(!this.num.test(this.m_end.charAt(r)))break}else if("."==this.m_end.charAt(r))o=!0;else if(!this.num.test(this.m_end.charAt(r)))break;++r}this.m_end=this.m_end.substring(r),this.m_status="BPSNumber"}else if(this.quote.test(this.m_start.charAt(0))||this.quotes.test(this.m_start.charAt(0))){for(var i=!1;""!=this.m_end;){if(e==this.m_end.charAt(0)){i=!0,this.m_end=this.m_end.substring(1);break}this.m_end=this.m_end.substring(1)}this.m_status=i?"BPSString":"BPSUnknown"}else if(this.semicolon.test(this.m_start.charAt(0)))this.m_status="BPSSemicolon";else if(""==this.m_start.charAt(0))this.m_end=this.m_start,this.m_status="BPSEOF",t=!1;else{for(;!(this.a_z.test(this.m_start.charAt(0))||this.A_Z.test(this.m_start.charAt(0))||this.num.test(this.m_start.charAt(0))||this.quote.test(this.m_start.charAt(0))||this.quotes.test(this.m_start.charAt(0))||this.semicolon.test(this.m_start.charAt(0)));)this.m_end=this.m_end.substring(1);this.m_status="BPSUnknown"}return t},t.set_script=function(e){this.m_script=this.m_start=this.m_end=e,this.next()},t.dump=function(e){e.script=this.m_script,e.current=this.m_start},t.renew=function(){this.m_end=this.m_start=this.m_script,this.next()},t.get_symbol=function(e){return"BPSSymbol"==this.get_current_status()&&(e.dst=this.m_start.substring(0,this.m_start.length-this.m_end.length),!0)},t.cmp_symbol=function(e){if("BPSSymbol"!=this.get_current_status())return!1;for(var t=this.m_start;;){if(!e.charAt(0))return t==this.m_end;if(t==this.m_end)return!1;if(e.charAt(0)!=t.charAt(0))return!1;e=e.substring(1),t=t.substring(1)}},t.get_float=function(){if("BPSNumber"!=this.m_status)return 0;var e=this.m_start,t=1;"-"==e.charAt(0)&&(t=-1,e=e.substring(1));for(var r=0,o=!1,i=1;e!=this.m_end;)"."==e.charAt(0)?o=!0:o?r+=(i*=.1)*(e.charCodeAt(0)-48):r=10*r+(e.charCodeAt(0)-48),e=e.substring(1);return r*t},t.get_string=function(e){if("BPSString"==this.m_status)return e.start=this.m_start.substring(1),e.end=this.m_start.substring(this.m_start.length-this.m_end.length-1),0;e.start=this.m_start,e.end=this.m_end},t.ended=function(){return"BPSEOF"==this.get_current_status()},t.get_current_status=function(){return this.m_status},t.set_script(e),t}(i._parce({script:a})),o);l.log_return(),l.log("Image serial number:"),l.log(u),l.log_return(),l.log("Image size:"),l.log(c.width.toString()),l.log(c.height.toString()),l.log_return();var m=["layer",0],h=["start","swap","end",0];if(l.test_symbol("view")){var _=Math.floor(l.fetch_float()+.5),f=g.get_view_by_number(_);if(f||l.error("Invalid view number",_),f.processed||l.error("View has not been processed",_),f.compressor&&(e=d(f),!xe(e)))throw Error(e);if(e=g.load_view(f,r.prepare_empty()),!xe(e))throw Error(e);l.assume_semicolon()}else r.prepare();for(;!l.ended();){switch(l.lookup_symbol(m)){case 0:"CPM_LUV_MIX_LOG"==l.m_mode&&l.error("can't use layer in mix log mode");var v=l.fetch_symbol();switch(l.lookup_symbol(h,!0)){case 0:r.new_channel(v);break;case 1:r.swap_channel(v);break;case 2:r.end_channel(v);break;default:throw Error("CGEScriptEngine::process_image_template")}break;default:var x="CPM_SRGB"==l.m_mode?(s||(s=le(t)),s):"CPM_LUV_MIX_LOG"==l.m_mode?(n||(n=ie(t)),n):void 0,p={};p.m_frame_buffer=g.get_frame_buffer(),p.m_width=c.width,p.m_height=c.height,x.gpu_process(l,r,p)}l.assume_semicolon()}"CPM_LUV_MIX_LOG"==l.m_mode&&l.error('use "toneMapEnd;" command before script end'),l.log("process success ! \n");var b=l.get_log();t.on_log(b)},get_frame_buffer:function(){return l||(l=t.context().createFramebuffer()),l},get_max_pool_size:function(){return 3},process_image:function(){if(!r)return"CRMLoadSourceImageFailed";t.context().getError();t.context().disable(t.context().BLEND),t.context().bindBuffer(t.context().ARRAY_BUFFER,null);try{this.process_image_template()}catch(e){return e}return t.context().finish(),t.context().getError(),"CRMProcessingSuccess"}};return g}(function(e){Math.pow(2,26),Math.pow(2.26),new Array;var t={destroy:function(){},context:function(){return e},on_log:function(e){},lock_image:function(){},unlock_image:function(){},resource_pool_enable:function(){},resource_pool_texture_limite:function(){},resource_pool_texture_flush:function(){},texture_to_texture:function(t,r,o,i,a){if(e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,t),e.copyTexSubImage2D(e.TEXTURE_2D,0,0,0,0,0,i,a),e.getError())throw new Error("texture_to_texture");return!0},get_resource_texture:function(t){var r={},o=this.lock_image(t);return o?"[object WebGLTexture]"==o.toString()?(r.texture=o,r):(r.width=o.width,r.height=o.height,r.texture=e.createTexture(),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,r.texture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,o),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.finish(),this.unlock_image(t,o),r):null},release_resource_texture:function(t){e.deleteTexture(t.texture)},delete_textures:function(t,r){if(1==t)this.m_context.deleteTexture(r);else for(var o=0;o<r.length&&o<t;++o)e.deleteTexture(r[o])}};return t.m_context=e,t}(e))}};window.EW={check_CRM:function(e){return i.check_CRM(e)},create:function(e,t){var a;function s(){return T}var n={painter:function(){return T},blurPainter:function(){return T},effectRule:function(){return T},rule:function(){return T},blemish:function(){return T},reshape:function(){var e;return e=0==T.maskView?{model:T.model,stress:T.stress,maskView:N.create_view("basicAdjust dark;")}:{model:T.model,stress:T.stress,maskView:N.create_view("view "+T.maskView.toString()+";")},N.process_view(e.maskView),e},redEyeRemove:function(){return T},rotation:function(){return T},polaroid:function(){return T},crop:s,magic:function(){return T.maskView=q.create_view("view "+z.toString()+";"),q.process_view(T.maskView),T},matting:s};function c(){return{script:"",view:0,destroy:function(){this.script="",this.view&&(G.destroy_view(this.view),this.view=0)}}}function u(){var e={model:0,index:0};return e.queue=new Array,e.destroy=function(){if("reshape"==this.model)for(var e=0;e<this.queue.length;++e)N.destroy_view(this.queue[e].maskView);"blemish"!=this.model&&"redEyeRemove"!=this.model||this.firstStep&&q.destroy_view(this.firstStep),this.model=0,this.index=0,this.queue=new Array},e}function l(e,t,r,o){var i=u();i.model=o.model,i.index=o.index;for(var a=0;a<o.queue.length;++a)i.queue[a]=o.queue[a];return{texture:e,name:"engineTexture",width:t,height:r,handlerQueue:i}}var m=null==t?100:t,h=4,_=1,f=0,d=0,g=0,v=0,x=0,p=0,b=0,y=0,w=!1,T=0,C=c(),S=c(),E={view:0,lock:!1},z=0,R=0,M=0,A=0,D=0,k=0,F=0,I=[],P=[],B=0,U=[],L={},G={},N={},O={},q={};G=i.create(e._.gl),O=i.create(e._.gl),N=i.create(e._.gl),q=i.create(e._.gl);var X,j,Y,V,H,W,Z,J,K,Q,$,ee,te,re,oe,ie,ae,se,ne,ce,ue,le=u(),me=e,he=!1,_e=(function(){me.width=50,me.height=50;var e=me._.gl;e.bindFramebuffer(e.FRAMEBUFFER,null),e.clearColor(1,1,0,1),e.clear(e.COLOR_BUFFER_BIT);var t=document.createElement("canvas");t.width=me.width,t.height=me.height;var r=t.getContext("2d");r.width=t.width,r.height=t.height,r.drawImage(me,0,0,t.width,t.height);var o=r.getImageData(0,0,50,50);o.data[0]>0&&o.data[2]<255?he=!0:console.log("Webgl drawimage to 2dcanvas fails!"),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT)}(),401),fe=function(e,t,r,o){var i=G.get_gl(),a=G.get_frame_buffer();return i.bindFramebuffer(i.FRAMEBUFFER,a),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,t,0),i.activeTexture(i.TEXTURE0),i.bindTexture(i.TEXTURE_2D,e),i.copyTexSubImage2D(i.TEXTURE_2D,0,0,0,0,0,r,o),!i.getError()},de=function(e){O.get_gl().deleteTexture(e)},ge=function(){C.destroy(),S.destroy(),d&&(de(d),d=0),G.clean(),O.clean(),q.clean(),z&&(q.destroy_view(z),z=0),f&&(G.destroy_view(f),f=0),g&&(q.destroy_view(g),g=0),B&&(q.destroy_view(B),B=0),v&&(q.destroy_view(v),v=0),x=0,M&&(q.destroy_view(M),M=0),A&&(q.destroy_view(A),A=0),k=0,R&&(q.destroy_view(R),G.destroy_view(R),R=0),F&&(q.destroy_view(F),G.destroy_view(F),F=0)},ve=function(){if(le.index!=le.queue.length){if(le.queue.length&&"reshape"==le.model)for(var e=le.index;e<le.queue.length;++e)N.destroy_view(le.queue[e].maskView);le.index||"redEyeRemove"!=le.model&&"blemish"!=le.model||le.firstStep&&(q.destroy_view(le.firstStep),le.firstStep=0,le.firstStepScript=[]),le.queue.splice(le.index)}le.queue.length||(le.model=T.model,"redEyeRemove"!=le.model&&"blemish"!=le.model||(le.firstStep=0,le.firstStepScript=[])),le.model!=T.model&&console.log("handler queue hasn't been clear!"),le.queue.push(n[le.model]()),le.queue.length>m&&("reshape"==le.model&&N.destroy_view(le.queue[0].maskView),"redEyeRemove"!=le.model&&"blemish"!=le.model||("blemish"==le.model?function(){var e=le.firstStep?"view "+le.firstStep.toString()+";":"";e+="basicAdjust blemishFix point "+le.queue[0].points.x.toString()+" "+le.queue[0].points.y.toString()+" radius "+le.queue[0].radius.toString()+";";var t=q.create_view(e);q.process_view(t),le.firstStep&&q.destroy_view(le.firstStep),le.firstStep=t}():function(){var e=le.firstStep?"view "+le.firstStep.toString()+";":"";e+="basicAdjust redeyeRemove realPosition "+le.queue[0].point_obj.x.toString()+" "+le.queue[0].point_obj.y.toString()+" "+le.queue[0].point_obj.radius.toString()+" 3;";var t=q.create_view(e);q.process_view(t),le.firstStep&&q.destroy_view(le.firstStep),le.firstStep=t}(),le.firstStepScript.push(le.queue[0])),le.queue.splice(0,1),--le.index),le.index++,T=null},xe=function(){T=0},pe=function(e,t,r){r=r||null;var o="basicAdjust reshapeMap realPixel",i=q.get_src_size(),a=N.get_src_size(),s=0,n=0,c=[],u=r?a.width*e.radius*1.6:1.6*e.radius/(_*h);"real"==r&&(u=1.6*e.radius);for(var l=u*(_*h),m=0;m<e.points.length;++m){var f,d,g,v;r&&"real"!=r?(f=e.points[m].x*a.width,d=e.points[m].y*a.height,g=e.points[m].x*i.width,v=e.points[m].y*i.height):"real"==r?(f=e.points[m].x,d=e.points[m].y):(f=e.points[m].x/(_*h),d=e.points[m].y/(_*h),g=e.points[m].x,v=e.points[m].y),c.push({x:f,y:d}),o+=" point stress 0.2 radius "+u.toString()+" "+f.toString()+" "+d.toString(),s&&n?(s[0]=s[0]>g?g:s[0],s[1]=s[1]>v?v:s[1],n[0]=n[0]<g?g:n[0],n[1]=n[1]<v?v:n[1]):(s=[g,v],n=[g,v])}return o+=";",s=[s[0]-l-h,s[1]-l-h],n=[n[0]+l+h,n[1]+l+h],s[0]=Math.min(Math.max(0,s[0]),i.width),s[1]=Math.min(Math.max(0,s[1]),i.height),n[0]=Math.min(Math.max(0,n[0]),i.width),n[1]=Math.min(Math.max(0,n[1]),i.height),t&&(t.min=s,t.max=n,t.points=c),o},be=function(){var e=N.get_src_size(),t=G.get_src_size(),r=t.width/h,o=t.height/h;e.width==r&&e.height==o||(N.set_image(N.create_new_texture(r,o,!0),r,o),E={view:0,lock:!1})},ye=function(e,t,r,o){q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),T&&"magic"==T.model||(T={model:"magic",pModel:"",opacity:0,pointSize:0,pointStride:0,texSize:0,outsideRadius:0,innerRadius:0,numRatio:0,fileName:"",blendModel:0,blendOpacity:0,points:new Array},e&&(T.pModel=e.pModel,T.opacity=e.opacity,T.pointSize=e.pointSize,T.pointStride=e.pointStride,T.texSize=e.texSize,T.outsideRadius=e.outsideRadius,T.innerRadius=e.innerRadius,T.numRatio=e.numRatio,T.fileName=e.fileName,T.blendModel=e.blendModel,T.blendOpacity=e.blendOpacity,null!=e.angle&&(T.angle=e.angle)));var a,s={points:[],max:[],min:[]};if(e&&e.points&&e.points.length){T.opacity==e.opacity&&T.radius==e.size||console.log("the interval record hasn't been cleared!");var n=z,c=(n?"view %1;".replace(/%1/,n.toString()):"basicAdjust darkClear ;")+function(e,t,r){var o="magicPainter %1 opacity %2 pointStride %4 texSize %6 outsideRadius %7 innerRadius %8 numRatio %9 file '%10' ";o=(o=(o=(o=(o=(o=(o=(o=o.replace(/%1/,e.pModel)).replace(/%2/,e.opacity)).replace(/%4/,e.pointStride)).replace(/%6/,e.texSize)).replace(/%7/,e.outsideRadius)).replace(/%8/,e.innerRadius)).replace(/%9/,e.numRatio)).replace(/%10/,e.fileName),null!=e.angle&&(o=o+"angle "+e.angle);var i=o,a=q.get_src_size(),s=N.get_src_size(),n=r?s.width*e.size:e.size/(_*h),c=Math.max(.2*n,1);i=(i=i.replace(/%2/,n.toString())).replace(/%s/,c.toString());for(var u=[],l=0;l<e.points.length;++l){var m,f;r?(m=e.points[l].x*a.width,f=e.points[l].y*a.height):(m=e.points[l].x,f=e.points[l].y),u.push({x:m,y:f}),i+=" point "+m.toString()+" "+f.toString()}return t&&(t.points=u),i+";"}(e,s,t);z=q.create_view(c),q.process_view(z),q.destroy_view(n)}if(T.points=T.points.concat(s.points),g&&q.destroy_view(g),z){a="blend view "+z.toString()+" "+e.blendModel+" alpha ",a="opacity"==e.pModel?a+" reOpacity "+e.blendOpacity+";":a+e.blendOpacity+";",g=q.create_view(a);var u=q.get_view_texture(g),l=q.get_src_size();Te(u,l.width,l.height),r&&r()}},we=function(e,t,r,o){o=null!=o&&o;var i,a="painter %3 opacity %1 pointSize %2 pointStride %s realPixel ",s=(a=a.replace(/%3/,e.model)).replace(/%1/,e.opacity.toString()),n=q.get_src_size(),c=N.get_src_size(),u=r?c.width*e.size:e.size/(_*h),l=u*(_*h);i="lucency"==e.model?Math.max(.13*u,1):Math.max(.25*u,1),s=(s=s.replace(/%2/,u.toString())).replace(/%s/,i.toString());for(var m=0,f=0,d=[],g=0;g<e.points.length;++g){var v,x,p,b;r?(v=e.points[g].x*c.width,x=e.points[g].y*c.height,p=e.points[g].x*n.width,b=e.points[g].y*n.height):(v=e.points[g].x/(_*h),x=e.points[g].y/(_*h),p=e.points[g].x,b=e.points[g].y),o?d.push(e.points[g]):d.push({x:v,y:x}),s+=" point "+v.toString()+" "+x.toString(),m&&f?(m[0]=m[0]>p?p:m[0],m[1]=m[1]>b?b:m[1],f[0]=f[0]<p?p:f[0],f[1]=f[1]<b?b:f[1]):(m=[p,b],f=[p,b])}var y=l/2;return m[0]=Math.min(Math.max(m[0]-y,0),n.width),m[1]=Math.min(Math.max(m[1]-y,0),n.height),f[0]=Math.min(Math.max(f[0]+y,0),n.width),f[1]=Math.min(Math.max(f[1]+y,0),n.height),t&&(t.points=d,t.min=m,t.max=f),s+";"};function Te(e,t,r){p&&cancelAnimationFrame(p),me.update(e,t,r)}function Ce(){me.paintClone(X,j,Y,V,H)}function Se(e,t,r,o,i,a){X=e,j=t,Y=r,V=o,H=i,p&&cancelAnimationFrame(p),a?Ce():p=requestAnimationFrame(Ce)}function Ee(){me.reshape(W,Z,J,K,Q,$),$=null}function ze(e,t,r,o,i,a,s){s&&(p&&cancelAnimationFrame(p),W=e,Z=t,Z=t,J=r,K=o,Q=i,$=a,Ee()),W=e,Z=t,J=r,K=o,Q=i,a&&$?($.max[0]<a.max[0]&&($.max[0]=a.max[0]),$.max[1]<a.max[1]&&($.max[1]=a.max[1]),$.min[0]>a.min[0]&&($.min[0]=a.min[0]),$.min[1]>a.max[1]&&($.min[1]=a.max[1])):$=a,p&&cancelAnimationFrame(p),p=requestAnimationFrame(Ee)}function Re(){me.paint(ee,te,re,oe,ie,ae,se),ae=0}function Me(e,t,r,o,i,a,s){ee=e,te=t,re=r,oe=o,ie=i,se=s,a&&(ae?(ae.max[0]<a.max[0]&&(ae.max[0]=a.max[0]),ae.max[1]<a.max[1]&&(ae.max[1]=a.max[1]),ae.min[0]>a.min[0]&&(ae.min[0]=a.min[0]),ae.min[1]>a.max[1]&&(ae.min[1]=a.max[1])):ae=a),p&&cancelAnimationFrame(p),p=requestAnimationFrame(Re)}var Ae,De,ke,Fe,Ie=function(){};function Pe(){me.update(ne,ce,ue),Ie()}function Be(e,t,r,o){ne=e,ce=t,ue=r,Ie=o,p&&cancelAnimationFrame(p),p=requestAnimationFrame(Pe)}function Ue(e,t,r){Ae=e,De=t,ke=r,Fe=le.queue.slice(0,le.index),x&&Fe.push({script:x}),me.drawRotation(Ae,De,ke,Fe)}var Le,Ge,Ne,Oe,qe=0;function Xe(e,t,r,o,i){Le=e,Ge=t,Ne=r,Oe=o,null!=i&&(qe=i),me.drawPolariod(Le,Ge,Ne,qe,Oe)}function je(e,t){return{name:e,image:t,lock:!1}}function Ye(e,t,r){return e.substring(0,t)+r+e.substr(t)}function Ve(e,t,r,o,a){if(o){var s=null!=r?"layer op start;"+e+"layer op swap;blend layer op opacity "+r.toString()+";":e;t(G.create_view(s))}else{S.script!=e&&(S.destroy(),S.script=e,S.view=q.create_view(e),q.process_view(S.view)),T||(T={model:"effectRule",eModel:"",script:""});var n,c=q.get_src_size();if("effect"==a){g&&q.destroy_view(g);var u=null!=r?"blend view "+S.view.toString()+" opacity "+r.toString()+";":"view "+S.view.toString()+";";T.script=null!=r?"layer op start;"+S.script+"layer op swap;blend layer op opacity "+r.toString()+";":S.script,T.eModel="normal",g=q.create_view(u),n=q.get_view_texture(g),i.check_CRM(n)||console.log("engine error:"+n.toString())}else T.script=S.script,T.eModel="normal",n=q.get_view_texture(S.view),i.check_CRM(n)||console.log("engine error:"+n.toString()),t=t||function(){};Be(n,c.width,c.height,t)}}function He(e,t,r,o,a,s){a?G.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})):q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),Ve(t,r,o,a,s)}function We(e,t,r,o){var i=document.createElement("canvas");i.width=t,i.height=r,(n=i.getContext("2d")).clearRect(0,0,i.width,i.height);var a=G.get_gl(),s=G.get_frame_buffer();a.bindFramebuffer(a.FRAMEBUFFER,s),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,o,0);var n,c=(n=i.getContext("2d")).createImageData(i.width,i.height),u=i.width*i.height*4,l=new Uint8Array(u);if(a.readPixels(e[0],e[1],i.width,i.height,a.RGBA,a.UNSIGNED_BYTE,l),a.getError())return!1;for(var m=0;m<u;m++)c.data[m]=l[m];return n.putImageData(c,0,0),a=null,i.toDataURL()}function Ze(e,t,o,i){var a,s=null;a=e.substring(0,e.length-4),-1!=e.indexOf(".png")?"effect"==t?r.e(14).then(function(){try{s=r(1636)("./"+a+".png"),o(s,e,i)}catch(t){o(null,e,i)}}.bind(null,r)).catch(r.oe):"border"==t&&r.e(5).then(function(){try{s=r(847)("./"+a+".png"),o(s,e,i)}catch(t){o(null,e,i)}}.bind(null,r)).catch(r.oe):-1!=e.indexOf(".jpg")&&("effect"==t?r.e(13).then(function(){try{s=r(1817)("./"+a+".jpg"),o(s,e,i)}catch(t){o(null,e,i)}}.bind(null,r)).catch(r.oe):"border"==t&&r.e(6).then(function(){try{s=r(848)("./"+a+".jpg"),o(s,e,i)}catch(t){o(null,e,i)}}.bind(null,r)).catch(r.oe))}function Je(e,t){var r="s"==t?q:G;if(!e)return null;E.view&&(N.destroy_view(E.view),E.view=0),"s"==t?(F&&g&&(r.destroy_view(F),F=0),g&&(F=g,g=0)):(F&&f&&(r.destroy_view(F),F=0),f&&(F=f,f=0)),R&&r.destroy_view(R);var o=(F?"view %1;".replace(/%1/,F.toString()):"")+"basicAdjust clone %x %y %dx %dy;".replace(/%x/,e.x.toString()).replace(/%y/,e.y.toString()).replace(/%dx/,e.dx.toString()).replace(/%dy/,e.dy.toString());R=r.create_view(o),r.process_view(R)}function Ke(e,t,r,o,a){be();N.get_src_size(),G.get_src_size();var s="s"==o?q:G,n="painter";if(e&&e.points.length){if(E.lock)return void console.log("painter_view hasn't been unlock");"eraser"==e.model&&(n="eraser",e.model="lucency");var c=E.view;E.view=N.create_view((c?"view %1;".replace(/%1/,c.toString()):"basicAdjust alphaInit ;")+we(e,null,r)),N.process_view(E.view),N.destroy_view(c)}if(E.view||(E.view=N.create_view("basicAdjust alphaInit ;"),N.process_view(E.view)),s.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"==r&&(E.lock=!1)})),"s"==o){g&&(s.destroy_view(g),g=0),g=s.create_view((F?"view %1;".replace(/%1/,F.toString()):"")+("basicAdjust cloneBlend view %2 cache '"+n+"' opacity 100 ;").replace(/%2/,R.toString()));var u=s.get_view_texture(g)}else f&&(s.destroy_view(f),f=0),f=s.create_view((F?"view %1;".replace(/%1/,F.toString()):"")+("basicAdjust cloneBlend view %2 cache '"+n+"' opacity 100 ;").replace(/%2/,R.toString())),u=s.get_view_texture(f);i.check_CRM(u)||console.log("engine error:"+u.toString());var l=s.get_src_size();if(a)return u;Se(s.get_src(),u,l.width,l.height,t)}function Qe(e){return e?(L[e].lock=!0,L[e].image):G.get_src()}return o(a={destroy:function(){for(var e=0;e<P.length;++e){if(P[e].texture)G.get_gl().deleteTexture(texture.texture)}this.clean(),G.destroy(),O.destroy(),N.destroy()},get_configure:function(){return G.get_configure()},set_configure:function(e){G.set_configure(e)},set_image:function(t,r,o,i,a,s,n){i=i||5e3,h=a||h;var c,m=r||t.width,f=o||t.height,d=0,g=0,v=Math.max(m,f);Math.min(m,f);v>i?v==m?g=(d=i)*(f/m):d=(g=i)*(m/f):(g=f,d=m),g=Math.floor(g+.5),d=Math.floor(d+.5),_=d/m,t.name&&"engineTexture"==t.name?(c=G.create_new_texture(m,f,!0),fe(c,t.texture,m,f)):c=e.texture(t)._.id,G.set_image(c,m,f),q.set_image(q.create_new_texture(d,g,!0),d,g),q.set_lock_unlock_function(Qe);var x=q.fetch_view_texture(q.create_view("basicAdjust justDraw;"));if(q.set_image(x,d,g),x=null,ge(),s||Te(c,m,f),n){var p=G.create_new_texture(m,f,!0);fe(p,c,m,f);var b=l(p,m,f,u());return P.push(b),b}},draw_small_image_to_canvas:function(){g&&q.destroy_view(g),g=q.create_view("");var e=q.get_view_texture(g),t=q.get_src_size();Be(e,t.width,t.height)},get_small_canvas:function(e,t){return b||((b=document.createElement("canvas")).width=e,b.height=t),me.get_small_canvas_different()&&(b.getContext("2d").clearRect(0,0,b.width,b.height),b.getContext("2d").drawImage(me,0,0,b.width,b.height),me.set_small_canvas_noDiferent()),b},preserve_small_canvas:function(e,t){b||((b=document.createElement("canvas")).width=e,b.height=t),me.get_small_canvas_different()&&(b.getContext("2d").clearRect(0,0,b.width,b.height),b.getContext("2d").drawImage(me,0,0,b.width,b.height),me.set_small_canvas_noDiferent())},get_canvas_image:function(){var e=new Image;return e.width=me.width,e.height=me.height,e.src=me.toDataURL(),e},get_canvas:function(){if(he)return me;var e=me,t=G.get_gl();t.bindFramebuffer(t.FRAMEBUFFER,null);var r=document.createElement("canvas");r.width=e.width,r.height=e.height;var o=r.getContext("2d"),i=o.createImageData(r.width,r.height),a=r.width*r.height*4,s=new Uint8Array(a);if(t.readPixels(0,0,r.width,r.height,t.RGBA,t.UNSIGNED_BYTE,s),t.getError())return!1;for(var n=0,c=r.height;c>0;--c)for(var u=0;u<4*r.width;++u)i.data[n]=s[c*r.width*4+u],++n;return o.putImageData(i,0,0),r},get_image_size:function(){return G.get_image_size()},get_inner_result:function(){return G.get_inner_result()},get_result:function(){return G.get_result()},process_rule:function(e,t){var r=null==e?"":e;g&&q.destroy_view(g),g=q.create_view(r);var o=q.get_view_texture(g);i.check_CRM(o)||console.log("error rule:"+o.toString());var a=q.get_src_size();t?Te(o,a.width,a.height):Be(o,a.width,a.height,(function(){})),T&&"rule"!=T.model&&console.log("record hasn't been clear"),null!=e&&(T={model:"rule",script:e})},create_view:function(e){return G.create_view(e)},destroy_view:function(e){return G.destroy_view(e)},get_view_by_number:function(e){return G.get_view_by_number(e)},load_view:function(e,t){return G.load_view(e,t)},process_view:function(e){G.process_view(e)},compress_view:function(e,t){return G.compress_view(e,t)},set_lock_unlock_function:function(e,t){return G.set_lock_unlock_function(e,t)},get_view_texture:function(e){return G.get_view_texture(e)},set_macro:function(e,t){G.set_macro(e,t)},clear_macro:function(){G.clear_macro()},set_script:function(e){G.set_script(e)},clean:function(){ge(),le.destroy(),le=u(),I=[],N.clean(),E={view:0,lock:!1},D=0,T=null,y=0,w=!1;var e=G.get_src_size();Te(G.get_src(),e.width,e.height)},process_image_template:function(){G.process_image_template()},get_frame_buffer:function(){return G.get_frame_buffer()},get_max_pool_size:function(){return G.get_max_pool_size()},process_image:function(){return G.process_image()},fetch_view_texture:function(e){return G.fetch_view_texture(e)},process_blemish:function(e,t){if(e){var r,o,a,s,n=q.get_src_size();t?(o=e.x*n.width,a=e.y*n.height,s=e.radius*n.width):(o=Math.floor(e.x)*_,a=Math.floor(e.y)*_,s=Math.floor(e.radius)*_);var c=M;M=q.create_view((c?"view %1;".replace(/%1/,c.toString()):"")+"basicAdjust blemishFix point %x %y radius %r;".replace(/%x/,o.toString()).replace(/%y/,a.toString()).replace(/%r/,s.toString())),r=q.get_view_texture(M),q.destroy_view(c),i.check_CRM(r)||console.log("rule error:"+r.toString()),Be(r,n.width,n.height,(function(){})),T||(T={model:"blemish",points:{x:o,y:a},radius:s})}else console.log("need a point object.")},get_blemishFix_rectangle_img:function(e){if(e){var t,r=Math.floor(e.x),o=Math.floor(e.y),a=Math.floor(e.radius),s=M;if(M=G.create_view((s?"view %1;".replace(/%1/,s.toString()):"")+"basicAdjust blemishFix point %x %y radius %r;".replace(/%x/,r.toString()).replace(/%y/,o.toString()).replace(/%r/,a.toString())),t=G.get_view_texture(M),G.destroy_view(s),!i.check_CRM(t))return null;var n=new Image,c=[r-a,o-a];return n.width=2*a,n.height=2*a,n.src=We(c,n.width,n.height,t),{img:n,pos:c,width:n.width,height:n.height}}return null},process_redEyeRemove:function(e,t){if(!e)return null;var r,o=q.get_src_size(),a=t?Math.floor(e.x*o.width):Math.floor(e.x),s=t?Math.floor(e.y*o.height):Math.floor(e.y),n=t?Math.floor(e.radius*o.width):Math.floor(e.radius),c=A;A=q.create_view((c?"view %1;".replace(/%1/,c.toString()):"")+"basicAdjust redeyeRemove realPosition %x %y %r 3;".replace(/%x/,a.toString()).replace(/%y/,s.toString()).replace(/%r/,n.toString())),r=q.get_view_texture(A),q.destroy_view(c),i.check_CRM(r)||console.log("engine error:"+r.toString()),Be(r,o.width,o.height,(function(){})),T={model:"redEyeRemove",point_obj:{x:a,y:s,radius:n}}},get_redEyeRemove_rectangle_img:function(e){if(e){var t,r=Math.floor(e.x),o=Math.floor(e.y),a=Math.floor(e.radius),s=A;if(A=G.create_view((s?"view %1;".replace(/%1/,s.toString()):"")+"basicAdjust redeyeRemove realPosition %x %y %r 3;".replace(/%x/,r.toString()).replace(/%y/,o.toString()).replace(/%r/,a.toString())),t=G.get_view_texture(A),G.destroy_view(s),!i.check_CRM(t))return null;var n=new Image,c=[r-a,o-a];return n.width=2*a,n.height=2*a,n.src=We(c,n.width,n.height,t),{img:n,pos:c,width:n.width,height:n.height}}return null},get_rectangle_img_with_view:function(e,t,r,o){var a={x:0,y:0};a.x=Math.min(Math.max(e,0),G.get_image_size.width),a.y=Math.min(Math.max(e,0),G.get_image_size.height);var s=Math.max(Math.min(t,G.get_image_size.width-t),0),n=Math.max(Math.min(r,G.get_image_size.height-r),0),c=G.get_view_texture(o);if(!i.check_CRM(c))return null;var u=new Image;return u.width=s,u.height=n,u.src=We(a,s,n,c),{img:u,pos:pos,width:s,height:n}},process_reshape:function(e,t,r){be(),T||(T={model:"reshape",maskView:0,stress:0});var o,a=null,s=q.get_src_size(),n={points:[],max:[],min:[]};if(e&&e.points.length>=2){var c=D,u=pe(e,n,r);a={max:n.max,min:n.min},D=N.create_view((c?"view %1;".replace(/%1/,D.toString()):"basicAdjust dark;")+u),N.process_view(D),N.destroy_view(c)}return o=N.get_view_texture(D),T.stress=t,T.maskView=D,null!=t&&D?i.check_CRM(o)?void ze(q.get_src(),o,t,s.width,s.height,a):(console.log("engine error:"+tex.toString()),null):(console.log("no reshape view or need stress"),null)},draw_to_canvas:function(){Be()},get_painter_rectangle_img:function(e,t,r){var o={min:[],max:[]};if(!e||!e.points.length)return null;var a,s=E;E=G.create_view((s?"view %1;".replace(/%1/,s.toString()):"")+we(e,o)),G.process_view(E),G.destroy_view(s),a="[object String]"==Object.prototype.toString.call(t)?G.create_view("%2 blend view %1 opacity alpha 100;".replace(/%1/,E.toString()).replace(/%2/,t)):G.create_view("view %1;blend view %2 opacity alpha 100;".replace(/%1/,t.toString()).replace(/%2/,E.toString()));var n=G.get_view_texture(a);if(!i.check_CRM(n))return null;var c=e.size;o.min[0]=Math.min(Math.max(o.min[0]-c,0),G.get_image_size().width),o.min[1]=Math.min(Math.max(o.min[1]-c,0),G.get_image_size().height),o.max[0]=Math.min(Math.max(o.max[0]+c,0),G.get_image_size().width),o.max[1]=Math.min(Math.max(o.max[1]+c,0),G.get_image_size().height);var u=o.max[0]-o.min[0],l=o.max[1]-o.min[1],m=[o.min[0],o.min[1]],h=new Image;return h.width=u,h.height=l,h.src=We(m,u,l,n),r?(k&&G.destroy_view(k),k=a):G.destroy_view(a),{img:h,pos:m,width:u,height:l}},texture_to_image:function(e,t){var r=G.get_gl(),o=G.get_frame_buffer();r.bindFramebuffer(r.FRAMEBUFFER,o),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0);var i=e.getContext("2d"),a=i.createImageData(e.width,e.height),s=e.width*e.height*4,n=new Uint8Array(s);if(r.readPixels(0,0,e.width,e.height,r.RGBA,r.UNSIGNED_BYTE,n),r.getError())return!1;for(var c=0;c<s;c++)a.data[c]=n[c];i.putImageData(a,0,0),r=null;var u=(new Date).getTime();e.toDataURL();(new Date).getTime();return e.toDataURL()},set_small_image_size:function(e){_e=e},clean_textures_cache:function(){for(var e in L)L[e].lock||delete L[e]},clean_painter_cache:function(){E.view&&(N.destroy_view(E.view),E.view=0)},clean_blemishFix_cache:function(){M&&(q.destroy_view(M),M=0)},clean_redEyeRemove_cache:function(){A&&(G.destroy_view(A),A=0)},clean_reshape_cache:function(){D&&(G.destroy_view(D),D=0)},clean_clone_cache:function(){k&&(G.destroy_view(k),k=0)},clean_basic_layer_cache:function(){G.destroy_view(C.view),C=c()},set_resource_address:function(e){m_resource_address=e},clean_record:function(){xe()},process_commond:function(e,t,r,o,i){var a=[],s=[],n=e.substr(0),c=n.match(/\S+/g),u=0;if(c&&c.length)for(var l=0;l<c.length;l++)if(c[l].indexOf(".jpg")>=0||c[l].indexOf(".jpeg")>=0||c[l].indexOf(".png")>=0){if(G.get_src_size().width<_e){u=n.indexOf(c[l],u+1),a.push({index:u,small:!0}),s.push(c[l].substring(1,c[l].length-1));continue}a.push({index:u,small:!1}),s.push(c[l].substring(1,c[l].length-1))}(s=function(e){for(var t,r=[],o={},i=0;null!=(t=e[i]);i++)o[t]||(r.push(t),o[t]=!0);return r}(s)).length||Ve(n,t,r,i,o),function(e,t,r,o,i,a,s){var n=0;if(null!=e&&0!=e.length)for(var c=function(c,l,m){if(!m.small||c){c||r(!1);var h=new Image;if(h.crossOrigin=isSafari?null:"anonymous",h.src=c,h.complete){if(n++,L[l]=je(l,h),n==e.length){for(f=0;f<s.length;f++)if(s[f].small){t=Ye(t,s[f].index+1,"s_");for(d=f+1;d<s.length;d++)s[d].index=s[d].index+2}He(0,t,r,o,a,i)}}else h.onload=function(){if(n++,L[l]=je(l,h),n==e.length){for(var c=0;c<s.length;c++)if(s[c].small){t=Ye(t,s[c].index+1,"s_");for(var u=c+1;u<s.length;u++)s[u].index=s[u].index+2}He(0,t,r,o,a,i)}},h.onerror=function(){}}else{var _;if(m.small=!1,_=l.substring(2),L[_]&&!L[_].lock&&++n==e.length){for(var f=0;f<s.length;f++)if(s[f].small){t=Ye(t,s[f].index+1,"s_");for(var d=f+1;d<s.length;d++)s[d].index=s[d].index+2}return void He(0,t,r,o,a,i)}u(_,m)}},u=function(e,t){Ze(e,i,c,t)},l=0;l<e.length;l++)if(s[l].small){var m="s_"+e[l];if(L[m]){if(!L[m].lock&&++n==e.length){for(var h=0;h<s.length;h++)if(s[h].small){t=Ye(t,s[h].index+1,"s_");for(var _=h+1;_<s.length;_++)s[_].index=s[_].index+2}return void He(0,t,r,o,a,i)}continue}u(m,s[l])}else{if(L[e[l]]){if(!L[e[l]].lock&&++n==e.length)return void He(0,t,r,o,a,i);continue}u(e[l],s[l])}}(s,n,t,r,o,i,a)},create_effect_opacity_view:function(e,t){return!!t&&G.create_view("blend view %1 opacity alpha %2;".replace(/%1/,t).replace(/%2/,e))},fetch_cache_texture:function(e,t){if("blemish"==e){var r=q.fetch_view_texture(M);return M=0,r}if("redEyeRemove"==e){r=G.fetch_view_texture(A);return A=0,r}if("reshape"==e){if(!D||!t)return null;var o=G.create_view("basicAdjust reshapeDraw useView %1 stress %s;".replace(/%1/,D.toString()).replace(/%s/,t.toString()));r=G.fetch_view_texture(o);return G.destroy_view(D),D=0,r}},fetch_painter_view_texture:function(e,t){var r;if(E)if("[object String]"==Object.prototype.toString.call(e))r=null==t?G.create_view("%2 blend view %1 opacity alpha 100;".replace(/%1/,E.toString()).replace(/%2/,e)):G.create_view("layer opacityAdjust start;%2 blend view %1 opacity alpha 100;layer opacityAdjust swap;blend layer opacityAdjust opacity %op;layer opacityAdjust end;".replace(/%1/,E.toString()).replace(/%2/,e).replace(/%op/,t.toString()));else if(null==t)r=G.create_view("view %1;blend view %2 opacity alpha 100;".replace(/%1/,e.toString()).replace(/%2/,E.toString()));else{var o=G.create_view("view %1;blend view %2 opacity alpha 100;".replace(/%1/,e.toString()).replace(/%2/,E.toString()));G.process_view(o),r=G.create_view("blend view %1 opacity %op;".replace(/%1/,o.toString()).replace(/%op/,Math.floor(t).toString()));var i=G.fetch_view_texture(r);G.destroy_view(o)}else r=G.create_view("");return i},create_reshape_view:function(e,t){if(e&&e.points.length>=2){for(var r=D,o="basicAdjust reshapeMap realPixel",i=[Math.floor(e.points[0].x),Math.floor(e.points[0].y)],a=[Math.floor(e.points[0].x),Math.floor(e.points[0].y)],s=0;s<e.points.length;++s){var n=Math.floor(e.points[s].x),c=Math.floor(e.points[s].y);o+=" point stress 1.0 radius "+e.radius.toString()+" "+e.points[s].x.toString()+" "+e.points[s].y.toString(),i[0]=i[0]>n?n:i[0],i[1]=i[1]>c?c:i[1],a[0]=a[0]<n?n:a[0],a[1]=a[1]<c?c:a[1]}D=G.create_view((r?"view %1;".replace(/%1/,D.toString()):"basicAdjust dark;")+o),G.process_view(D),G.destroy_view(r)}return null!=t&&D?G.create_view("basicAdjust reshapeDraw useView %1 stress %s;".replace(/%1/,D.toString()).replace(/%s/,t.toString())):null},change_basic_layer:function(e){C&&C.destroy(),C.view=e},refresh_clone_basic_layer:function(e){},refresh_clone_to_canvas:function(e){},refresh_clone:function(e,t){var r={};r.x=e.x/_,r.y=e.y/_,r.dy=e.dy/_,r.dx=e.dx/_,I.push({model:"refresh",points:r}),Je(e,"s")},process_clone_painter:function(e,t,r){"painter"==I[I.length-1].model?e&&I[I.length-1].point_obj?I[I.length-1].point_obj.points=I[I.length-1].point_obj.points.concat(e.points):I[I.length-1].opacity=t:I.push({model:"painter",point_obj:e?{opacity:e.opacity,size:e.size,points:e.points,model:e.model}:null,opacity:t,relative:r}),Ke(e,t,r,"s")},redo:function(){if(le.index!=le.queue.length){le.index+=1;var e=q.get_src_size();if("reshape"==le.model){var t=le.queue[le.index-1].stress,r=le.queue[le.index-1].maskView;D&&N.destroy_view(D),D=N.create_view("view "+r.toString()+";"),N.process_view(D),ze(q.get_src(),N.get_view_texture(r),t,e.width,e.height,null,!0)}if("blurPainter"==le.model){if(E.view&&(N.destroy_view(E.view),E.view=0),!E.view){be();for(var o=0,a=0;a<=le.index-1;++a)if(le.queue[a].points){var s={};s.opacity=le.queue[a].opacity,s.size=le.queue[a].radius,s.points=le.queue[a].points,s.model=le.queue[a].pmodel;var n=o?"view "+o.toString()+";"+we(s):"basicAdjust alphaInit intensity 0;"+we(s);E.view=N.create_view(n),N.process_view(E.view),o&&N.destroy_view(o),o=E.view}}q.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),C.script!=le.queue[le.index-1].basic_layer&&(C.destroy(),C.script=le.queue[le.index-1].basic_layer,C.view=q.create_view(le.queue[le.index-1].basic_layer),q.process_view(C.view)),g&&q.destroy_view(g),g=q.create_view((le.queue[le.index-1].top_layer?le.queue[le.index-1].top_layer:"")+"blend view %2 opacity cache alpha %3;".replace(/%2/,C.view.toString()).replace(/%3/,le.queue[le.index-1].bOpacity));var c=q.get_view_texture(g);i.check_CRM(c)||console.log("engine error:"+c.toString()),Te(c,(e=q.get_src_size()).width,e.height)}if("magic"==le.model&&(z&&(q.destroy_view(z),z=0),le.queue[le.index-2]&&le.queue[le.index-2].maskView&&(z=q.create_view("view "+le.queue[le.index-2].maskView+";"),q.process_view(z)),ye(le.queue[le.index-1],!1,(function(){})),xe(),le.queue[le.index-1].maskView=q.create_view("view "+z+";"),q.process_view(le.queue[le.index-1].maskView)),"blemish"==le.model){n=le.firstStep?"view "+le.firstStep.toString()+";":"";n+="basicAdjust blemishFix";for(a=0;a<=le.index-1;++a){var u=le.queue[a].points.x,l=le.queue[a].points.y,m=le.queue[a].radius;n+=" point %x %y radius %r".replace(/%x/,u.toString()).replace(/%y/,l.toString()).replace(/%r/,m.toString())}n+=";",q.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),M&&q.destroy_view(M),M=q.create_view(n);c=q.get_view_texture(M);i.check_CRM(c)||console.log("engine error:"+c.toString()),Te(c,(e=q.get_src_size()).width,e.height)}if("redEyeRemove"==le.model){for(n=le.firstStep?"view "+le.firstStep.toString()+";":"",a=0;a<=le.index-1;++a){u=le.queue[a].point_obj.x,l=le.queue[a].point_obj.y,m=le.queue[a].point_obj.radius;n+="basicAdjust redeyeRemove realPosition %x %y %r 3;".replace(/%x/,u.toString()).replace(/%y/,l.toString()).replace(/%r/,m.toString())}q.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),A&&(q.destroy_view(A),A=0),A=q.create_view(n);c=q.get_view_texture(A);i.check_CRM(c)||console.log("engine error:"+c.toString()),Te(c,(e=q.get_src_size()).width,e.height)}if("rotation"==le.model){v&&(q.destroy_view(v),v=0);for(n=0,a=0;a<le.index;++a)le.queue[a].script.match("basicAdjust")&&(n=le.queue[a].script);n?(v=q.create_view(n),c=q.get_view_texture(q.create_view(n))):c=q.get_src(),i.check_CRM(c)||console.log("engine error:"+c.toString()),Ue(c,(e=q.get_src_size()).width,e.height)}if("rule"==le.model){q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),g&&q.destroy_view(g),g=q.create_view(le.queue[le.index-1].script);c=q.get_view_texture(g);i.check_CRM(c)||console.log("engine error:"+c.toString()),Te(c,(e=q.get_src_size()).width,e.height)}if("crop"==le.model){q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1}));var h=le.queue[le.index-1].pos;e=le.queue[le.index-1].size;this.process_crop(h,e)}}},undo:function(){if(le.index&&(le.index-=1,le.queue.length)){var e=q.get_src_size();if(le.index){if("reshape"==le.model){var t=le.queue[le.index-1].stress,r=le.queue[le.index-1].maskView;D&&N.destroy_view(D),D=N.create_view("view "+r.toString()+";"),N.process_view(D),ze(q.get_src(),N.get_view_texture(r),t,e.width,e.height,null,!0)}if("blurPainter"==le.model){E.view&&(N.destroy_view(E.view),E.view=0),be();for(var o=0,a=0;a<=le.index-1;++a)if(le.queue[a].points){var s={};s.opacity=le.queue[a].opacity,s.size=le.queue[a].radius,s.points=le.queue[a].points,s.model=le.queue[a].pmodel;var n=o?"view "+o.toString()+";"+we(s):"basicAdjust alphaInit intensity 0;"+we(s);E.view=N.create_view(n),N.process_view(E.view),o&&N.destroy_view(o),o=E.view}q.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),C.script!=le.queue[le.index-1].basic_layer&&(C.destroy(),C.script=le.queue[le.index-1].basic_layer,C.view=q.create_view(le.queue[le.index-1].basic_layer),q.process_view(C.view)),g&&q.destroy_view(g),g=q.create_view((le.queue[le.index-1].top_layer?le.queue[le.index-1].top_layer:"")+"blend view %2 opacity cache alpha %3;".replace(/%2/,C.view.toString()).replace(/%3/,le.queue[le.index-1].bOpacity));h=q.get_view_texture(g);i.check_CRM(h)||console.log("engine error:"+h.toString()),Te(h,(e=q.get_src_size()).width,e.height)}if("magic"==le.model){z&&q.destroy_view(z),z=q.create_view("view "+le.queue[le.index-1].maskView+";"),q.process_view(z),le.queue[le.index]&&le.queue[le.index].maskView&&(q.destroy_view(le.queue[le.index].maskView),le.queue[le.index].maskView=0),L.magic=je("magic",q.fetch_view_texture(q.create_view("view "+z+";"))),q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),f&&G.destroy_view(f),f=G.create_view("blend texture file 'magic' align none "+le.queue[le.index-1].blendModel+" "+le.queue[le.index-1].blendOpacity.toString()+";");h=G.fetch_view_texture(f);i.check_CRM(h)||console.log("engine error:"+h.toString()),Te(h,(e=G.get_src_size()).width,e.height)}if("blemish"==le.model){n=le.firstStep?"view "+le.firstStep.toString()+";":"";n+="basicAdjust blemishFix";for(a=0;a<=le.index-1;++a){var c=le.queue[a].points.x,u=le.queue[a].points.y,l=le.queue[a].radius;n+=" point %x %y radius %r".replace(/%x/,c.toString()).replace(/%y/,u.toString()).replace(/%r/,l.toString())}n+=";",q.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),M&&(q.destroy_view(M),M=0),M=q.create_view(n);h=q.get_view_texture(M);i.check_CRM(h)||console.log("engine error:"+h.toString()),Te(h,(e=q.get_src_size()).width,e.height)}if("redEyeRemove"==le.model){for(n=le.firstStep?"view "+le.firstStep.toString()+";":"",a=0;a<=le.index-1;++a){c=le.queue[a].point_obj.x,u=le.queue[a].point_obj.y,l=le.queue[a].point_obj.radius;n+="basicAdjust redeyeRemove realPosition %x %y %r 3;".replace(/%x/,c.toString()).replace(/%y/,u.toString()).replace(/%r/,l.toString())}q.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),A&&(q.destroy_view(A),A=0),A=q.create_view(n);h=q.get_view_texture(A);i.check_CRM(h)||console.log("engine error:"+h.toString()),Te(h,(e=q.get_src_size()).width,e.height)}if("rotation"==le.model){v&&(q.destroy_view(v),v=0);for(n=0,a=0;a<le.index;++a)le.queue[a].script.match("basicAdjust")&&(n=le.queue[a].script);n?(v=q.create_view(n),h=q.get_view_texture(q.create_view(n))):h=q.get_src(),i.check_CRM(h)||console.log("engine error:"+h.toString()),Ue(h,(e=q.get_src_size()).width,e.height)}if("effectRule"==le.model){q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),g&&q.destroy_view(g),g=q.create_view(le.queue[le.index-1].script);h=q.get_view_texture(g);q.destroy_view(basic_layer),i.check_CRM(h)||console.log("engine error:"+h.toString()),Te(h,(e=q.get_src_size()).width,e.height)}if("rule"==le.model){q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),g&&q.destroy_view(g),g=q.create_view(le.queue[le.index-1].script);h=q.get_view_texture(g);i.check_CRM(h)||console.log("engine error:"+h.toString()),Te(h,(e=q.get_src_size()).width,e.height)}if("crop"==le.model){q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1}));var m=le.queue[le.index-1].pos;e=le.queue[le.index-1].size;this.process_crop(m,e)}}else if(E.view&&(N.destroy_view(E.view),E.view=0),D&&(N.destroy_view(D),D=0),v&&(q.destroy_view(v),v=0),M&&(q.destroy_view(M),M=0),A&&(q.destroy_view(A),A=0),z&&(q.destroy_view(z),z=0),"magic"==le.model&&le.queue[le.index]&&le.queue[le.index].maskView&&(q.destroy_view(le.queue[le.index].maskView),le.queue[le.index].maskView=0),"crop"==le.model)Te(G.get_src(),G.get_src_size().width,G.get_src_size().height);else if("blurPainter"==le.model){g&&q.destroy_view(g),g=q.create_view("blurSharpen amount -100 radius 0.1;");var h=q.get_view_texture(g);i.check_CRM(h)||console.log("error rule:"+h.toString()),Te(h,(e=q.get_src_size()).width,e.height)}else Te(q.get_src(),e.width,e.height)}},destroy_texture:function(e){return"engineTexture"==e.name&&(G.get_gl().deleteTexture(e.texture),e.texture=0,e.handlerQueue=0,!0)},cancel_render:function(){p&&cancelAnimationFrame(p)},initialize_resources:function(e,t,r,o,a,s){if(C=c(),S=c(),d=0,x=0,z=0,f=0,g=0,B=0,v=0,M=0,A=0,k=0,R=0,F=0,I=[],N&&(N=0),q&&(q=0),O&&(O=0),G&&(G=0),G=i.create(me._.gl),O=i.create(me._.gl),N=i.create(me._.gl),q=i.create(me._.gl),!t||!t.width||!t.height)return!1;this.set_image(t,r,o,a,s,!0),E={view:0,lock:!1},D=0,T=null;var n=e.length;if(n>0)for(var u=0;u<n;u++)30==e[u].action&&(e[u].afterData?e[u].afterData.picData.name&&"engineTexture"==e[u].afterData.picData.name?(e[u].afterData.picData=this.apply_history_to_original_image(!0,!0,e[u].afterData.picData.handlerQueue),this.set_image(e[u].afterData.picData,r,o,a,s,!0)):this.set_image(e[u].afterData.picData,r,o,a,s,!0):console.log("where is the history image??"));return this.recover_history_to_canvas(),!0},apply_history_to_original_image:function(e,t,r){e=null!=e;var o,a,s,n,c=0,m={width:0,height:0},h=r||le,f=null!=t&&t;if((h.queue.length||I.length)&&"crop"!=h.model||"crop"==h.model&&d&&(c=d,d=0,m.width=h.queue[h.queue.length-1].size[0],m.height=h.queue[h.queue.length-1].size[1]),"matting"==h.model){G.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}if("matting"==t){r=q.get_view_texture(B);if(!i.check_CRM(r))throw new Error("cannot find the matting cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),j&&G.destroy_view(j);for(var v=0,x=0,b=0;b<le.queue.length&&(1==le.queue[b].model2?v=1:2==le.queue[b].model2&&(x=1),!v||!x);++b);v&&x?(j=G.create_view("imageMatting used cache sharpenTimes 4 esp 0.007 iteration 4 alpha;"),G.process_view(j),G.destroy_view(j),j=G.create_view("imageMatting used "+B.toString()+" sharpenTimes 2 esp 0.01 iteration 4 blurResult amount -70 radius "+.001*y+";")):j=G.create_view(" ");var C=G.fetch_view_texture(j);i.check_CRM(C)||console.log("engine error:"+C.toString());var S=G.get_src_size();f||(w?(o=C,a=S.width,s=S.height,n=G.get_frame_buffer(),p&&cancelAnimationFrame(p),me.autoCrop(o,a,s,n)):Te(C,S.width,S.height))}if("painter"==h.model){if(!E.view){be();var k=0;for(b=0;b<=h.index-1;++b){(Y={}).opacity=h.queue[b].opacity,Y.size=h.queue[b].radius,Y.points=h.queue[b].points,Y.model=h.queue[b].pmodel;var U=k?"view "+k.toString()+";"+we(Y):"basicAdjust alphaInit ;"+we(Y);E.view=N.create_view(U),N.process_view(E.view),k&&N.destroy_view(k),k=E.view}}G.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1}));var X=G.create_view(h.queue[h.index-1].basic_layer);G.process_view(X),j&&G.destroy_view(j),j=G.create_view((h.queue[h.index-1].top_layer?h.queue[h.index-1].top_layer:"")+"blend view %2 opacity cache ;".replace(/%2/,X.toString()));C=G.fetch_view_texture(j);G.destroy_view(X),i.check_CRM(C)||console.log("engine error:"+C.toString());S=G.get_src_size();f||Te(C,S.width,S.height),c=C,m.width=S.width,m.height=S.height}if("blurPainter"==h.model){if(!E.view)return!1;G.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1}));X=G.create_view(h.queue[h.index-1].basic_layer);G.process_view(X),j&&G.destroy_view(j),j=G.create_view((h.queue[h.index-1].top_layer?h.queue[h.index-1].top_layer:"")+"blend view %2 opacity cache alpha %3;".replace(/%2/,X.toString()).replace(/%3/,h.queue[h.index-1].bOpacity));C=G.fetch_view_texture(j);G.destroy_view(X),i.check_CRM(C)||console.log("engine error:"+C.toString());S=G.get_src_size();f||Te(C,S.width,S.height)}if("magic"==h.model){L.magic=je("magic",q.fetch_view_texture(q.create_view("view "+z+";"))),G.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),j&&G.destroy_view(j),j=G.create_view("blend texture file 'magic' align none "+h.queue[h.index-1].blendModel+ +h.queue[h.index-1].blendOpacity.toString()+";");C=G.fetch_view_texture(j);i.check_CRM(C)||console.log("engine error:"+C.toString());S=G.get_src_size();f||Te(C,S.width,S.height),ge()}if("reshape"==h.model){if(1==_)return ge(),h.destroy(),h=u(),T=null,N.clean(),E={view:0,lock:!1},D=0,!1;if(!D){var j=0;for(b=0;b<=h.index-1;++b){var Y;Y.radius=h.queue[b].radius,Y.points=h.queue[b].points;U=j?"view "+j.toString()+";"+pe(Y):"basicAdjust dark;"+pe(Y);D=N.create_view(U),N.process_view(D),j&&N.destroy_view(j),j=E.view}}var V=h.queue[h.index-1].stress;S=G.get_src_size();return ze(G.get_src(),N.get_view_texture(D),V,S.width,S.height,null,!0),ge(),h.destroy(),h=u(),T=null,N.clean(),E={view:0,lock:!1},D=0,!1}if("effectRule"==h.model)if(G.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),"normal"==h.queue[h.index-1].eModel){if(1==_&&null==r){var H=q.fetch_view_texture(g);if(i.check_CRM(H)&&(c=H),m.width=q.get_src_size().width,m.height=q.get_src_size().height,ge(),T=null,N.clean(),E={view:0,lock:!1},D=0,c){var W=l(c,m.width,m.height,h);return P.push(W),e?(h.destroy(),h=u(),W):(h.destroy(),h=u(),this.destroy_texture(W),!1)}return h.destroy(),h=u(),!1}j&&G.destroy_view(j),j=G.create_view(h.queue[h.index-1].script);C=G.fetch_view_texture(j);G.destroy_view(X),i.check_CRM(C)||console.log("engine error:"+C.toString());S=G.get_src_size();f||Te(C,S.width,S.height),c=C,m.width=S.width,m.height=S.height}else{if(1==_&&null==r){H=d;d=0,i.check_CRM(H)&&(c=H);var Z=G.get_image_size(),J=h.queue[h.index-1].thickness*Z.width,K=Z.width+2*J,Q=Z.height+2*J;if(m.width=K,m.height=Q,ge(),T=null,N.clean(),E={view:0,lock:!1},D=0,c){W=l(c,m.width,m.height,h);return P.push(W),e?(h.destroy(),h=u(),W):(h.destroy(),h=u(),this.destroy_texture(W),!1)}return h.destroy(),h=u(),!1}Z=G.get_image_size(),J=h.queue[h.index-1].thickness*Z.width,K=Z.width+2*J,Q=Z.height+2*J;var $=O.create_new_texture(K,Q,!0);O.set_image($,K,Q),O.set_lock_unlock_function(Qe,(function(e,t){L[e].lock=!1}));var ee=O.create_view(h.queue[h.index-1].script);C=O.fetch_view_texture(ee);d&&(de(d),d=0),f||Te(C,K,Q),c=C,m.width=K,m.height=Q,O.clean()}if("rule"==h.model){if(1==_&&null==r){H=q.fetch_view_texture(g);if(i.check_CRM(H)&&(c=H),m.width=q.get_src_size().width,m.height=q.get_src_size().height,ge(),T=null,N.clean(),E={view:0,lock:!1},D=0,c){W=l(c,m.width,m.height,h);return P.push(W),e?(h.destroy(),h=u(),W):(h.destroy(),h=u(),this.destroy_texture(W),!1)}return h.destroy(),h=u(),!1}G.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),j&&G.destroy_view(j),j=G.create_view(h.queue[h.index-1].script);C=G.fetch_view_texture(j);G.destroy_view(X),i.check_CRM(C)||console.log("engine error:"+C.toString());S=G.get_src_size();f||Te(C,S.width,S.height),c=C,m.width=S.width,m.height=S.height}if("rotation"==h.model){j&&G.destroy_view(j);for(U=0,b=0;b<h.index;++b)h.queue[b].script.match("basicAdjust")&&(U=h.queue[b].script);C=U?G.get_view_texture(G.create_view(U)):G.get_src(),i.check_CRM(C)||console.log("engine error:"+C.toString()),Ue(C,(S=G.get_src_size()).width,S.height)}if("blemish"==h.model){if(1==_&&null==r){H=q.fetch_view_texture(M);if(i.check_CRM(H)&&(c=H),m.width=q.get_src_size().width,m.height=q.get_src_size().height,ge(),T=null,N.clean(),E={view:0,lock:!1},D=0,c){W=l(c,m.width,m.height,h);return P.push(W),e?(h.destroy(),h=u(),W):(h.destroy(),h=u(),this.destroy_texture(W),!1)}return h.destroy(),h=u(),!1}var te;U="basicAdjust blemishFix";h.queue.splice(h.index),te=h.firstStepScript&&h.firstStepScript.length?h.firstStepScript.concat(h.queue):h.queue;for(b=0;b<=te.length-1;++b){var re=te[b].points.x/_,oe=te[b].points.y/_,ie=te[b].radius/_;U+=" point %x %y radius %r".replace(/%x/,re.toString()).replace(/%y/,oe.toString()).replace(/%r/,ie.toString())}U+=";",G.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),j&&G.destroy_view(j),j=G.create_view(U);C=G.fetch_view_texture(j);i.check_CRM(C)||console.log("engine error:"+C.toString());S=G.get_src_size();f||Te(C,S.width,S.height),c=C,m.width=S.width,m.height=S.height}if("redEyeRemove"==h.model){if(1==_&&null==r){H=q.fetch_view_texture(A);if(i.check_CRM(H)&&(c=H),m.width=q.get_src_size().width,m.height=q.get_src_size().height,ge(),T=null,N.clean(),E={view:0,lock:!1},D=0,c){W=l(c,m.width,m.height,h);return P.push(W),e?(h.destroy(),h=u(),W):(h.destroy(),h=u(),this.destroy_texture(W),!1)}return h.destroy(),h=u(),!1}var ae;U="";h.queue.splice(h.index),ae=h.firstStepScript&&h.firstStepScript.length?h.firstStepScript.concat(h.queue):h.queue;for(b=0;b<=ae.length-1;++b){re=ae[b].point_obj.x/_,oe=ae[b].point_obj.y/_,ie=ae[b].point_obj.radius/_;U+="basicAdjust redeyeRemove realPosition %x %y %r 3;".replace(/%x/,re.toString()).replace(/%y/,oe.toString()).replace(/%r/,ie.toString())}G.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),j&&G.destroy_view(j),j=G.create_view(U);C=G.fetch_view_texture(j);i.check_CRM(C)||console.log("engine error:"+C.toString());S=G.get_src_size();f||Te(C,S.width,S.height),c=C,m.width=S.width,m.height=S.height}if("polaroid"==h.model){G.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),j&&G.destroy_view(j),j=G.create_view(h.queue[h.index-1].script);C=G.get_view_texture(j);G.destroy_view(X),i.check_CRM(C)||console.log("engine error:"+C.toString()),(S=G.get_src_size()).height+=h.queue[h.index-1].captation*S.width,Xe(C,S.width,S.height,h.queue[h.index-1].color,h.queue[h.index-1].captation*S.width)}if(I.length){if(1==_)return void(I=[]);var se;E.view&&(N.destroy_view(E.view),E.view=0),R&&(q.destroy_view(R),R=0),F&&(q.destroy_view(F),F=0);for(b=0;b<I.length;++b)null!=I[b].opacity&&(se=I[b].opacity),"painter"==I[b].model?C=Ke(I[b].point_obj,I[b].opacity,I[b].relative,"b",!0):Je(I[b].points,"b");S=G.get_src_size();return Se(G.get_src(),C,S.width,S.height,se,!0),void(I=[])}if(ge(),T=null,N.clean(),E={view:0,lock:!1},D=0,c){W=l(c,m.width,m.height,h);return P.push(W),e?(h.destroy(),h=u(),W):(h.destroy(),h=u(),this.destroy_texture(W),!1)}return h.destroy(),h=u(),!1},recover_history_to_canvas:function(){var e=le;if(e.index||this.process_rule("",!0),"painter"==e.model){if(!E.view){be();for(var t=0,r=0;r<=e.index-1;++r){(c={}).opacity=e.queue[r].opacity,c.size=e.queue[r].radius,c.points=e.queue[r].points,c.model=e.queue[r].pmodel;var o=t?"view "+t.toString()+";"+we(c):"basicAdjust alphaInit ;"+we(c);E.view=N.create_view(o),N.process_view(E.view),t&&N.destroy_view(t),t=E.view}}q.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1}));var a=q.create_view(e.queue[e.index-1].basic_layer);q.process_view(a),n&&q.destroy_view(n),n=q.create_view((e.queue[e.index-1].top_layer?e.queue[e.index-1].top_layer:"")+"blend view %2 opacity cache ;".replace(/%2/,a.toString()));var s=q.fetch_view_texture(n);q.destroy_view(a),i.check_CRM(s)||console.log("engine error:"+s.toString()),Te(s,(m=q.get_src_size()).width,m.height)}if("magic"==e.model){L.magic=je("magic",q.fetch_view_texture(q.create_view("view "+z+";"))),q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),n&&q.destroy_view(n),n=q.create_view("blend texture file 'magic' align none "+e.queue[e.index-1].blendModel+ +e.queue[e.index-1].blendOpacity.toString()+";");s=q.fetch_view_texture(n);i.check_CRM(s)||console.log("engine error:"+s.toString()),Te(s,(m=q.get_src_size()).width,m.height)}if("reshape"==e.model){if(1==_)return ge(),e.destroy(),e=u(),T=null,N.clean(),E={view:0,lock:!1},D=0,!1;if(!D){var n=0;for(r=0;r<=e.index-1;++r){var c;c.radius=e.queue[r].radius,c.points=e.queue[r].points;o=n?"view "+n.toString()+";"+pe(c):"basicAdjust dark;"+pe(c);D=N.create_view(o),N.process_view(D),n&&N.destroy_view(n),n=E.view}}var l=e.queue[e.index-1].stress,m=q.get_src_size();ze(q.get_src(),N.get_view_texture(D),l,m.width,m.height,null,!0)}if("effectRule"==e.model)if(q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),"normal"==e.queue[e.index-1].eModel){n&&q.destroy_view(n),n=q.create_view(e.queue[e.index-1].script);s=q.fetch_view_texture(n);q.destroy_view(a),i.check_CRM(s)||console.log("engine error:"+s.toString()),Te(s,(m=q.get_src_size()).width,m.height)}else{var h=e.queue[e.index-1].thickness,f=q.get_image_size(),g=f.width+2*h,v=f.height+2*h,x=O.create_new_texture(g,v,!0);O.set_image(x,g,v),O.set_lock_unlock_function(Qe,(function(e,t){L[e].lock=!1}));var p=O.create_view(e.queue[e.index-1].script);s=O.fetch_view_texture(p);d&&(de(d),d=0),Te(s,g,v)}if("rule"==e.model){q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),n&&q.destroy_view(n),n=q.create_view(e.queue[e.index-1].script);s=q.fetch_view_texture(n);q.destroy_view(a),i.check_CRM(s)||console.log("engine error:"+s.toString()),Te(s,(m=q.get_src_size()).width,m.height)}if("rotation"==e.model){n&&q.destroy_view(n);for(o=0,r=0;r<e.index;++r)e.queue[r].script.match("basicAdjust")&&(o=e.queue[r].script);s=o?q.get_view_texture(q.create_view(o)):q.get_src(),i.check_CRM(s)||console.log("engine error:"+s.toString()),Ue(s,(m=q.get_src_size()).width,m.height)}if("blemish"==e.model){var b;o="basicAdjust blemishFix";e.queue.splice(e.index),b=e.firstStepScript.length?e.firstStepScript.concat(e.queue):e.queue;for(r=0;r<=b.length-1;++r){var y=b[r].points.x/_,w=b[r].points.y/_,C=b[r].radius/_;o+=" point %x %y radius %r".replace(/%x/,y.toString()).replace(/%y/,w.toString()).replace(/%r/,C.toString())}o+=";",q.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),n&&q.destroy_view(n),n=q.create_view(o);s=q.fetch_view_texture(n);i.check_CRM(s)||console.log("engine error:"+s.toString()),Te(s,(m=q.get_src_size()).width,m.height)}if("redEyeRemove"==e.model){var S;o="";e.queue.splice(e.index),S=e.firstStepScript.length?e.firstStepScript.concat(e.queue):e.queue;for(r=0;r<=S.length-1;++r){y=S[r].point_obj.x/_,w=S[r].point_obj.y/_,C=S[r].point_obj.radius/_;o+="basicAdjust redeyeRemove realPosition %x %y %r 3;".replace(/%x/,y.toString()).replace(/%y/,w.toString()).replace(/%r/,C.toString())}q.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),n&&q.destroy_view(n),n=q.create_view(o);s=q.fetch_view_texture(n);i.check_CRM(s)||console.log("engine error:"+s.toString()),Te(s,(m=q.get_src_size()).width,m.height)}if("polaroid"==e.model){q.set_lock_unlock_function((function(e,t){if(t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){L[e].lock=!1,E.lock=!1})),n&&q.destroy_view(n),n=q.create_view(e.queue[e.index-1].script);s=q.get_view_texture(n);q.destroy_view(a),i.check_CRM(s)||console.log("engine error:"+s.toString()),(m=q.get_src_size()).height+=e.queue[e.index-1].captation*m.width,Xe(s,m.width,m.height,e.queue[e.index-1].color,e.queue[e.index-1].captation*m.width)}if(I.length){var M;E.view&&(N.destroy_view(E.view),E.view=0),R&&(q.destroy_view(R),R=0),F&&(q.destroy_view(F),F=0);for(r=0;r<I.length;++r)null!=I[r].opacity&&(M=I[r].opacity),"painter"==I[r].model?s=Ke(I[r].point_obj,I[r].opacity,I[r].relative,"b",!0):Je(I[r].points,"b");m=q.get_src_size();Se(q.get_src(),s,m.width,m.height,M,!0)}else;}},"clean_record",(function(){xe()})),o(a,"refresh_record",(function(){if(T){if("painter"==T.model)return ve(),void(T=0);if("blurPainter"==T.model)return ve(),void(T=0);if("magic"==T.model)return ve(),void(T=0);if("blemish"==T.model)return ve(),void(T=0);if("rule"==T.model)return ve(),void(T=0);if("effectRule"==T.model)return ve(),void(T=0);if("reshape"==T.model)return ve(),void(T=0);if("redEyeRemove"==T.model)return ve(),void(T=0);if("polaroid"==T.model)return ve(),void(T=0);if("effectRule"==T.model)return ve(),void(T=0);if("crop"==T.model)return ve(),void(T=0);if("matting"==T.model)return ve(),void(T=0)}return x?(T={model:"rotation",script:x},x=0,ve(),void(T=0)):null})),o(a,"set_step",(function(e){"reshape"==le.model&&E.view||(h=e)})),o(a,"get_magic_resource",(function(){var e=new Image;return e.width=me.width,e.height=me.height,e.src=me.toDataURL(),L.magic=je("magic",e),e})),o(a,"set_magic_resource",(function(e,t){L[t]=je(t,e)})),o(a,"process_magic_painter_rule",(function(e,t,r,o){r=r||!1;var i=e.fileName,a=function(o,i,a){var s=new Image;s.crossOrigin=isSafari?null:"anonymous",s.src=o,s.complete?(L[i]=je(i,s),ye(e,r,t)):(s.onload=function(){L[i]=je(i,s),ye(e,r,t)},s.onerror=function(){throw new error("connot find texture:"+i)})};L[i]?ye(e,r,t):Ze(i,"effect",a)})),o(a,"process_painter_rule",(function(e,t,r,o,i){o=null!=o&&o,be(),!o&&t&&C.script!=t&&(C.destroy(),C.script=t,C.view=G.create_view(t),G.process_view(C.view)),T&&"painter"==T.model?"painter"==T.model&&T.basic_layer==C.script||console.log("the interval record hasn't been cleared!"):(T={model:"painter",points:new Array,radius:null,opacity:null,pmodel:null,basic_layer:t,top_layer:i},e&&(T.opacity=e.opacity,T.radius=e.size,T.pmodel=e.model));var a={points:[],max:[],min:[]};if(e&&e.points.length){if(T.opacity==e.opacity&&T.radius==e.size||console.log("the interval record hasn't been cleared!"),E.lock)return void console.log("painter_view hasn't been unlock");var s=E.view,n=(s?"view %1;".replace(/%1/,s.toString()):"basicAdjust alphaInit ;")+we(e,a,r);E.view=N.create_view(n),N.process_view(E.view),N.destroy_view(s)}if(T.points=T.points.concat(a.points),!o){var c=G.get_src_size(),u=2==a.min.length?{min:a.min,max:a.max}:null;Me(G.get_src(),N.get_view_texture(E.view),G.get_view_texture(C.view),c.width,c.height,u)}})),o(a,"clean_matting_painter",(function(){B&&(q.destroy_view(B),B=0),le=u()})),o(a,"process_matting_painter",(function(e,t,r,o){B||(B=q.create_view("basicAdjust darkClear;"),q.process_view(B)),T&&"matting"==T.model||(T={model:"matting",model2:e,points:new Array,size:r,rel:o});if(t&&t.length){T.size==r&&T.model2==e&&T.rel==o||console.log("the interval record hasn't been cleared!");var i,a=B;switch(e){case 1:i=[255,0,0];break;case 2:i=[0,255,0];break;case 3:i=[0,0,0]}var s="view %1;".replace(/%1/,a.toString())+function(e,t,r,o,i){var a,s="colorPainter pointSize %3 %4 pointStride %s %5 %6 %7 %p ";s=(s=s.replace(/%3/,o?"relToWidth":" ")).replace(/%4/,t),a=3!=i?Math.max(.13*t,1):Math.max(.25*t,1),s=(s=(s=(s=(s=s.replace(/%s/,a)).replace(/%5/,r[0])).replace(/%6/,r[1])).replace(/%7/,r[2])).replace(/%p/,o?"coordinate":"realPixel");for(var n=[],c=0;c<e.length;++c){var u,l;u=e[c].x,l=e[c].y,n.push({x:u,y:l}),s+=" point "+u.toString()+" "+l.toString()}return s+";"}(t,r,i,o,e);B=q.create_view(s),q.process_view(B),q.destroy_view(a)}T.points=T.points.concat(t)})),o(a,"set_matting_crop",(function(e){w=e})),o(a,"process_matting",(function(e,t,r){if(e){var o=q.create_view("curve mixColor opacity 255 0 0 100 255;");q.process_view(o);var i=q.create_view("imageMatting used "+o.toString()+" sharpenTimes 1 esp 0.01 iteration 1 ;");return q.process_view(i),q.destroy_view(o),void q.destroy_view(i)}B?null!=t?(y=t=null==t?0:(t+1)/1.5,r?this.process_rule("imageMatting used "+B.toString()+" sharpenTimes 2 esp 0.01 iteration 4 blurResult amount -100 radius "+.001*t+" crop ;"):this.process_rule("imageMatting used "+B.toString()+" sharpenTimes 2 esp 0.01 iteration 4 blurResult amount -100 radius "+.001*t+" ;")):r?this.process_rule("imageMatting used "+B.toString()+" sharpenTimes 2 esp 0.01 iteration 4 crop;"):this.process_rule("imageMatting used "+B.toString()+" sharpenTimes 2 esp 0.01 iteration 4 ;"):y=t=null==t?0:(t+1)/1.5})),o(a,"process_blur_brush_rule",(function(e,t,r,o,a,s){a=null!=a&&a,be(),!a&&t&&C.script!=t&&(C.destroy(),C.script=t,C.view=q.create_view(t),q.process_view(C.view)),T&&"blurPainter"==T.model&&"rule"==T.model||(T={model:"blurPainter",points:new Array,radius:null,opacity:null,bOpacity:null,pmodel:null,basic_layer:t,top_layer:s}),e&&(T.opacity=e.opacity,T.radius=e.size,T.pmodel=e.model),T.bOpacity=r,T.basic_layer=C.script;var n={points:[],max:[],min:[]};if(q.set_lock_unlock_function((function(e,t){if("painter"==t){var r=N.get_view_texture(E.view);if(E.lock=!0,!i.check_CRM(r))throw new Error("cannot find the painter cache");return r}if("reshape"==t){r=N.get_view_texture(D);if(!i.check_CRM(r))throw new Error("cannot find the reshape cache");return r}return L[e].lock=!0,L[e].image}),(function(e,t,r){"painter"!=r?L[e].lock=!1:E.lock=!1})),e&&e.points.length){if(T.opacity==e.opacity&&T.radius==e.size||console.log("the interval record hasn't been cleared!"),E.lock)return void console.log("painter_view hasn't been unlock");var c=E.view,u=(c?"view %1;".replace(/%1/,c.toString()):"basicAdjust alphaInit intensity 0;")+we(e,n,o,!0);E.view=N.create_view(u),N.process_view(E.view),N.destroy_view(c)}if(T.points=T.points.concat(n.points),!a){E.view||(E.view=N.create_view("basicAdjust alphaInit intensity 0;"),N.process_view(E.view));var l=q.get_src_size(),m=2==n.min.length?{min:n.min,max:n.max}:null;Me(q.get_src(),N.get_view_texture(E.view),q.get_view_texture(C.view),l.width,l.height,m,r)}})),o(a,"clean_special_border_GLTextures",(function(e){O.get_gl().deleteTexture(e)})),o(a,"process_rotation",(function(e,t,r){if("intensity"==e){var o;o=null!=r?"basicAdjust gribRotation %1 %2;".replace(/%1/,t.toString()).replace(/%2/,r.toString()):"basicAdjust rotation %1;".replace(/%1/,t.toString()),v&&q.destroy_view(v),v=q.create_view(o);var a=q.get_view_texture(v);i.check_CRM(a)||console.log("error rule:"+a.toString());var s=q.get_src_size();T&&"rotation"!=T.model&&console.log("record hasn't been clear"),x=o;var n=Math.abs(10*t)%1800;(n/=10)>90&&(n=180-n),n=n/180*3.14159265358;var c=Math.sqrt(s.width/2*(s.width/2)+s.height/2*(s.height/2)),u=Math.min(s.width,s.height),l=Math.acos(u/2/c)-n,m=u/2/Math.cos(l)/c;return Ue(a,s.width,s.height),1/m}x=e;a=0,s=q.get_src_size();Ue(a=v?q.get_view_texture(v):q.get_src(),s.width,s.height)})),o(a,"process_polaroid",(function(e,t,r){g&&q.destroy_view(g),g=q.create_view(e);var o=q.get_view_texture(g);i.check_CRM(o)||console.log("error rule:"+o.toString());var a=q.get_src_size();a.height+=r*a.width,Xe(o,a.width,a.height,t,r*a.width),T={model:"polaroid",script:e,color:t,captation:r}})),o(a,"process_resize",(function(e,t){O.set_lock_unlock_function(Qe);G.get_image_size();var r=Math.min(e,t),o=Math.max(e,t);r<1&&(e=r==e?1:1/t*e,t=r==t?1:1/e*t),o>4e3&&(e=o==e?4e3:4e3/t*e,t=o==t?4e3:4e3/e*t);var i=O.create_new_texture(e,t,!0);O.set_image(i,e,t);d&&(this.clean_special_border_GLTextures(d),d=0),d=O.fetch_view_texture(O.create_view("basicAdjust justDraw;")),O.clean(),T={model:"resize"},Te(d,e,t)})),o(a,"process_crop",(function(e,t,r){O.set_lock_unlock_function(Qe);var o=G.get_image_size(),i=[],a=[];r?(i[0]=Math.floor(t[0]*o.width+.5),i[1]=Math.floor(t[1]*o.height+.5),a[0]=e[0]*o.width,a[1]=e[1]*o.height):(i=t,a=e);var s,n=O.create_new_texture(i[0],i[1]);O.set_image(n,i[0],i[1]),s="basicAdjust crop position "+a[0].toString()+" "+a[1].toString()+" srcSize "+o.width.toString()+" "+o.height.toString()+";",d&&(this.clean_special_border_GLTextures(d),d=0),d=O.fetch_view_texture(O.create_view(s)),O.clean(),T={model:"crop",pos:a,size:i},Te(d,i[0],i[1])})),o(a,"get_frame_shadow_GLTexture",(function(e,t,r,o,i,a){O.set_lock_unlock_function(Qe);var s=G.get_image_size(),n=s.width+2*e,c=s.height+2*e,u=O.create_new_texture(n,c,!0);O.set_image(u,n,c);var l="specialBorder shadow size %1 fade %2 angle %3 distance %4 shadowColor %5 %6 %7 backColor %8 %9 %10;".replace(/%1/,e.toString()).replace(/%2/,t.toString()).replace(/%3/,r.toString()).replace(/%4/,o.toString()).replace(/%5/,i[0].toString()).replace(/%6/,i[1].toString()).replace(/%7/,i[2].toString()).replace(/%8/,a[0].toString()).replace(/%9/,a[1].toString()).replace(/%10/,a[2].toString());return u=O.fetch_view_texture(O.create_view(l)),O.clean(),{tex:u,width:n,height:c}})),o(a,"process_frame_shadow",(function(e,t,r,o,i,a){d&&(de(d),d=0);var s=this.get_frame_shadow_GLTexture(e,t,r,o,i,a);Te(d=s.tex,s.width,s.height)})),o(a,"get_frame_gallery_GLTexture",(function(e,t,r,o){O.set_lock_unlock_function(Qe);var i=G.get_image_size(),a=i.width+2*e+2*t,s=i.height+2*e+2*t,n=O.create_new_texture(a,s,!0);O.set_image(n,a,s);var c="specialBorder gallery outSize %1 innerSize %2 outColor %3 %4 %5 innerColor %6 %7 %8;".replace(/%1/,e.toString()).replace(/%2/,t.toString()).replace(/%3/,r[0].toString()).replace(/%4/,r[1].toString()).replace(/%5/,r[2].toString()).replace(/%6/,o[0].toString()).replace(/%7/,o[1].toString()).replace(/%8/,o[2].toString());return n=O.fetch_view_texture(O.create_view(c)),O.clean(),U.push(n),{tex:n,width:a,height:s}})),o(a,"process_frame_gallery",(function(e,t,r,o){d&&(de(d),d=0);var i=this.get_frame_gallery_GLTexture(e,t,r,o);Te(d=i.tex,i.width,i.height)})),o(a,"get_frame_polaroid_GLTexture",(function(e,t,r,o,i,a){O.set_lock_unlock_function(Qe);var s=G.get_image_size(),n=s.width+2*e+2*t,c=s.height+2*e+2*t+o,u=O.create_new_texture(n,c,!0);O.set_image(u,n,c);var l="specialBorder polaroid outSize %1 innerSize %2 roundCorner %3 captionSize %4 outColor %5 %6 %7 innerColor %8 %9 %10;".replace(/%1/,e.toString()).replace(/%2/,t.toString()).replace(/%3/,r.toString()).replace(/%4/,o.toString()).replace(/%5/,i[0].toString()).replace(/%6/,i[1].toString()).replace(/%7/,i[2].toString()).replace(/%8/,a[0].toString()).replace(/%9/,a[1].toString()).replace(/%10/,a[2].toString());return u=O.fetch_view_texture(O.create_view(l)),O.clean(),U.push(u),{tex:u,width:n,height:c}})),o(a,"process_frame_polaroid",(function(e,t,r,o,i,a){d&&(de(d),d=0);var s=this.get_frame_polaroid_GLTexture(e,t,r,o,i,a);Te(d=s.tex,s.width,s.height)})),o(a,"process_outside_border",(function(e,t,o,i){for(var a=[],s=e.substr(0),n=s.match(/\S+/g),c=0;c<n.length;c++)(n[c].indexOf(".jpg")>=0||n[c].indexOf(".jpeg")>=0||n[c].indexOf(".png")>=0)&&a.push(n[c].substring(1,n[c].length-1));var u=t*q.get_image_size().width;s=s.replace(/%th/,t),o&&(s=s.replace(/%r/,o[0]).replace(/%g/,o[1]).replace(/%b/,o[2])),function(e,t,o,i){T||(T={model:"effectRule",eModel:"",script:"",thickness:0});T.eModel="special",T.script=t,T.thickness=i/q.get_image_size().width;for(var a=0,s=function(s){!function(e,t){var o;o=e.substring(0,e.length-4),-1!=e.indexOf(".png")?r.e(5).then(function(){t(r(847)("./"+o+".png"))}.bind(null,r)).catch(r.oe):-1!=e.indexOf(".jpg")&&r.e(6).then(function(){t(r(848)("./"+o+".jpg"))}.bind(null,r)).catch(r.oe)}(s,(function(r){var n=new Image;if(n.crossOrigin=isSafari?null:"anonymous",n.src=r,n.complete){if(a++,L[s]=je(s,n),a==e.length){var c=q.get_image_size(),u=c.width+2*i,l=c.height+2*i,m=O.create_new_texture(u,l,!0);O.set_image(m,u,l),O.set_lock_unlock_function(Qe,(function(e,t){L[e].lock=!1}));var h=O.create_view(t),_=O.fetch_view_texture(h);h&&(o&&o(u,l),d&&(de(d),d=0),Te(d=_,u,l)),U.push(_),O.clean()}}else n.onload=function(){if(a++,L[s]=je(s,n),a==e.length){L[s]=je(s,n);var r=q.get_image_size(),c=r.width+2*i,u=r.height+2*i,l=O.create_new_texture(c,u,!0);O.set_image(l,c,u),O.set_lock_unlock_function(Qe,(function(e,t){L[e].lock=!1}));var m=O.create_view(t),h=O.fetch_view_texture(m);m&&(o&&o(c,u),d&&(de(d),d=0),Te(d=h,c,u)),U.push(h),O.clean()}},n.onerror=function(){}}))},n=0;n<e.length;n++)if(L[e[n]]){if(!L[e[n]].lock&&++a==e.length){T||(T={model:"effectRule",eModel:"",script:"",thickness:0}),T.eModel="special",T.script=t,T.thickness=i/q.get_image_size().width;var c=q.get_image_size(),u=c.width+2*i,l=c.height+2*i,m=O.create_new_texture(u,l,!0);O.set_image(m,u,l),O.set_lock_unlock_function(Qe,(function(e,t){L[e].lock=!1}));var h=O.create_view(t),_=O.fetch_view_texture(h);return h&&(o&&o(u,l),d&&(de(d),d=0),Te(d=_,u,l)),U.push(_),void O.clean()}}else s(e[n])}(a,s,i,u)})),a}}},812:function(e,t){var r=function(){function e(e,t,r){return Math.max(e,Math.min(t,r))}function t(e){return{_:e,loadContentsOf:function(e){V=this._.gl,this._.loadContentsOf(e)},destroy:function(){V=this._.gl,this._.destroy()}}}function r(e){return t(Z.fromElement(e))}function o(e,t,r){var o=V.UNSIGNED_BYTE;this.width=e,this.height=t,this._.texture=this._.texture?this._.texture:new Z(e,t,V.RGBA,o),this._.spareTexture=r?this._.spareTexture:new Z(e,t,V.RGBA,o),this._.flippedShader=this._.flippedShader||new W(null,"uniform sampler2D texture;varying vec2 texCoord;void main(){vec4 dst = texture2D(texture,vec2(texCoord.x,1.0-texCoord.y));dst.xyz = dst.xyz*vec3(dst.a);gl_FragColor=dst;}"),this._.areaBlendShader=this._.areaBlendShader||new W("    attribute vec2 vPosition;    varying vec2 textureCoordinate;    void main(){        textureCoordinate= (vPosition.xy + 1.0) / 2.0;        gl_Position=vec4(vPosition, 0.0, 1.0);    }","varying vec2 textureCoordinate;    uniform sampler2D inputImageTexture;    uniform sampler2D blendTexture;    uniform sampler2D alphaTexture;    uniform float opacity;    uniform vec4 trans;    void main()    {            vec2 coord = vec2(textureCoordinate.x,1.0-textureCoordinate.y);        coord = coord*trans.xy+trans.zw;                vec4 src = texture2D(inputImageTexture, coord);        vec4 dst = texture2D(blendTexture, coord);        float a = texture2D(alphaTexture, coord).w*opacity;        gl_FragColor =vec4(mix(src.rgb,dst.rgb,1.0-a),src.a);    }"),this._.autoCropShader=this._.autoCropShader||new W(null,"varying vec2 texCoord;        uniform sampler2D texture;        uniform vec4 trans;                void main()        {                    vec2 coord = vec2(texCoord.x,1.0-texCoord.y);            coord = coord*trans.xy+trans.zw;                        vec4 src = texture2D(texture, coord);        src.xyz = src.xyz*vec3(src.a);            gl_FragColor =src;        }"),this._.areaReshapeShader=this._.areaReshapeShader||new W("    attribute vec2 vPosition;    varying vec2 textureCoordinate;    void main(){        textureCoordinate= (vPosition.xy + 1.0) / 2.0;        gl_Position=vec4(vPosition, 0.0, 1.0);    }","varying vec2 textureCoordinate;                     uniform sampler2D inputImageTexture;                     uniform sampler2D reshapeMap;                     uniform float stress;                     uniform vec4 cal;                       void main()                     {                         vec2 cod,result;                         vec4 dst;                         vec2 coord = vec2(textureCoordinate.x,1.0 - textureCoordinate.y);                         coord = coord*cal.xy+cal.zw;                         vec4 trans = texture2D(reshapeMap, coord);                          float mid = 127.0;                         result.x = trans.x*255.0 + (trans.z*(255.0/256.0));                         result.x = (result.x - mid)/127.0;                          result.y = trans.y*255.0 + (trans.w*(255.0/256.0));                         result.y = (result.y - mid)/127.0;                          cod.x = coord.x - result.x*stress;                         cod.y = coord.y - result.y*stress;                            dst = texture2D(inputImageTexture, cod);                          dst.xyz = dst.xyz*vec3(dst.a);                         gl_FragColor = dst;                     }"),this._.cloneShader=this._.cloneShader||new W("    attribute vec2 vPosition;    varying vec2 textureCoordinate;    void main(){        textureCoordinate= (vPosition.xy + 1.0) / 2.0;        gl_Position=vec4(vPosition, 0.0, 1.0);    }","varying vec2 textureCoordinate;        uniform sampler2D srcTexture;        uniform sampler2D resultTexture;        uniform float opacity;                void main()        {                    vec2 coord = vec2(textureCoordinate.x,1.0-textureCoordinate.y);                        vec4 src = texture2D(srcTexture, coord);                        vec4 result = texture2D(resultTexture,coord);                        vec4 dst =  vec4(mix(src.rgb,result.rgb,opacity),result.a);            dst.xyz = dst.xyz*vec3(dst.a);                gl_FragColor = dst;        }"),this._.rotationShader=this._.rotationShader||new W("    attribute vec2 vPosition;    varying vec2 textureCoordinate;    void main(){        textureCoordinate= (vPosition.xy + 1.0) / 2.0;        gl_Position=vec4(vPosition, 0.0, 1.0);    }","varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec4 trans;                void main()        {                vec2 coord = vec2(textureCoordinate.x,1.0-textureCoordinate.y);              coord = coord - vec2(0.5, 0.5);                        coord = vec2(coord.x*trans.x + coord.y*trans.y,                            coord.x*trans.z + coord.y*trans.w);                        coord = coord + vec2(0.5, 0.5);                                                vec4 dst = texture2D(inputImageTexture, coord);                        dst.xyz = dst.xyz*vec3(dst.a);                        gl_FragColor = dst;        }"),this._.polaroidShader=this._.polaroidShader||new W("    attribute vec2 vPosition;    varying vec2 textureCoordinate;    void main(){        textureCoordinate= (vPosition.xy + 1.0) / 2.0;        gl_Position=vec4(vPosition, 0.0, 1.0);    }","varying vec2 textureCoordinate;        uniform sampler2D inputImageTexture;        uniform vec3 color;        uniform float border;                void main()        {                    vec2 coord = vec2(textureCoordinate.x,1.0-textureCoordinate.y);            coord.y = coord.y/border;            vec4 dst;            if (coord.y>1.0)                dst =vec4(color,1.0);            else                dst = texture2D(inputImageTexture,coord);                            dst.xyz = dst.xyz*vec3(dst.a);            gl_FragColor = dst;        }"),this._.isInitialized=!0}function i(e,t,r){return this._.isInitialized&&e._.width==this.width&&e._.height==this.height||o.call(this,t||e._.width,r||e._.height),e._.use(),this._.texture.drawTo((function(){W.getDefaultShader().drawRect()})),this}function a(e,t,r,i,a,s,n){return e&&(this._.isInitialized&&t==this.width&&r==this.height||o.call(this,t,r,!0),this._.texture.id=e,V.bindFramebuffer(V.FRAMEBUFFER,null)),V.viewport(0,0,t||this.width,r||this.height),this._.texture.use(),this._.flippedShader.drawRect(),this.m_small_canvas_difference=!0,this}function s(e,t,r,i,a,s,n,c){V.bindFramebuffer(V.FRAMEBUFFER,i),V.framebufferTexture2D(V.FRAMEBUFFER,V.COLOR_ATTACHMENT0,V.TEXTURE_2D,e,0);var u=new Uint8Array(t*r*4);V.readPixels(0,0,t,r,V.RGBA,V.UNSIGNED_BYTE,u);for(var l=[65536,65536],m=0,h=0,_=0;_<r;++_)for(var f=0;f<t;++f)u[4*(_*t+f)+3]>10&&(m<f&&(m=f),h<_&&(h=_),l[0]>f&&(l[0]=f),l[1]>_&&(l[1]=_));m=Math.min(m+5,t),h=Math.min(h+5,r),l[0]=Math.max(l[0]-5,0),l[1]=Math.max(l[1]-5,0),m-=l[0],h-=l[1],e&&(this._.isInitialized&&m==this.width&&h==this.height||o.call(this,m,h,!0),this._.texture.id=e,V.bindFramebuffer(V.FRAMEBUFFER,null),V.clearColor(0,0,0,0),V.clear(V.DEPTH_BUFFER_BIT),V.clear(V.STENCIL_BUFFER_BIT),V.clear(V.COLOR_BUFFER_BIT)),this._.texture.id=e,V.viewport(0,0,this.width,this.height),this._.texture.use();var d=[m/t,h/r,l[0]/t,l[1]/r],g={};return g.trans=d,this._.autoCropShader.uniforms(g),this._.autoCropShader.drawRect(),this.m_small_canvas_difference=!0,this}function n(e,t,r,i,a,s,n){var c=[];if(this._.isInitialized&&i==this.width&&a==this.height){var u=s?{pos:{x:s.min[0],y:s.min[1]},width:s.max[0]-s.min[0],height:s.max[1]-s.min[1]}:{pos:{x:0,y:0},width:i||this.width,height:a||this.height},l={x:Math.floor(u.pos.x),y:Math.floor(u.pos.y)},m=Math.ceil(u.width),h=Math.ceil(u.height);V.viewport(l.x,(a||this.height)-l.y-h,m,h),c=[m/(i||this.width),h/(a||this.height),l.x/(i||this.width),l.y/(a||this.height)]}else o.call(this,i,a,!0),V.viewport(0,0,i||this.width,a||this.height),c=[1,1,0,0];this._.texture.id=e,V.bindFramebuffer(V.FRAMEBUFFER,null),V.activeTexture(V.TEXTURE1),V.bindTexture(V.TEXTURE_2D,t),V.activeTexture(V.TEXTURE2),V.bindTexture(V.TEXTURE_2D,r),this._.texture.use();var _={inputImageTexture:0,blendTexture:2,alphaTexture:1},f={};return f.trans=c,f.opacity=n,this._.areaBlendShader.uniforms(f),this._.areaBlendShader.textures(_),this._.areaBlendShader.drawBlend(),this.m_small_canvas_difference=!0,this}function c(e,t,r,i,a,s){var n=[];if(this._.isInitialized&&i==this.width&&a==this.height){var c=s?{pos:{x:s.min[0],y:s.min[1]},width:s.max[0]-s.min[0],height:s.max[1]-s.min[1]}:{pos:{x:0,y:0},width:i||this.width,height:a||this.height},u={x:Math.floor(c.pos.x),y:Math.floor(c.pos.y)},l=Math.ceil(c.width),m=Math.ceil(c.height);V.viewport(u.x,(a||this.height)-u.y-m,l,m),n=[l/(i||this.width),m/(a||this.height),u.x/(i||this.width),u.y/(a||this.height)]}else o.call(this,i,a,!0),V.viewport(0,0,i||this.width,a||this.height),n=[1,1,0,0];this._.texture.id=e,V.bindFramebuffer(V.FRAMEBUFFER,null),V.activeTexture(V.TEXTURE1),V.bindTexture(V.TEXTURE_2D,t),this._.texture.use();var h={inputImageTexture:0,reshapeMap:1};this._.areaReshapeShader.textures(h);var _={};return _.stress=r,_.cal=n,this._.areaReshapeShader.uniforms(_),this._.areaReshapeShader.drawBlend(),this.m_small_canvas_difference=!0,this}function u(e,t,r,i,a){this._.isInitialized&&r==this.width&&i==this.height||o.call(this,r,i,!0),V.viewport(0,0,r||this.width,i||this.height),V.bindFramebuffer(V.FRAMEBUFFER,null),this._.texture.id=e,this._.texture.use(),V.activeTexture(V.TEXTURE1),V.bindTexture(V.TEXTURE_2D,t);var s={srcTexture:0,resultTexture:1},n={};return n.opacity=a/100,this._.cloneShader.uniforms(n),this._.cloneShader.textures(s),this._.cloneShader.drawBlend(),this.m_small_canvas_difference=!0,this}function l(e,t,r,i){for(var a=Math.PI,s=[1,0,0,1],n=t,c=r,u=0;u<i.length;++u){var l=i[u].script;if("LR"==l){s=[s[0]*Math.cos(a/2)+s[2]*-Math.sin(a/2),s[1]*Math.cos(a/2)+s[3]*-Math.sin(a/2),s[0]*Math.sin(a/2)+s[2]*Math.cos(a/2),s[1]*Math.sin(a/2)+s[3]*Math.cos(a/2)];var m=n;n=c,c=m}else if("RR"==l){s=[s[0]*Math.cos(-a/2)+s[2]*-Math.sin(-a/2),s[1]*Math.cos(-a/2)+s[3]*-Math.sin(-a/2),s[0]*Math.sin(-a/2)+s[2]*Math.cos(-a/2),s[1]*Math.sin(-a/2)+s[3]*Math.cos(-a/2)];m=n;n=c,c=m}else if("HF"==l){s=[-1*s[0],-1*s[1],s[2],s[3]]}else if("VF"==l){s=[s[0],s[1],-1*s[2],-1*s[3]]}}this._.isInitialized&&n==this.width&&c==this.height||o.call(this,n,c,!0),V.viewport(0,0,this.width,this.height),V.bindFramebuffer(V.FRAMEBUFFER,null),this._.texture.id=e,this._.texture.use();var h={inputImageTexture:0},_={};return _.trans=s,this._.rotationShader.uniforms(_),this._.rotationShader.textures(h),this._.rotationShader.drawBlend(),this.m_small_canvas_difference=!0,this}function m(e,t,r,i,a){this._.isInitialized&&t==this.width&&r==this.height||o.call(this,t,r,!0),this._.texture.id=e,V.bindFramebuffer(V.FRAMEBUFFER,null);var s=(r-i)/r;this._.texture.use();var n={inputImageTexture:0},c={};return c.border=s,c.color=[a[0]/255,a[1]/255,a[2]/255],V.viewport(0,0,t||this.width,r||this.height),this._.polaroidShader.uniforms(c),this._.polaroidShader.textures(n),this._.polaroidShader.drawBlend(),this.m_small_canvas_difference=!0,this}function h(){return this.m_small_canvas_difference}function _(){this.m_small_canvas_difference=!1}function f(e,t,r,o){(r||this._.texture).use(),this._.spareTexture.drawTo((function(){e.uniforms(t).drawRect()})),this._.spareTexture.swapWith(o||this._.texture)}function d(e){return e.parentNode.insertBefore(this,e),e.parentNode.removeChild(e),this}function g(){var e=new Z(this._.texture.width,this._.texture.height,V.RGBA,V.UNSIGNED_BYTE);return this._.texture.use(),e.drawTo((function(){W.getDefaultShader().drawRect()})),t(e)}function v(){var e=this._.texture.width,t=this._.texture.height,r=new Uint8Array(4*e*t);return this._.texture.drawTo((function(){V.readPixels(0,0,e,t,V.RGBA,V.UNSIGNED_BYTE,r)})),r}function x(e){return function(){return V=this._.gl,e.apply(this,arguments)}}function p(e,t,r,o,i,a,s,n){var c,u,l=o-a,m=n-a,h=(u=r-i)*m-(c=s-i)*l;return[r-e+(c=((i=e-r+i-s)*m-c*(a=t-o+a-n))/h)*r,o-t+c*o,c,s-e+(u=(u*a-i*l)/h)*s,n-t+u*n,u,e,t,1]}function b(e){var t=e[0],r=e[1],o=e[2],i=e[3],a=e[4],s=e[5],n=e[6],c=e[7],u=t*a*(e=e[8])-t*s*c-r*i*e+r*s*n+o*i*c-o*a*n;return[(a*e-s*c)/u,(o*c-r*e)/u,(r*s-o*a)/u,(s*n-i*e)/u,(t*e-o*n)/u,(o*i-t*s)/u,(i*c-a*n)/u,(r*n-t*c)/u,(t*a-r*i)/u]}function y(e){var t=e.length;this.xa=[],this.ya=[],this.u=[],this.y2=[],e.sort((function(e,t){return e[0]-t[0]}));for(var r=0;r<t;r++)this.xa.push(e[r][0]),this.ya.push(e[r][1]);for(this.u[0]=0,this.y2[0]=0,r=1;r<t-1;++r){e=this.xa[r+1]-this.xa[r-1];var o=(this.xa[r]-this.xa[r-1])/e,i=o*this.y2[r-1]+2;this.y2[r]=(o-1)/i,this.u[r]=(6*((this.ya[r+1]-this.ya[r])/(this.xa[r+1]-this.xa[r])-(this.ya[r]-this.ya[r-1])/(this.xa[r]-this.xa[r-1]))/e-o*this.u[r-1])/i}for(this.y2[t-1]=0,r=t-2;0<=r;--r)this.y2[r]=this.y2[r]*this.y2[r+1]+this.u[r]}function w(e,t){return new W(null,e+"uniform sampler2D texture;uniform vec2 texSize;varying vec2 texCoord;void main(){vec2 coord=texCoord*texSize;"+t+"gl_FragColor=texture2D(texture,coord/texSize);vec2 clampedCoord=clamp(coord,vec2(0.0),texSize);if (coord!=clampedCoord){gl_FragColor.a*=max(0.0,1.0-length(coord-clampedCoord));}}")}function T(t,r){return V.brightnessContrast=V.brightnessContrast||new W(null,"uniform sampler2D texture;uniform float brightness;uniform float contrast;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);color.rgb+=brightness;if (contrast>0.0){color.rgb=(color.rgb-0.5)/(1.0-contrast)+0.5;}else{color.rgb=(color.rgb-0.5)*(1.0+contrast)+0.5;}gl_FragColor=color;}"),f.call(this,V.brightnessContrast,{brightness:e(-1,t,1),contrast:e(-1,r,1)}),this}function C(t){t=new y(t);for(var r=[],o=0;256>o;o++)r.push(e(0,Math.floor(256*t.interpolate(o/255)),255));return r}function S(e,t,r){e=C(e),1==arguments.length?t=r=e:(t=C(t),r=C(r));for(var o=[],i=0;256>i;i++)o.splice(o.length,0,e[i],t[i],r[i],255);return this._.extraTexture.initFromBytes(256,1,o),this._.extraTexture.use(1),V.curves=V.curves||new W(null,"uniform sampler2D texture;uniform sampler2D map;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);color.r=texture2D(map,vec2(color.r)).r;color.g=texture2D(map,vec2(color.g)).g;color.b=texture2D(map,vec2(color.b)).b;gl_FragColor=color;}"),V.curves.textures({map:1}),f.call(this,V.curves,{}),this}function E(e){V.denoise=V.denoise||new W(null,"uniform sampler2D texture;uniform float exponent;uniform float strength;uniform vec2 texSize;varying vec2 texCoord;void main(){vec4 center=texture2D(texture,texCoord);vec4 color=vec4(0.0);float total=0.0;for(float x=-4.0;x<=4.0;x+=1.0){for(float y=-4.0;y<=4.0;y+=1.0){vec4 sample=texture2D(texture,texCoord+vec2(x,y)/texSize);float weight=1.0-abs(dot(sample.rgb-center.rgb,vec3(0.25)));weight=pow(weight,exponent);color+=sample*weight;total+=weight;}}gl_FragColor=color/total;}");for(var t=0;2>t;t++)f.call(this,V.denoise,{exponent:Math.max(0,e),texSize:[this.width,this.height]});return this}function z(t,r){return V.hueSaturation=V.hueSaturation||new W(null,"uniform sampler2D texture;uniform float hue;uniform float saturation;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);float angle=hue*3.14159265;float s=sin(angle),c=cos(angle);vec3 weights=(vec3(2.0*c,-sqrt(3.0)*s-c,sqrt(3.0)*s-c)+1.0)/3.0;float len=length(color.rgb);color.rgb=vec3(dot(color.rgb,weights.xyz),dot(color.rgb,weights.zxy),dot(color.rgb,weights.yzx));float average=(color.r+color.g+color.b)/3.0;if (saturation>0.0){color.rgb+=(average-color.rgb)*(1.0-1.0/(1.001-saturation));}else{color.rgb+=(average-color.rgb)*(-saturation);}gl_FragColor=color;}"),f.call(this,V.hueSaturation,{hue:e(-1,t,1),saturation:e(-1,r,1)}),this}function R(t){return V.noise=V.noise||new W(null,"uniform sampler2D texture;uniform float amount;varying vec2 texCoord;float rand(vec2 co){return fract(sin(dot(co.xy,vec2(12.9898,78.233)))*43758.5453);}void main(){vec4 color=texture2D(texture,texCoord);float diff=(rand(texCoord)-0.5)*amount;color.r+=diff;color.g+=diff;color.b+=diff;gl_FragColor=color;}"),f.call(this,V.noise,{amount:e(0,t,1)}),this}function M(t){return V.sepia=V.sepia||new W(null,"uniform sampler2D texture;uniform float amount;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);float r=color.r;float g=color.g;float b=color.b;color.r=min(1.0,(r*(1.0-(0.607*amount)))+(g*(0.769*amount))+(b*(0.189*amount)));color.g=min(1.0,(r*0.349*amount)+(g*(1.0-(0.314*amount)))+(b*0.168*amount));color.b=min(1.0,(r*0.272*amount)+(g*0.534*amount)+(b*(1.0-(0.869*amount))));gl_FragColor=color;}"),f.call(this,V.sepia,{amount:e(0,t,1)}),this}function A(e,t){return V.unsharpMask=V.unsharpMask||new W(null,"uniform sampler2D blurredTexture;uniform sampler2D originalTexture;uniform float strength;uniform float threshold;varying vec2 texCoord;void main(){vec4 blurred=texture2D(blurredTexture,texCoord);vec4 original=texture2D(originalTexture,texCoord);gl_FragColor=mix(blurred,original,1.0+strength);}"),this._.extraTexture.ensureFormat(this._.texture),this._.texture.use(),this._.extraTexture.drawTo((function(){W.getDefaultShader().drawRect()})),this._.extraTexture.use(1),this.triangleBlur(e),V.unsharpMask.textures({originalTexture:1}),f.call(this,V.unsharpMask,{strength:t}),this._.extraTexture.unuse(1),this}function D(t){return V.vibrance=V.vibrance||new W(null,"uniform sampler2D texture;uniform float amount;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);float average=(color.r+color.g+color.b)/3.0;float mx=max(color.r,max(color.g,color.b));float amt=(mx-average)*(-amount*3.0);color.rgb=mix(color.rgb,vec3(mx),amt);gl_FragColor=color;}"),f.call(this,V.vibrance,{amount:e(-1,t,1)}),this}function k(t,r){return V.vignette=V.vignette||new W(null,"uniform sampler2D texture;uniform float size;uniform float amount;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);float dist=distance(texCoord,vec2(0.5,0.5));color.rgb*=smoothstep(0.8,size*0.799,dist*(amount+size));gl_FragColor=color;}"),f.call(this,V.vignette,{size:e(0,t,1),amount:e(0,r,1)}),this}function F(t,r,o){V.lensBlurPrePass=V.lensBlurPrePass||new W(null,"uniform sampler2D texture;uniform float power;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);color=pow(color,vec4(power));gl_FragColor=vec4(color);}");var i="uniform sampler2D texture0;uniform sampler2D texture1;uniform vec2 delta0;uniform vec2 delta1;uniform float power;varying vec2 texCoord;"+J+"vec4 sample(vec2 delta){float offset=random(vec3(delta,151.7182),0.0);vec4 color=vec4(0.0);float total=0.0;for(float t=0.0;t<=30.0;t++){float percent=(t+offset)/30.0;color+=texture2D(texture0,texCoord+delta*percent);total+=1.0;}return color/total;}";V.lensBlur0=V.lensBlur0||new W(null,i+"void main(){gl_FragColor=sample(delta0);}"),V.lensBlur1=V.lensBlur1||new W(null,i+"void main(){gl_FragColor=(sample(delta0)+sample(delta1))*0.5;}"),V.lensBlur2=V.lensBlur2||new W(null,i+"void main(){vec4 color=(sample(delta0)+2.0*texture2D(texture1,texCoord))/3.0;gl_FragColor=pow(color,vec4(power));}").textures({texture1:1});i=[];for(var a=0;3>a;a++){var s=o+2*a*Math.PI/3;i.push([t*Math.sin(s)/this.width,t*Math.cos(s)/this.height])}return t=Math.pow(10,e(-1,r,1)),f.call(this,V.lensBlurPrePass,{power:t}),this._.extraTexture.ensureFormat(this._.texture),f.call(this,V.lensBlur0,{delta0:i[0]},this._.texture,this._.extraTexture),f.call(this,V.lensBlur1,{delta0:i[1],delta1:i[2]},this._.extraTexture,this._.extraTexture),f.call(this,V.lensBlur0,{delta0:i[1]}),this._.extraTexture.use(1),f.call(this,V.lensBlur2,{power:1/t,delta0:i[2]}),this}function I(e,t,r,o,i,a){V.tiltShift=V.tiltShift||new W(null,"uniform sampler2D texture;uniform float blurRadius;uniform float gradientRadius;uniform vec2 start;uniform vec2 end;uniform vec2 delta;uniform vec2 texSize;varying vec2 texCoord;"+J+"void main(){vec4 color=vec4(0.0);float total=0.0;float offset=random(vec3(12.9898,78.233,151.7182),0.0);vec2 normal=normalize(vec2(start.y-end.y,end.x-start.x));float radius=smoothstep(0.0,1.0,abs(dot(texCoord*texSize-start,normal))/gradientRadius)*blurRadius;for(float t=-30.0;t<=30.0;t++){float percent=(t+offset-0.5)/30.0;float weight=1.0-abs(percent);vec4 sample=texture2D(texture,texCoord+delta/texSize*percent*radius);sample.rgb*=sample.a;color+=sample*weight;total+=weight;}gl_FragColor=color/total;gl_FragColor.rgb/=gl_FragColor.a+0.00001;}");var s=r-e,n=o-t,c=Math.sqrt(s*s+n*n);return f.call(this,V.tiltShift,{blurRadius:i,gradientRadius:a,start:[e,t],end:[r,o],delta:[s/c,n/c],texSize:[this.width,this.height]}),f.call(this,V.tiltShift,{blurRadius:i,gradientRadius:a,start:[e,t],end:[r,o],delta:[-n/c,s/c],texSize:[this.width,this.height]}),this}function P(e){return V.triangleBlur=V.triangleBlur||new W(null,"uniform sampler2D texture;uniform vec2 delta;varying vec2 texCoord;"+J+"void main(){vec4 color=vec4(0.0);float total=0.0;float offset=random(vec3(12.9898,78.233,151.7182),0.0);for(float t=-30.0;t<=30.0;t++){float percent=(t+offset-0.5)/30.0;float weight=1.0-abs(percent);vec4 sample=texture2D(texture,texCoord+delta*percent);sample.rgb*=sample.a;color+=sample*weight;total+=weight;}gl_FragColor=color/total;gl_FragColor.rgb/=gl_FragColor.a+0.00001;}"),f.call(this,V.triangleBlur,{delta:[e/this.width,0]}),f.call(this,V.triangleBlur,{delta:[0,e/this.height]}),this}function B(e,t,r){return V.zoomBlur=V.zoomBlur||new W(null,"uniform sampler2D texture;uniform vec2 center;uniform float strength;uniform vec2 texSize;varying vec2 texCoord;"+J+"void main(){vec4 color=vec4(0.0);float total=0.0;vec2 toCenter=center-texCoord*texSize;float offset=random(vec3(12.9898,78.233,151.7182),0.0);for(float t=0.0;t<=40.0;t++){float percent=(t+offset)/40.0;float weight=4.0*(percent-percent*percent);vec4 sample=texture2D(texture,texCoord+toCenter*percent*strength/texSize);sample.rgb*=sample.a;color+=sample*weight;total+=weight;}gl_FragColor=color/total;gl_FragColor.rgb/=gl_FragColor.a+0.00001;}"),f.call(this,V.zoomBlur,{center:[e,t],strength:r,texSize:[this.width,this.height]}),this}function U(e,t,r,o){return V.colorHalftone=V.colorHalftone||new W(null,"uniform sampler2D texture;uniform vec2 center;uniform float angle;uniform float scale;uniform vec2 texSize;varying vec2 texCoord;float pattern(float angle){float s=sin(angle),c=cos(angle);vec2 tex=texCoord*texSize-center;vec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;return(sin(point.x)*sin(point.y))*4.0;}void main(){vec4 color=texture2D(texture,texCoord);vec3 cmy=1.0-color.rgb;float k=min(cmy.x,min(cmy.y,cmy.z));cmy=(cmy-k)/(1.0-k);cmy=clamp(cmy*10.0-3.0+vec3(pattern(angle+0.26179),pattern(angle+1.30899),pattern(angle)),0.0,1.0);k=clamp(k*10.0-5.0+pattern(angle+0.78539),0.0,1.0);gl_FragColor=vec4(1.0-cmy-k,color.a);}"),f.call(this,V.colorHalftone,{center:[e,t],angle:r,scale:Math.PI/o,texSize:[this.width,this.height]}),this}function L(e,t,r,o){return V.dotScreen=V.dotScreen||new W(null,"uniform sampler2D texture;uniform vec2 center;uniform float angle;uniform float scale;uniform vec2 texSize;varying vec2 texCoord;float pattern(){float s=sin(angle),c=cos(angle);vec2 tex=texCoord*texSize-center;vec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;return(sin(point.x)*sin(point.y))*4.0;}void main(){vec4 color=texture2D(texture,texCoord);float average=(color.r+color.g+color.b)/3.0;gl_FragColor=vec4(vec3(average*10.0-5.0+pattern()),color.a);}"),f.call(this,V.dotScreen,{center:[e,t],angle:r,scale:Math.PI/o,texSize:[this.width,this.height]}),this}function G(e){return V.edgeWork1=V.edgeWork1||new W(null,"uniform sampler2D texture;uniform vec2 delta;varying vec2 texCoord;"+J+"void main(){vec2 color=vec2(0.0);vec2 total=vec2(0.0);float offset=random(vec3(12.9898,78.233,151.7182),0.0);for(float t=-30.0;t<=30.0;t++){float percent=(t+offset-0.5)/30.0;float weight=1.0-abs(percent);vec3 sample=texture2D(texture,texCoord+delta*percent).rgb;float average=(sample.r+sample.g+sample.b)/3.0;color.x+=average*weight;total.x+=weight;if (abs(t)<15.0){weight=weight*2.0-1.0;color.y+=average*weight;total.y+=weight;}}gl_FragColor=vec4(color/total,0.0,1.0);}"),V.edgeWork2=V.edgeWork2||new W(null,"uniform sampler2D texture;uniform vec2 delta;varying vec2 texCoord;"+J+"void main(){vec2 color=vec2(0.0);vec2 total=vec2(0.0);float offset=random(vec3(12.9898,78.233,151.7182),0.0);for(float t=-30.0;t<=30.0;t++){float percent=(t+offset-0.5)/30.0;float weight=1.0-abs(percent);vec2 sample=texture2D(texture,texCoord+delta*percent).xy;color.x+=sample.x*weight;total.x+=weight;if (abs(t)<15.0){weight=weight*2.0-1.0;color.y+=sample.y*weight;total.y+=weight;}}float c=clamp(10000.0*(color.y/total.y-color.x/total.x)+0.5,0.0,1.0);gl_FragColor=vec4(c,c,c,1.0);}"),f.call(this,V.edgeWork1,{delta:[e/this.width,0]}),f.call(this,V.edgeWork2,{delta:[0,e/this.height]}),this}function N(e,t,r){return V.hexagonalPixelate=V.hexagonalPixelate||new W(null,"uniform sampler2D texture;uniform vec2 center;uniform float scale;uniform vec2 texSize;varying vec2 texCoord;void main(){vec2 tex=(texCoord*texSize-center)/scale;tex.y/=0.866025404;tex.x-=tex.y*0.5;vec2 a;if (tex.x+tex.y-floor(tex.x)-floor(tex.y)<1.0)a=vec2(floor(tex.x),floor(tex.y));else a=vec2(ceil(tex.x),ceil(tex.y));vec2 b=vec2(ceil(tex.x),floor(tex.y));vec2 c=vec2(floor(tex.x),ceil(tex.y));vec3 TEX=vec3(tex.x,tex.y,1.0-tex.x-tex.y);vec3 A=vec3(a.x,a.y,1.0-a.x-a.y);vec3 B=vec3(b.x,b.y,1.0-b.x-b.y);vec3 C=vec3(c.x,c.y,1.0-c.x-c.y);float alen=length(TEX-A);float blen=length(TEX-B);float clen=length(TEX-C);vec2 choice;if (alen<blen){if (alen<clen)choice=a;else choice=c;}else{if (blen<clen)choice=b;else choice=c;}choice.x+=choice.y*0.5;choice.y*=0.866025404;choice*=scale/texSize;gl_FragColor=texture2D(texture,choice+center/texSize);}"),f.call(this,V.hexagonalPixelate,{center:[e,t],scale:r,texSize:[this.width,this.height]}),this}function O(e){return V.ink=V.ink||new W(null,"uniform sampler2D texture;uniform float strength;uniform vec2 texSize;varying vec2 texCoord;void main(){vec2 dx=vec2(1.0/texSize.x,0.0);vec2 dy=vec2(0.0,1.0/texSize.y);vec4 color=texture2D(texture,texCoord);float bigTotal=0.0;float smallTotal=0.0;vec3 bigAverage=vec3(0.0);vec3 smallAverage=vec3(0.0);for(float x=-2.0;x<=2.0;x+=1.0){for(float y=-2.0;y<=2.0;y+=1.0){vec3 sample=texture2D(texture,texCoord+dx*x+dy*y).rgb;bigAverage+=sample;bigTotal+=1.0;if (abs(x)+abs(y)<2.0){smallAverage+=sample;smallTotal+=1.0;}}}vec3 edge=max(vec3(0.0),bigAverage/bigTotal-smallAverage/smallTotal);gl_FragColor=vec4(color.rgb-dot(edge,edge)*strength*100000.0,color.a);}"),f.call(this,V.ink,{strength:e*e*e*e*e,texSize:[this.width,this.height]}),this}function q(t,r,o,i){return V.bulgePinch=V.bulgePinch||w("uniform float radius;uniform float strength;uniform vec2 center;","coord-=center;float distance=length(coord);if (distance<radius){float percent=distance/radius;if (strength>0.0){coord*=mix(1.0,smoothstep(0.0,radius/distance,percent),strength*0.75);}else{coord*=mix(1.0,pow(percent,1.0+strength*0.75)*radius/distance,1.0-percent);}}coord+=center;"),f.call(this,V.bulgePinch,{radius:o,strength:e(-1,i,1),center:[t,r],texSize:[this.width,this.height]}),this}function X(e,t,r){if(V.matrixWarp=V.matrixWarp||w("uniform mat3 matrix;uniform bool useTextureSpace;","if (useTextureSpace)coord=coord/texSize*2.0-1.0;vec3 warp=matrix*vec3(coord,1.0);coord=warp.xy/warp.z;if (useTextureSpace)coord=(coord*0.5+0.5)*texSize;"),4==(e=Array.prototype.concat.apply([],e)).length)e=[e[0],e[1],0,e[2],e[3],0,0,0,1];else if(9!=e.length)throw"can only warp with 2x2 or 3x3 matrix";return f.call(this,V.matrixWarp,{matrix:t?b(e):e,texSize:[this.width,this.height],useTextureSpace:0|r}),this}function j(e,t){var r=p.apply(null,t),o=p.apply(null,e);r=b(r);return this.matrixWarp([r[0]*o[0]+r[1]*o[3]+r[2]*o[6],r[0]*o[1]+r[1]*o[4]+r[2]*o[7],r[0]*o[2]+r[1]*o[5]+r[2]*o[8],r[3]*o[0]+r[4]*o[3]+r[5]*o[6],r[3]*o[1]+r[4]*o[4]+r[5]*o[7],r[3]*o[2]+r[4]*o[5]+r[5]*o[8],r[6]*o[0]+r[7]*o[3]+r[8]*o[6],r[6]*o[1]+r[7]*o[4]+r[8]*o[7],r[6]*o[2]+r[7]*o[5]+r[8]*o[8]])}function Y(e,t,r,o){return V.swirl=V.swirl||w("uniform float radius;uniform float angle;uniform vec2 center;","coord-=center;float distance=length(coord);if (distance<radius){float percent=(radius-distance)/radius;float theta=percent*percent*angle;float s=sin(theta);float c=cos(theta);coord=vec2(coord.x*c-coord.y*s,coord.x*s+coord.y*c);}coord+=center;"),f.call(this,V.swirl,{radius:r,center:[e,t],angle:o,texSize:[this.width,this.height]}),this}var V,H={};!function(){function e(){}try{var t=document.createElement("canvas").getContext("experimental-webgl",{premultipliedAlpha:!0,preserveDrawingBuffer:!0,alpha:!0})}catch(e){}if(t&&-1===t.getSupportedExtensions().indexOf("OES_texture_float_linear")&&function(e){if(!e.getExtension("OES_texture_float"))return!1;var t=e.createFramebuffer(),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,null),e.bindFramebuffer(e.FRAMEBUFFER,t),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0),t=e.createTexture(),e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,2,2,0,e.RGBA,e.FLOAT,new Float32Array([2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])),r=e.createProgram();var o=e.createShader(e.VERTEX_SHADER),i=e.createShader(e.FRAGMENT_SHADER);return e.shaderSource(o,"attribute vec2 vertex;void main(){gl_Position=vec4(vertex,0.0,1.0);}"),e.shaderSource(i,"uniform sampler2D texture;void main(){gl_FragColor=texture2D(texture,vec2(0.5));}"),e.compileShader(o),e.compileShader(i),e.attachShader(r,o),e.attachShader(r,i),e.linkProgram(r),o=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,o),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0]),e.STREAM_DRAW),e.enableVertexAttribArray(0),e.vertexAttribPointer(0,2,e.FLOAT,!1,0,0),o=new Uint8Array(4),e.useProgram(r),e.viewport(0,0,1,1),e.bindTexture(e.TEXTURE_2D,t),e.drawArrays(e.POINTS,0,1),e.readPixels(0,0,1,1,e.RGBA,e.UNSIGNED_BYTE,o),127===o[0]||128===o[0]}(t)){var r=WebGLRenderingContext.prototype.getExtension,o=WebGLRenderingContext.prototype.getSupportedExtensions;WebGLRenderingContext.prototype.getExtension=function(t){return"OES_texture_float_linear"===t?(void 0===this.$OES_texture_float_linear$&&Object.defineProperty(this,"$OES_texture_float_linear$",{enumerable:!1,configurable:!1,writable:!1,value:new e}),t=this.$OES_texture_float_linear$):t=r.call(this,t),t},WebGLRenderingContext.prototype.getSupportedExtensions=function(){var e=o.call(this);return-1===e.indexOf("OES_texture_float_linear")&&e.push("OES_texture_float_linear"),e}}}(),H.canvas=function(){var e=document.createElement("canvas");try{V=e.getContext("experimental-webgl",{premultipliedAlpha:!0,preserveDrawingBuffer:!0,alpha:!0})}catch(e){V=null}if(!V)throw"This browser does not support WebGL";return e._={gl:V,isInitialized:!1,texture:null,spareTexture:null,flippedShader:null,areaBlendShader:null,areaReshapeShader:null,cloneShader:null,rotationShader:null,polaroidShader:null,autoCropShader:null,m_small_canvas_difference:!0},e.resetContext=function(){return null!=this._.gl.engineVertexBuffer&&(this._.gl.engineVertexBuffer=null),null!=this._.gl.texCoordBuffer&&(this._.gl.texCoordBuffer=null),null!=this._.gl.vertexBuffer&&(this._.gl.vertexBuffer=null),this._.isInitialized=!1,this._.texture=null,this._.spareTexture=null,this._.flippedShader=null,this._.areaBlendShader=null,this._.areaReshapeShader=null,this._.cloneShader=null,this._.rotationShader=null,this._.polaroidShader=null,this._.autoCropShader=null,this._.m_small_canvas_difference=!0,!0},e.texture=x(r),e.draw=x(i),e.update=x(a),e.autoCrop=x(s),e.paint=x(n),e.reshape=x(c),e.paintClone=x(u),e.drawRotation=x(l),e.drawPolariod=x(m),e.get_small_canvas_different=x(h),e.set_small_canvas_noDiferent=x(_),e.replace=x(d),e.contents=x(g),e.getPixelArray=x(v),e.brightnessContrast=x(T),e.hexagonalPixelate=x(N),e.hueSaturation=x(z),e.colorHalftone=x(U),e.triangleBlur=x(P),e.unsharpMask=x(A),e.perspective=x(j),e.matrixWarp=x(X),e.bulgePinch=x(q),e.tiltShift=x(I),e.dotScreen=x(L),e.edgeWork=x(G),e.lensBlur=x(F),e.zoomBlur=x(B),e.noise=x(R),e.denoise=x(E),e.curves=x(S),e.swirl=x(Y),e.ink=x(O),e.vignette=x(k),e.vibrance=x(D),e.sepia=x(M),e},H.splineInterpolate=C;var W=function(){function e(e,t){var r=V.createShader(e);if(V.shaderSource(r,t),V.compileShader(r),!V.getShaderParameter(r,V.COMPILE_STATUS))throw"compile error: "+V.getShaderInfoLog(r);return r}function t(t,i){if(this.texCoordAttribute=this.vertexAttribute=null,this.program=V.createProgram(),t=t||r,i="precision highp float;"+(i=i||o),V.attachShader(this.program,e(V.VERTEX_SHADER,t)),V.attachShader(this.program,e(V.FRAGMENT_SHADER,i)),V.linkProgram(this.program),!V.getProgramParameter(this.program,V.LINK_STATUS))throw"link error: "+V.getProgramInfoLog(this.program)}var r="attribute vec2 vertex;attribute vec2 _texCoord;varying vec2 texCoord;void main(){texCoord=_texCoord;gl_Position=vec4(vertex*2.0-1.0,0.0,1.0);}",o="uniform sampler2D texture;varying vec2 texCoord;void main(){gl_FragColor=texture2D(texture,texCoord);}";return t.prototype.destroy=function(){V.deleteProgram(this.program),this.program=null},t.prototype.uniforms=function(e){for(var t in V.useProgram(this.program),e)if(e.hasOwnProperty(t)){var r=V.getUniformLocation(this.program,t);if(null!==r){var o=e[t];if("[object Array]"==Object.prototype.toString.call(o))switch(o.length){case 1:V.uniform1fv(r,new Float32Array(o));break;case 2:V.uniform2fv(r,new Float32Array(o));break;case 3:V.uniform3fv(r,new Float32Array(o));break;case 4:V.uniform4fv(r,new Float32Array(o));break;case 9:V.uniformMatrix3fv(r,!1,new Float32Array(o));break;case 16:V.uniformMatrix4fv(r,!1,new Float32Array(o));break;default:throw"dont't know how to load uniform \""+t+'" of length '+o.length}else{if("[object Number]"!=Object.prototype.toString.call(o))throw'attempted to set uniform "'+t+'" to invalid value '+(o||"undefined").toString();V.uniform1f(r,o)}}}return this},t.prototype.textures=function(e){for(var t in V.useProgram(this.program),e)e.hasOwnProperty(t)&&V.uniform1i(V.getUniformLocation(this.program,t),e[t]);return this},t.prototype.drawRect=function(e,t,r,o){var i=V.getParameter(V.VIEWPORT);t=void 0!==t?(t-i[1])/i[3]:0,e=void 0!==e?(e-i[0])/i[2]:0,r=void 0!==r?(r-i[0])/i[2]:1,o=void 0!==o?(o-i[1])/i[3]:1,null==V.vertexBuffer&&(V.vertexBuffer=V.createBuffer()),V.bindBuffer(V.ARRAY_BUFFER,V.vertexBuffer),V.bufferData(V.ARRAY_BUFFER,new Float32Array([e,t,e,o,r,t,r,o]),V.STATIC_DRAW),null==V.texCoordBuffer&&(V.texCoordBuffer=V.createBuffer()),V.bindBuffer(V.ARRAY_BUFFER,V.texCoordBuffer),V.bufferData(V.ARRAY_BUFFER,new Float32Array([e,t,e,o,r,t,r,o]),V.STATIC_DRAW),null==this.vertexAttribute&&(this.vertexAttribute=V.getAttribLocation(this.program,"vertex"),V.enableVertexAttribArray(this.vertexAttribute)),null==this.texCoordAttribute&&(this.texCoordAttribute=V.getAttribLocation(this.program,"_texCoord"),V.enableVertexAttribArray(this.texCoordAttribute)),V.useProgram(this.program),V.bindBuffer(V.ARRAY_BUFFER,V.vertexBuffer),V.vertexAttribPointer(this.vertexAttribute,2,V.FLOAT,!1,0,0),V.bindBuffer(V.ARRAY_BUFFER,V.texCoordBuffer),V.vertexAttribPointer(this.texCoordAttribute,2,V.FLOAT,!1,0,0),V.drawArrays(V.TRIANGLE_STRIP,0,4)},t.prototype.drawBlend=function(){V.useProgram(this.program),null==V.vertexBuffer&&(V.vertexBuffer=V.createBuffer()),V.bindBuffer(V.ARRAY_BUFFER,V.vertexBuffer),V.bufferData(V.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,1,1,-1,1]),V.STATIC_DRAW),this.vertexAttribute=V.getAttribLocation(this.program,"vPosition"),V.enableVertexAttribArray(this.vertexAttribute),V.vertexAttribPointer(this.vertexAttribute,2,V.FLOAT,!1,0,new Float32Array([-1,-1,1,-1,1,1,-1,1])),V.drawArrays(V.TRIANGLE_FAN,0,4)},t.getDefaultShader=function(){return V.defaultShader=V.defaultShader||new t,V.defaultShader},t}();y.prototype.interpolate=function(e){for(var t=0,r=this.ya.length-1;1<r-t;){var o=r+t>>1;this.xa[o]>e?r=o:t=o}o=this.xa[r]-this.xa[t];var i=(this.xa[r]-e)/o;return e=(e-this.xa[t])/o,i*this.ya[t]+e*this.ya[r]+((i*i*i-i)*this.y2[t]+(e*e*e-e)*this.y2[r])*o*o/6};var Z=function(){function e(e,t,r,o){this.gl=V,this.id=V.createTexture(),this.width=e,this.height=t,this.format=r,this.type=o,V.bindTexture(V.TEXTURE_2D,this.id),V.texParameteri(V.TEXTURE_2D,V.TEXTURE_MAG_FILTER,V.LINEAR),V.texParameteri(V.TEXTURE_2D,V.TEXTURE_MIN_FILTER,V.LINEAR),V.texParameteri(V.TEXTURE_2D,V.TEXTURE_WRAP_S,V.CLAMP_TO_EDGE),V.texParameteri(V.TEXTURE_2D,V.TEXTURE_WRAP_T,V.CLAMP_TO_EDGE),e&&t&&V.texImage2D(V.TEXTURE_2D,0,this.format,e,t,0,this.format,this.type,null),V.getError()&&console.log("The image you loaded have some problems!")}function t(e){return null==r&&(r=document.createElement("canvas")),r.width=e.width,r.height=e.height,(e=r.getContext("2d")).clearRect(0,0,r.width,r.height),e}e.fromElement=function(t){var r;return(r=t&&t.width&&t.height?new e(t.width,t.height,V.RGBA,V.UNSIGNED_BYTE):new e(0,0,V.RGBA,V.UNSIGNED_BYTE)).loadContentsOf(t),r},e.prototype.loadContentsOf=function(e){this.width=e.width||e.videoWidth,this.height=e.height||e.videoHeight,V.bindTexture(V.TEXTURE_2D,this.id),V.texImage2D(V.TEXTURE_2D,0,this.format,this.format,this.type,e)},e.prototype.loadContentsOfGLTexture=function(e){this.id=e},e.prototype.initFromBytes=function(e,t,r){this.width=e,this.height=t,this.format=V.RGBA,this.type=V.UNSIGNED_BYTE,V.bindTexture(V.TEXTURE_2D,this.id),V.texImage2D(V.TEXTURE_2D,0,V.RGBA,e,t,0,V.RGBA,this.type,new Uint8Array(r))},e.prototype.destroy=function(){V.deleteTexture(this.id),this.id=null},e.prototype.use=function(e){V.activeTexture(V.TEXTURE0+(e||0)),V.bindTexture(V.TEXTURE_2D,this.id)},e.prototype.unuse=function(e){V.activeTexture(V.TEXTURE0+(e||0)),V.bindTexture(V.TEXTURE_2D,null)},e.prototype.ensureFormat=function(e,t,r,o){if(1==arguments.length){var i=arguments[0];e=i.width,t=i.height,r=i.format,o=i.type}e==this.width&&t==this.height&&r==this.format&&o==this.type||(this.width=e,this.height=t,this.format=r,this.type=o,V.bindTexture(V.TEXTURE_2D,this.id),V.texImage2D(V.TEXTURE_2D,0,this.format,e,t,0,this.format,this.type,null))},e.prototype.drawTo=function(e){if(V.framebuffer=V.framebuffer||V.createFramebuffer(),V.bindFramebuffer(V.FRAMEBUFFER,V.framebuffer),V.framebufferTexture2D(V.FRAMEBUFFER,V.COLOR_ATTACHMENT0,V.TEXTURE_2D,this.id,0),V.checkFramebufferStatus(V.FRAMEBUFFER)!==V.FRAMEBUFFER_COMPLETE)throw Error("incomplete framebuffer");V.viewport(0,0,this.width,this.height),e(),V.bindFramebuffer(V.FRAMEBUFFER,null)};var r=null;return e.prototype.fillUsingCanvas=function(e){return e(t(this)),this.format=V.RGBA,this.type=V.UNSIGNED_BYTE,V.bindTexture(V.TEXTURE_2D,this.id),V.texImage2D(V.TEXTURE_2D,0,V.RGBA,V.RGBA,V.UNSIGNED_BYTE,r),this},e.prototype.toImage=function(e){this.use(),W.getDefaultShader().drawRect();var o=4*this.width*this.height,i=new Uint8Array(o),a=t(this),s=a.createImageData(this.width,this.height);V.readPixels(0,0,this.width,this.height,V.RGBA,V.UNSIGNED_BYTE,i);for(var n=0;n<o;n++)s.data[n]=i[n];a.putImageData(s,0,0),e.src=r.toDataURL()},e.prototype.swapWith=function(e){var t;t=e.id,e.id=this.id,this.id=t,t=e.width,e.width=this.width,this.width=t,t=e.height,e.height=this.height,this.height=t,t=e.format,e.format=this.format,this.format=t},e}(),J="float random(vec3 scale,float seed){return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453+seed);}";return H}();e.exports=r},813:function(e,t){var r={onekeybeauty:function(){return"toneMapStart key 6;toneEnhance dark 0.5 0.8 light -0.3 0 blurFactor 0.065 0;toneMapEnd;toneMapStart key 86;structureSharpen iterateTimes 5.6 factor 0 2 relaxation 2 1.23 0.1 strength 59.5 contrast 1.3 darkLight 0.5 0.5;toneMapEnd;toneCurve saturate 1.2;"},brightness:function(e){var t,r,o,i;return e<0?(t=127*-e/100,r=0,o=255,i=255+127*e/100):(t=0,r=127*e/100,o=255-127*e/100,i=255),"curve graph rgb point "+t+" "+r+" point "+o+" "+i+";"},contrast:function(e){return"curve contrast "+e+";"},saturation:function(e){var t=e>1?1+(e-1)/4:e;return"toneCurve saturate "+t+";basicAdjust saturation "+(e>1?t:1)+";"},sharpness:function(e){var t="";e>0?t="toneMapStart key 15;blurSharpen amount "+200*e/150+" radius 0.01;toneMapEnd;":t="toneMapStart key -28;blurSharpen amount "+100*e/150+" radius 0.042;toneMapEnd;";return t},temperature:function(e){var t,r,o;return e<0?(t=255,r=255+52*e/100,o=255+114*e/100):(t=255-93*e/100,r=255-62*e/100,o=255),"curve graph red point 0 0 point "+t+" 255 green point 0 0 point "+r+" 255 blue point 0 0 point "+o+" 255;"},tint:function(e){var t=0,r=0,o=0;return e<0?(t=255+64*e/50,r=255,o=255+64*e/50):(t=255,r=255-58*e/50,o=255),"curve graph red point 0 0 point "+t+" 255 green point 0 0 point "+r+" 255 blue point 0 0 point "+o+" 255;"},exposure:function(e){return"curve exposure "+e+";"},hightlightsShodows:function(e,t){return"toneMapStart key 0;newStructureSharpen radius 0.001 esp 0.001 contrastDarkLight "+e+" "+t+" details 1 preserveDarkLight 0.5 0.5;toneMapEnd;"},hightlights:function(e){return"curve graph rgb point "+e+" 0 point 255 255 ;"},shodows:function(e){return"curve graph rgb point 0 0 point "+(255-e)+" 255 ;"},curve:function(e,t,r,o){return"curve graph red "+e+" green "+t+" blue "+r+" rgb "+o+";"},crop:function(e,t,r,o){return"basicAdjust areaSelective relative position "+e+" "+t+" size "+r+" "+o+";"},tiltShiftCircle:function(e,t,r,o){return"tiltShift aperture "+e+" angleRad 0 measuringScale relative center "+t+" "+r+" ellipse "+o+" "+o+";"},tiltShiftStrip:function(e,t,r,o,i){return"tiltShift aperture "+e+" angleAng "+t+" measuringScale relative center "+r+" "+o+" vector "+i+";"},particles:function(e,t){return"basicAdjust noise "+e+" "+t+";"},vignette:function(e){return"layer vig start;basicAdjust vignetteAdjust 0.2 0.6 color 0 0 0 255 intensity "+e+" round 0;layer vig swap;blend layer vig opacity alpha 100; layer vig end;"},borderShadow:function(e,t,r,o,i,a,s,n,c,u,l){return"specialBorder smallShadow size "+e+" fade "+t+" angle "+r+" distance "+o+" shadowColor "+i+" "+a+" "+s+" backColor "+n+" "+c+" "+u+" "+l+";"},galleryFrame:function(e,t,r,o,i,a,s,n){return"specialBorder smallGallery outSize "+e+" innerSize "+t+" outColor "+r+" "+o+" "+i+" innerColor "+a+" "+s+" "+n+";"},polaroid:function(e,t,r,o,i,a,s,n,c){return"specialBorder smallPolaroid outSize "+e+" innerSize "+t+" roundCorner "+r+" outColor "+o+" "+i+" "+a+" innerColor "+s+" "+n+" "+c+";"},blemishfix:function(e,t,r){return"basicAdjust blemishFix point "+e+" "+t+" radius "+r+";"},smoothing:function(e){return"layer op start;layer src start;layer tmp start;basicAdjust gaussianBlur 25 20;layer tmp swap;blend layer tmp difference 100;basicAdjust colorMatf 1 0 0 0 0 1 0 0 0 0 1 0 0.76245 1.5045 0.2907 0;layer tmp swap;blend layer src opacity layer tmp;layer tmp end;layer src end;layer op swap;blend layer op opacity "+e+";"},wrinkles:function(e){return"layer op start;layer tmp start;blurSharpen amount -100  radius 0.065;layer tmp swap;curve mixColor opacity 0 0 0 255 100;basicAdjust noise 0.9 0.4;curve graph rgb point 0 0 point 12 12;blend layer tmp screen 100;layer tmp end;layer op swap;blend layer op opacity "+e+";"},blush:function(e,t,r,o){return"curve mixColor linearBurn "+e+" "+t+" "+r+" 255 "+o+";curve mixColor difference 1 1 1 255 100;"},highLightBlush:function(e,t,r,o){return"curve mixColor softLight "+e+" "+t+" "+r+" 255 "+(o=o/50*72)+";"},eyeShadow:function(e,t,r,o){return"curve mixColor multiply "+e+" "+t+" "+r+" 255 "+o+";curve mixColor difference 1 1 1 255 100;"},eyeLiner:function(e,t,r,o){return"curve mixColor multiply "+e+" "+t+" "+r+" 255 "+o+";curve mixColor difference 1 1 1 255 100;"},highLightEyeLiner:function(e,t,r,o){return"curve mixColor softLight "+e+" "+t+" "+r+" 255 "+(o=o/100*72)+";"},mascara:function(e){return"basicAdjust marscara "+e+";"},eyeBrowPencil:function(e,t,r,o){return"curve mixColor multiply "+e+" "+t+" "+r+" 255 "+o+";curve mixColor difference 1 1 1 255 100;"},eyeTint:function(e,t,r,o){return"basicAdjust eyeTint "+e+" "+t+" "+r+" "+o+";"},eyePop:function(e){return"basicAdjust eyeBrighten "+e+";"},lipTint:function(e,t,r,o){return"curve mixColor overlay "+e+" "+t+" "+r+" 255 "+o+";curve mixColor difference 1 1 1 255 100;"},teethWhite:function(e){return"basicAdjust teethWhiten "+e+";"},pixelate:function(e){return"basicAdjust mosaic edge "+e+";"},photoBlur:function(e){return"blurSharpen amount -"+e.toString()+" radius 0.1;"},DrawBeauty:function(e,t){t=null!=t&&t;var r,o,i,a,s,n,c,u,l,m,h,_=Fotor.mainCanvas.beautyCanvasEle[0].getContext("2d"),f=Fotor.EngineAction.distanceBetween(e.last_Point,e.canvas_Point);if(e.isEraserMode){n=Math.max(.25*e.brush_Size,1),c=Math.floor(Math.max(Math.ceil(f)/n,1)),l={x:(u={x:e.canvas_Point.x-e.last_Point.x,y:e.canvas_Point.y-e.last_Point.y}).x/c,y:u.y/c},_.save(),m=.5*e.brush_Size/Fotor.mainCanvas.editorCanvasScale,h=1;for(var d=0;d<c;d++)r=e.last_Point.x+l.x*d,o=e.last_Point.y+l.y*d,"magicwand"==e.sampleToolName?((s=_.createRadialGradient(r,o,0,r,o,m)).addColorStop(0,"rgba(0,0,0,1"),s.addColorStop(.99,"rgba(0,0,0,1)"),s.addColorStop(1,"rgba(0,0,0,0)"),_.globalCompositeOperation="destination-out",_.lineJoin=_.lineCap="round",_.fillStyle=s,_.fillRect(r-m,o-m,2*m,2*m)):(a=(i=document.createElement("canvas")).getContext("2d"),i.width=2*m,i.height=2*m,a.save(),a.globalCompositeOperation="source-over",a.drawImage(e.savedOrgImg,r-m,o-m,2*m,2*m,0,0,2*m,2*m),a.restore(),a.save(),a.globalCompositeOperation="destination-out",(s=a.createRadialGradient(m,m,0,m,m,m)).addColorStop(0,"rgba(0,0,0,"+(1-.9*h)+")"),s.addColorStop(.89,"rgba(0,0,0,"+(1-.1*h)+")"),s.addColorStop(1,"rgba(0,0,0,1)"),a.fillStyle=s,a.fillRect(0,0,2*m,2*m),a.restore(),_.globalCompositeOperation="source-over",_.drawImage(i,r-m,o-m,2*m,2*m),i.remove());_.restore()}else{if(n=Math.max(.13*e.brush_Size,1),!t&&f<.8*n)return!1;c=Math.floor(Math.max(Math.ceil(f)/n,1)),l={x:(u={x:e.canvas_Point.x-e.last_Point.x,y:e.canvas_Point.y-e.last_Point.y}).x/c,y:u.y/c},_.save(),m=.5*e.brush_Size*1.15/Fotor.mainCanvas.editorCanvasScale,h=.5;for(d=0;d<c;d++)r=e.last_Point.x+l.x*d,o=e.last_Point.y+l.y*d,"magicwand"==e.sampleToolName?(s=_.createRadialGradient(r,o,0,r,o,m),e.isKeepMode?(s.addColorStop(0,"rgba(0,255,132,1)"),s.addColorStop(.99,"rgba(0,255,132,1)"),s.addColorStop(1,"rgba(0,255,132,0)")):(s.addColorStop(0,"rgba(255,0,54,1)"),s.addColorStop(.99,"rgba(255,0,54,1)"),s.addColorStop(1,"rgba(255,0,54,0)")),_.globalCompositeOperation="source-over"):((s=_.createRadialGradient(r,o,0,r,o,m)).addColorStop(0,"rgba(0,0,0,"+.64*h+")"),s.addColorStop(.2,"rgba(0,0,0,"+.41*h+")"),s.addColorStop(.4,"rgba(0,0,0,"+.24*h+")"),s.addColorStop(.7,"rgba(0,0,0,"+.08*h+")"),s.addColorStop(.83,"rgba(0,0,0,"+.06*h+")"),s.addColorStop(.89,"rgba(0,0,0,"+.008*h+")"),s.addColorStop(1,"rgba(0,0,0,0)"),_.globalCompositeOperation="destination-out"),_.lineJoin=_.lineCap="round",_.fillStyle=s,_.fillRect(r-m,o-m,2*m,2*m);_.restore()}return!0},historyDrawBeauty:function(e,t,r,o){for(var i=0;i<o;i++){var a,s,n,c,u,l,m,h,_,f,d=.5*e.brushPoints[i].size*1.15,g=2*d,v=.5;if("eraser"==e.brushPoints[i].model){d=.5*e.brushPoints[i].size,t.save(),a=e.brushPoints[i].points[0].x,s=e.brushPoints[i].points[0].y,null==r?((u=t.createRadialGradient(a,s,0,a,s,d)).addColorStop(0,"rgba(0,0,0,1"),u.addColorStop(.99,"rgba(0,0,0,1)"),u.addColorStop(1,"rgba(0,0,0,0)"),t.globalCompositeOperation="destination-out",t.lineJoin=t.lineCap="round",t.fillStyle=u,t.fillRect(a-d,s-d,2*d,2*d)):(c=(n=document.createElement("canvas")).getContext("2d"),n.width=2*d,n.height=2*d,v=1,c.save(),c.globalCompositeOperation="source-over",c.drawImage(r,a-d,s-d,2*d,2*d,0,0,2*d,2*d),c.restore(),c.save(),c.globalCompositeOperation="destination-out",(u=c.createRadialGradient(d,d,0,d,d,d)).addColorStop(0,"rgba(0,0,0,"+(1-.9*v)+")"),u.addColorStop(.89,"rgba(0,0,0,"+(1-.1*v)+")"),u.addColorStop(1,"rgba(0,0,0,1)"),c.fillStyle=u,c.fillRect(0,0,2*d,2*d),c.restore(),t.globalCompositeOperation="source-over",t.drawImage(n,a-d,s-d,2*d,2*d),n.remove()),t.restore();for(var x=0;x<e.brushPoints[i].points.length-1;x++){l=Fotor.EngineAction.distanceBetween(e.brushPoints[i].points[x],e.brushPoints[i].points[x+1]),m=Math.max(.3*e.brushPoints[i].size,1),h=Math.floor(Math.max(Math.ceil(l)/m,1)),f={x:(_={x:e.brushPoints[i].points[x+1].x-e.brushPoints[i].points[x].x,y:e.brushPoints[i].points[x+1].y-e.brushPoints[i].points[x].y}).x/h,y:_.y/h},t.save();for(var p=0;p<h;p++)a=e.brushPoints[i].points[x].x+f.x*p,s=e.brushPoints[i].points[x].y+f.y*p,null==r?((u=t.createRadialGradient(a,s,0,a,s,d)).addColorStop(0,"rgba(0,0,0,1"),u.addColorStop(.99,"rgba(0,0,0,1)"),u.addColorStop(1,"rgba(0,0,0,0)"),t.globalCompositeOperation="destination-out",t.lineJoin=t.lineCap="round",t.fillStyle=u,t.fillRect(a-d,s-d,2*d,2*d)):(c=(n=document.createElement("canvas")).getContext("2d"),n.width=2*d,n.height=2*d,v=1,c.save(),c.globalCompositeOperation="source-over",c.drawImage(r,a-d,s-d,2*d,2*d,0,0,2*d,2*d),c.restore(),c.save(),c.globalCompositeOperation="destination-out",(u=c.createRadialGradient(d,d,0,d,d,d)).addColorStop(0,"rgba(0,0,0,"+(1-.9*v)+")"),u.addColorStop(.89,"rgba(0,0,0,"+(1-.1*v)+")"),u.addColorStop(1,"rgba(0,0,0,1)"),c.fillStyle=u,c.fillRect(0,0,2*d,2*d),c.restore(),t.globalCompositeOperation="source-over",t.drawImage(n,a-d,s-d,2*d,2*d),n.remove());t.restore()}}else if("lucency"==e.brushPoints[i].model){t.save(),a=e.brushPoints[i].points[0].x,s=e.brushPoints[i].points[0].y,u=t.createRadialGradient(a,s,0,a,s,d),null==r?(e.brushPoints[i].isKeepMode?(u.addColorStop(0,"rgba(0,255,132,1)"),u.addColorStop(.99,"rgba(0,255,132,1)"),u.addColorStop(1,"rgba(0,255,132,0)")):(u.addColorStop(0,"rgba(255,0,54,1)"),u.addColorStop(.99,"rgba(255,0,54,1)"),u.addColorStop(1,"rgba(255,0,54,0)")),t.globalCompositeOperation="source-over"):(u.addColorStop(0,"rgba(0,0,0,"+.64*v+")"),u.addColorStop(.2,"rgba(0,0,0,"+.41*v+")"),u.addColorStop(.4,"rgba(0,0,0,"+.24*v+")"),u.addColorStop(.7,"rgba(0,0,0,"+.08*v+")"),u.addColorStop(.83,"rgba(0,0,0,"+.06*v+")"),u.addColorStop(.89,"rgba(0,0,0,"+.008*v+")"),u.addColorStop(1,"rgba(0,0,0,0)"),t.globalCompositeOperation="destination-out"),t.lineJoin=t.lineCap="round",t.fillStyle=u,t.fillRect(a-d,s-d,g,g),t.restore();for(x=0;x<e.brushPoints[i].points.length-1;x++){l=Fotor.EngineAction.distanceBetween(e.brushPoints[i].points[x],e.brushPoints[i].points[x+1]),m=Math.max(.13*e.brushPoints[i].size,1),h=Math.floor(Math.max(Math.ceil(l)/m,1)),f={x:(_={x:e.brushPoints[i].points[x+1].x-e.brushPoints[i].points[x].x,y:e.brushPoints[i].points[x+1].y-e.brushPoints[i].points[x].y}).x/h,y:_.y/h},t.save();for(p=0;p<h;p++)a=e.brushPoints[i].points[x].x+f.x*p,s=e.brushPoints[i].points[x].y+f.y*p,u=t.createRadialGradient(a,s,0,a,s,d),null==r?(e.brushPoints[i].isKeepMode?(u.addColorStop(0,"rgba(0,255,132,1)"),u.addColorStop(.99,"rgba(0,255,132,1)"),u.addColorStop(1,"rgba(0,255,132,0)")):(u.addColorStop(0,"rgba(255,0,54,1)"),u.addColorStop(.99,"rgba(255,0,54,1)"),u.addColorStop(1,"rgba(255,0,54,0)")),t.globalCompositeOperation="source-over"):(u.addColorStop(0,"rgba(0,0,0,"+.64*v+")"),u.addColorStop(.2,"rgba(0,0,0,"+.41*v+")"),u.addColorStop(.4,"rgba(0,0,0,"+.24*v+")"),u.addColorStop(.7,"rgba(0,0,0,"+.08*v+")"),u.addColorStop(.83,"rgba(0,0,0,"+.06*v+")"),u.addColorStop(.89,"rgba(0,0,0,"+.008*v+")"),u.addColorStop(1,"rgba(0,0,0,0)"),t.globalCompositeOperation="destination-out"),t.lineJoin=t.lineCap="round",t.fillStyle=u,t.fillRect(a-d,s-d,g,g);t.restore()}}}},distanceBetween:function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},angleBetween:function(e,t){return Math.atan2(t.x-e.x,t.y-e.y)}};e.exports=r}}]);